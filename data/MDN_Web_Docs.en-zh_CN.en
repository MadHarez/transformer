{{GamesSidebar}} 
Some games drive this cycle by user input. Imagine that you are developing a “find the differences between these two similar pictures”-type game. 
The game loop is advanced by the user’s input and sleeps until they provide it. This is more of a turn-based approach that doesn’t demand a constant update every frame, only when the player reacts. 
It might require both input and simulated time. It might even loop based on something else entirely. 
Of course, your game will only be as optimized as you make it. 
JavaScript works best with events and callback functions. Modern browsers strive to call methods right as they are needed and idle (or do their other tasks) in the gaps. It is an excellent idea to attach your code to the moments that are appropriate for them. 
A callback function must be passed in to it when it is called. That callback function will be executed at a suitable time before the next repaint. 
Here is an example of a simple main loop: window.main = () => { window.requestAnimationFrame(main); 
That is not by accident and it is considered best practice. 
The above chunk of code has two statements. 
The first statement creates a function as a global variable called main(). 
This function does some work and also tells the browser to call itself next frame with window.requestAnimationFrame(). 
The second statement calls the main() function, defined in the first statement. 
Timing the main loop to when the browser paints to the display allows you to run your loop as frequently as the browser wants to paint. You are given control over each frame of animation. It is also very simple because main() is the only function getting looped. 
A First-Person Shooter (or a similar game) presents a new scene once every frame. You cannot really get more smooth and responsive than that. 
There are a lot of them and they will make your life easier. Building a better main loop in JavaScript 
/* * Starting with the semicolon is in case whatever line of code above this example * relied on automatic semicolon insertion (ASI). The browser could accidentally 
* think this whole example continues from the previous line. The leading semicolon 
function main() { window.requestAnimationFrame(main); // Your main loop contents } main(); // Start the cycle })(); 
Expanding our last example, the main loop would now look like: 
/* * Starting with the semicolon is in case whatever line of code above this example 
* relied on automatic semicolon insertion (ASI). 
The browser could accidentally * think this whole example continues from the previous line. 
We now have a variable declared in our MyGame namespace, which we call stopMain, that contains the ID returned from our main loop’s most recent call to requestAnimationFrame(). 
window.cancelAnimationFrame(MyGame.stopMain); 
You may have multiple components driven by multiple different types of events. This feels like unnecessary complexity but it might just be good optimization (not necessarily, of course). The problem is that you are not programming a typical main loop. 
Building a more optimized main loop in JavaScript 
The browser’s main thread thus tries to look like the following: 
Start a new frame (while the previous frame is handled by the display). 
Go through the list of requestAnimationFrame callbacks and invoke them. 
Browsers invoke your code as early as possible to give it maximum computation time. Your main thread will often start workloads that are not even on the main thread (such as rasterization or shaders in WebGL). 
Note: Systems (hardware or software) that are not capable of microsecond accuracy are allowed to provide millisecond accuracy as a minimum. 
They should provide 0.001ms accuracy if they are capable of it, however. 
To acquire one of these timestamps, you can call window.performance.now() and store the result as a variable. const tNow = window.performance.now(); 
Back to the topic of the main loop. You will often want to know when your main function was invoked. 
Because this is common, window.requestAnimationFrame() always provides a DOMHighResTimeStamp to callbacks as an argument when they are executed. 
* relied on automatic semicolon insertion (ASI). 
*/ ;(() => { 
MyGame.stopMain = window.requestAnimationFrame(main); 
// Your main loop contents 
} 
main(); // Start the cycle 
Your game genre will obviously make a difference but it could even be more subtle than that. You could draw every pixel individually on a canvas or you could layer DOM elements (including multiple WebGL canvases with transparent backgrounds if you want) into a complex hierarchy. 
You will also need to consider how gracefully your game will fail if the user’s system cannot keep up with the workload. Let us start by assuming that you will handle user input and update the game state every time you draw. We will branch out later. 
The browser could accidentally 
* think this whole example continues from the previous line. The leading semicolon 
* marks the beginning of our new line if the previous one was not empty or terminated. 
* * Let us also assume that MyGame is previously defined. */ 
;(() => { function main(tFrame) { MyGame.stopMain = window.requestAnimationFrame(main); update(tFrame); // Call your update method. In our case, we give it rAF's timestamp. render(); } main(); // Start the cycle })(); 
Each frame of animation accounts for user input. 
No frame needs to be extrapolated (guessed) because each draw has its own update. Simulation systems can basically assume that each full update is ~16ms apart. 
The update method can continue looping without care about what the user sees. The draw method can view the last update and when it happened. 
Since draw knows when it represents, and the simulation time for the last update, it can predict a plausible frame to draw for the user. 
It does not matter whether this is more frequent than the official update loop (or even less frequent). 
There are many ways to separate the update method in web standards: 
This is a more complex solution, and might be too much overhead for simple updates. 
Each of these methods have similar tradeoffs: Users can skip rendering frames or interpolate extra ones depending on their performance. 
Much more complicated to program than the basic loops we saw earlier. 
The mandatory interpolation has a performance penalty. 
/* * Starting with the semicolon is in case whatever line of code above this example * relied on automatic semicolon insertion (ASI). The browser could accidentally * think this whole example continues from the previous line. The leading semicolon * marks the beginning of our new line if the previous one was not empty or terminated. * * Let us also assume that MyGame is previously defined. * * MyGame.lastRender keeps track of the last provided requestAnimationFrame timestamp. * MyGame.lastTick keeps track of the last update time. Always increments by tickLength. * MyGame.tickLength is how frequently the game state updates. It is 20 Hz (50ms) here. * * timeSinceTick is the time between requestAnimationFrame callback and last update. * numTicks is how many updates should have happened between these two rendered frames. * * render() is passed tFrame because it is assumed that the render method will calculate * how long it has been since the most recently passed update tick for * extrapolation (purely cosmetic for fast devices). It draws the scene. * * update() calculates the game state as of a given point in time. It should always * increment by tickLength. It is the authority for game state. It is passed * the DOMHighResTimeStamp for the time it represents (which, again, is always * last update + MyGame.tickLength unless a pause feature is added, etc.) 
* * setInitialState() Performs whatever tasks are leftover before the main loop must run. * It is just a generic example function that you might have added. 
*/ 
This may also apply to some of your own tasks. Those are good candidates to throttle when available resources become a concern. Summary 

{{GamesSidebar}} 
Gaming is one of the most popular computer activities. 
New technologies are constantly arriving to make it possible to develop better and more powerful games that can be run in any standards-compliant web browser. 
Develop web games 
Welcome to the MDN game development center! 
In this area of the site, we provide resources for web developers wanting to develop games. 
You will find many useful tutorials and technique articles in the main menu on the left, so feel free to explore. 
We’ve also included a reference section so you can easily find information about all the most common APIs used in game development. 
Note: Creating games on the web draws on a number of core web technologies such as HTML, CSS, and JavaScript. 
The Learning Area is a good place to go to get started with the basics. 
Port native games to the Web 

{{GamesSidebar}} 
The modern web has quickly become a viable platform not only for creating stunning, high quality games, but also for distributing those games. 
The range of games that can be created is on par with desktop and native OS counterparts. 
With modern Web technologies and a recent browser, it’s entirely possible to make stunning, top-notch games for the Web. 
And we’re not talking about simple card games or multiplayer social games that have in the olden days been done using Flash®. 
We’re talking about 3D action shooters, RPGs, and more. 
Thanks to massive performance improvements in JavaScript just-in-time compiler technology and new APIs, you can build games that run in the browser (or on HTML5-powered devices) without making compromises. 
The HTML game platform 
You can truly think of the Web as a better target platform for your game. 
As we like to say, “the Web is the platform.” 
Let’s take a look at the core of the Web platform: 
Function 
Technology 
Audio 
Web Audio API 
Graphics 
WebGL (OpenGL ES 2.0) 
Input 
Touch events, Gamepad API, device sensors, WebRTC, Full Screen API, Pointer Lock API 
Language 
JavaScript (or C/C++ using Emscripten to compile to JavaScript) 
Networking 
WebRTC and/or WebSockets 
Storage 
IndexedDB or the “cloud” 
Web 
HTML, CSS, SVG (and much more!) 

{{GamesSidebar}} 
Advantages 
Games built with HTML work on smartphones, tablets, PCs and Smart TVs. 
Advertise and promote your game all over the Web as well as other media. 
Payments. 
Charge what you want and use whatever payment processing service you like. 
Update your game whenever you want. 
Collect your own analytics! 
Connect with your customers more closely, 
Players can play the game anywhere, anytime. 
Web Technologies 
Function 
Technology 
Audio 
Web Audio API 
Graphics 
WebGL (OpenGL ES 2.0) 
Input 
Touch events, Gamepad API, device sensors, WebRTC, Full Screen API, Pointer Lock API 
Language 
JavaScript (or C/C++ using Emscripten to compile to JavaScript) 
Networking 
WebRTC and/or WebSockets 
Storage 
IndexedDB or the “cloud” 
Web 
HTML, CSS, SVG, Social API (and much more!) 

{{GamesSidebar}} 
You’ve followed a tutorial or two and created an HTML game — that’s great! 
This article covers all you need to know about the ways in which you can distribute your newly created game into the wild. 
This includes hosting it yourself online, submitting it to open marketplaces, and submitting it to closed ones like Google Play or the iOS App Store. 
Benefits of HTML over native 
Building games with HTML gives you extra advantages, such as: 
Multiplatform bliss 
The technology itself is multiplatform, so you can write the code once and target multiple devices. 
This can range from low-end smartphones or tablets, through laptops and desktop computers, to smart TVs, watches or even a fridge if it can handle a modern enough browser. 
You don’t need to have separate teams to work on the same title targeting different platforms with only one code base to worry about. 
You can spend more time and money on Promotion and Monetization. 
Instant updates 
You don’t have to wait several days to have your game’s code updated. 
If your user finds a bug, you can quickly fix it, update the system and refresh the game on your server to provide players with the updated code almost instantly. 
Direct link distribution and instant play 
You don’t have to tell people to search for your game in an app store with HTML games. 
You can just send them a direct URL to access the game, which they can then click to play the game right away without the need to use third party plugins or download and install a large package. 
Bear in mind that downloading the game might still take a bit of time depending on the size of the game and your network speed. 
In any case, it’s a lot easier to promote the game if you can drive traffic directly where you want it and don’t have to jump through lots of hoops to play. 

{{GamesSidebar}} 
When you’ve spent your time building a game, distributing it and promoting it you should consider earning some money out of it. 
If your work is a serious endeavour on the path to becoming an independent game developer able to make a living, read on and see what your options are. 
The technology is mature enough; now it’s just about choosing the right approach. 
Paid games 
The first, most obvious choice that may come to your mind might be selling the games the way it is done for huge AAA titles — with a fixed, up front price. 
Even though the digital market is key and you don’t need to print covers and put your game in a physical store in boxes, to earn decent money on selling your games for a fixed price you have to invest your time and money in marketing. 
Only the best games will break even or earn more than they cost to make, and you still need a lot of luck for that. 
How much you charge for your game depends on the market, quality of your game and a lot of other small factors. 
An arcade iOS title can be sold for 0.99 USD, but a longer RPG-style desktop game on Steam can cost 20 USD; both prices are OK. 
You have to follow the market and do your own research — learning from your mistakes quickly is important. 
In-app purchases 
Instead of having people pay for your game up front, you can offer a free game with in-app purchases (IAPs.) 
In this case the game can be acquired without spending a dime — give the game to the players, but offer in-game currency, bonuses or benefits for real money. 
Specific examples can include bonus levels, better weapons or spells, or refilling the energy needed to play. 
Designing a good IAP system is an art of its own. 
Remember that you need thousands of downloads of your game to make IAPs effective — only a small fraction of players will actually pay for IAPs. 
How small? 
It varies, but around one person in every thousand is about average. 
The more people that play your game, the higher the chance someone will pay, so your earnings heavily depend on your promotion activities. 
Freemium 
Games that feature IAPs are often referred to a freemium — a freemium game can be acquired and played for free, but you can pay for extra (premium) features, virtual goods or other benefits. 
The word itself acquired negative connotations after big companies focused on creating games, the main purpose of which was to get as much money from the players as possible instead of delivering a fun experience. 
The worst cases were when you could use real money to pay for getting advantages over other players, or when they restricted access to the next stages of the game unless the players paid. 
The term “pay to win” was coined and this approach is disliked by many players and devs. 
If you want to implement IAPs try to add value to the game with something players will enjoy instead of taking it out and then charging for it. 
Add-ons and DLCs 
Add-ons and downloadable content are a good way to provide extra value to an already released game, but remember that you’ll have to offer decent, entertaining content to attract people to buy it. 
A totally new set of levels with new characters, weapons and story is a good material for DLC, but to have enough sales the game itself has to be popular, or else there won’t be any players interested in spending their hard-earned money on it. 
Advertisements 
Instead of actively selling the games you can also try to get yourself a passive income — showing adverts and relying on previous activities related to promoting your game may benefit, but your game has to be addictive, which isn’t as easy as it sounds. 
You still need to plan it out, and at some point you’ll need a bit of luck too. 
If your game goes viral and people start sharing it, you can get a lot of downloads and money out of adverts. 
There are many companies offering advert systems — you sign up and allow them to show adverts in exchange for a percentage of the earnings. 
Google AdSense is said to be the most effective one, but it’s not designed for games and it’s a pretty bad practice to use it for that purpose. 
Instead of risking of having your account closed and all the money blocked try to use the usual, gamedev targeted portals like LeadBolt. 
They offer easy to implement systems to show the adverts in your games and split the earnings with you. 
Video ads are getting more and more popular, especially in the form of a pre-roll — they are shown at the beginning of your game while it’s still loading. 
And on the topic of where to put the advertisements in your game it really depends on you. 
It should be as subtle as possible to not annoy the players too much, but visible enough to make them click it or at least take notice. 
Adding adverts between game sessions on game over screens is a popular approach. 
Licensing 
There’s an approach that can work as a monetization model on its own, and that’s selling licenses for distribution of your game. 
There are more and more portals interested in showing your games on their websites. 
They follow various strategies to earn money via your games, but you don’t have to worry about all that as selling the license is usually a one-time deal. 
You get the money and they can get creative with using your game to make money. 
Finding publishers might be hard at first — try to look for them at the HTML5 Gamedevs forums. 
If you’re well known they may reach out to you. 
Most of the deals are done through emails when talking to a dedicated person on the publisher side. 
Some publisher websites have that information easily available, while some others are harder to find. 
When reaching a publisher try to be nice and straight to the point — they are busy people. 
Exclusive licenses 
The exclusive license is a type of license for one publisher — you’ve built a game and you’re selling all the rights to it to a single entity along with the rights to redistribute it — Softgames are an example of such a publisher. 
You can’t sell it again in any form while that publisher has the rights — that’s why exclusive deals are worth quite a lot of money. 
How much exactly? 
It depends on the quality of the game, it’s genre, its publisher, and many others, but usually it will be something between 2000 and 5000 USD. 
Once you’ve sold an exclusive license you can forget about promoting that particular game as you won’t earn more, so go into such a deal only if you’re sure it’s profitable enough. 
Non-exclusive licenses 
This approach is less strict — you can sell a license to multiple publishers. 
This is the most popular approach as with every new publisher (and they are constantly showing up) you can sell your games on non-exclusive terms. 
Remember that with this license the publisher can’t redistribute it further — it’s often called a site-locked deal as they buy the right to publish the game on their own given portal. 
The usual cost of a non-exclusive license is around 500 USD. 
Subscriptions 
There’s also an option to get a passive, monthly revenue via a subscription deal. Instead of getting a one-time payment you can get a small amount of money per game, per month — it can be something around 20-50 USD per month, per game. 
It’s normally up to you if you want to get all the money in a lump sum or get it per month. 
Remember that it can be cancelled, so it’s not an indefinitely working solution. 
Ad revenue 
You can implement advertisements in your game on your own and try to find the traffic to earn a bit, but you can also do a revenue share deal with a publisher. 
They will take care of driving the traffic and will split the earnings — usually in a 70/30 or 50/50 deal, collected per month. 
Remember that many new, low quality publishers will want to get your game for ad revenue instead of licensing because it will be cheaper for them and you might end up with earnings around 2 USD per game for the whole deal. 
Be careful when dealing with new publishers — sometimes it’s better to lower the license cost for a known one rather than risking fraud with an unknown publisher for more money. 
Publishers taking your games for revenue share, and/or licensing may require implementing their own APIs, which could take extra work, so consider that in your rates too. 
Branding 
You can sell rights to use your game for branding, or do it yourself. 
In the first case it’s almost like non-exclusive licensing, but the client will usually buy rights for the code and implement their own graphics. 
In the second case it’s like a freelance deal, but you’re reusing the code and adding graphics provided by the client, sometimes implementing them as they instruct you. 
As an example if you’ve got a game where a player taps items of food, you could change the food to the client’s products to give them advertising. 
Prices in this model vary greatly depending on the brand, client, and amount of work you put in. 
Other non-game focused monetization strategies 
There are other ways you can earn money when building HTML games, and it doesn’t even have to be game-related. 
Selling resources 
If you’re a graphic designer, you can sell the assets from the games you’ve created, or something brand new exclusively for that purpose at online shops like Envato Market. 
It’s not much, but if you’re a known designer it can be an extra passive stream of income. 
Writing articles and tutorials 
It is possible to write articles about your games and even get paid for them. 
Game promotion and monetization at the same time is a win-win, and if you don’t abuse it with too much advertising the readers will enjoy reading them and as well as learning a thing or two. 
If you focus on sharing the knowledge first and use your games just as the examples it should be OK. 
Check out Tuts+ Game Development or similar websites for writing opportunities. 
Merchandise 
You can sell t-shirts, stickers or other gadgets — some devs make more money from the merchandise than from the games themselves, but it only works on very popular and recognizable games like Angry Birds. 
Still, it could be another small stream of passive income. 
The more diversified your earnings are, the better your business stability. 
Donations 
When all else fails you can try putting a donate button on your game’s page and asking for support from the community. 
Sometimes it works, but only if the player knows you and feels that it will help you in your situation. 
That’s why carefully managing your community is so important. 
It worked with the js13kGames competition — every participant got a free t-shirt, and some even gave back a few bucks to help keep it going in years to come. 
Summary 
There are many ways to earn money — everything that applies to the “normal” AAA gaming world can be, more or less, applied to casual HTML games. 
You might however also focus on selling licenses, doing branding, or earning on a revenue share basis from the advertisements. 
It’s totally up to you which path you’re going to follow. 

{{GamesSidebar}} 
Developing and publishing your game is not enough. 
You have to let the world know that you have something interesting available that people will enjoy playing. 
There are many ways to promote your game — most of them being free, so even if you’re struggling to make a living as an indie dev with zero budget you can still do a lot to let people know about your great new game. 
Promoting the game helps a lot when monetizing it later on too, so it’s important to do it correctly. 
Competitions 
Taking part in competitions will not only level up your gamedev skills and let you meet new devs to befriend and learn from — and it will also get you involved in the community. 
If you make a good game for a competition and win some prizes in the process your game will automatically be promoted by the organizers and other attendees. 
You’ll be rich and famous, or so they say. 
Many great games get started as a quick, sloppy demo submitted to a competition. 
If both the idea and the execution are good enough, you will succeed. 
Plus competitions generally require games to follow a mandatory theme, so you can get creative around a theme if you are stuck for ideas. 
Website and blog 
You should definitely create your own website containing all the information about your games, so people can see what you’ve worked on. 
The more information you can include the better — you should include screenshots, description, trailer, press kit, requirements, available platforms, support details and more. 
You’ll get bonus points for allowing your users to directly play your games online — at least in demo form. 
Also, you should do some work on SEO to allow people to find your games more easily. 
You should also blog about everything related to your gamedev activities. Write about your development process, nasty bugs you encounter, funny stories, lessons learned, and the ups and downs of being a game developer. 
Continually publishing information about your games will help educate others, increase your reputation in the community, and further improve SEO. 
A further option is to publish monthly reports that summarize all your progress — it helps you see what you’ve accomplished throughout the month and what’s still left to do, and it keeps reminding people that your game is coming out soon — building buzz is always good. 
Social media 
Your social media presence is very important — hashtags can help find friends and allow you to engage with the community and help other devs in need. 
Honesty is key and you should be authentic, because nobody likes boring press releases or pushy advertisements. 
When the time comes, your community will help you spread the word about your shiny new game! 
Keep an eye on gamers who stream on YouTube and Twitch, engage with Twitter circles and be active on forums such as HTML5GameDevs.com. 
Share your news and answer questions so that people will value what you’re doing and will know that you’re trustworthy. 
Remember to not be too pushy when it comes to telling everyone about your games — you’re not a walking advertisement. 
Grow your audience by talking to them, sharing tips, offering discounts, giving away prizes in competitions, or just complaining at the weather or buggy browser you have to deal with. Be generous, be yourself and be there for others, and you’ll be treated with respect. 
Game portals 
There are a number of different game portals to which you can send your games for publication. Some portals have their own APIs that allow you to authorize users, save their progress and process in-app purchases. 
You can also sell a full version of the game from inside your browser demo version, which will be a great move considering high competition, some developers even manage to make full browser versions. 
Free portals offer traffic, but only the best ones are popular enough to generate revenues from advertisements on in-app purchases. 
On the other hand they are a perfect tool to make games visible to a broader audience if you have no budget and limited time. 
Press 
You can try and reach the press about your game, but bear in mind that they get a tonne of requests like this every single day, so be humble and patient if they don’t answer right away, and be polite when talking to them. 
Be sure to check first if they are dealing with specific genres of games or platforms, so you don’t send them something that is not relevant to them in the first place. 
If you’re honest with your approach and your game is good, then you’ve got more of a chance of success. 
If you want to learn more about the etiquette of contacting the press you should definitely check out How To Contact Press - a great guide from Pixel Prospector. 
Tutorials 
It’s good to share your knowledge with other devs — after all you probably learned a thing or two from online articles, so you take the time to pay that knowledge forward. 
Talking or writing about something you achieved or problems you overcame is something people would be interested it. 
And you can use your own game as an example, especially in a tutorial when you’re showing how to do something you’ve implemented already. 
That way everyone benefits — people learn new skills, your game gets promoted, and if you’re lucky you can even get paid for writing a tutorial if it’s good enough. 
There are portals like Tuts+ Game Development which will be more than happy if you write for them - they pay for the content, but not all topic ideas will be accepted. 
When writing a tutorial remember to focus on delivering something valuable to the reader. 
They want to learn something - offer your expertise and use your game as a case study. 
Focus on one aspect and try to explain it throughout and in detail. 
Also remember to follow up discussion in comments if people have any questions. 
If portals you contact are not interested in your content because you don’t have any experience yet, try writing tutorials and publish them on your own blog first. 
It’s the easiest way to train your writing skills on your own. 
Events 
If you’ve gone through all the options listed above you can still find new, creative ways to promote your game — events are another good example. 
Attending events, both local and global, gives you the ability to meet your fans face to face, as well as other members of the development community. 
Value the fact that they spent their time seeing you. 
Conferences 
There are many conferences where you can give a talk explaining some technical difficulties you overcame, or how you implemented specific APIs; again — use your games as examples for that. 
It’s important to focus on the knowledge part and tone down the marketing — devs are sensitive on this matter and you may end up with an angry crowd if you just try to sell them something. 
Fairs 
The other event-related option is fairs (or expos) — at such an event you can get a booth among other devs and promote your game to all the attendees passing by. 
If you do so, try to be unique and original, so you easily stand from the crowd. 
Do it the right way and everybody will be talking about you and your game. 
Having a booth gives you the possibility to interact with your fans directly — besides the promotion part you can also test new builds of your game on regular people and fix any bugs (or incorporate any feedback) they uncover. 
You can’t imagine what people may come up with when playing your game, and what obvious issues you’ve missed while spending hours polishing it. 
Promo codes 
If you’re selling the game, then create the ability to distribute promo codes allowing people to access your game for free (or at least a demo or time-limited version), and send them all over the place — to press, YouTubers, as competition prizes, etc. 
If the game reaches certain people you’ll get a free advert to thousands of players. 
It can boost interest in your game more than anything else if you get lucky. 
Fostering the community 
You can help community grow and promote yourself and your games at the same time. 
Sending out weekly newsletters and organizing online competitions or local meetups will show others that you’re passionate about what you do and that they can rely on you. 
Then when you need any help they will be there for you. 
Summary 
Any way of promoting your game is good. 
You have a lot of options to chose from with most of them being free, so it’s only about your enthusiasm and available time. 
Sometimes you have to spend more time promoting a game than actually developing it. 
Remember that it’s no use to have the best game in the world if no one knows it exists. 
Now lets get on with that monetization part, and earn something for a living. 

{{GamesSidebar}} 
HTML games have a huge advantage over native in terms of publishing and distribution — you have the freedom of distribution, promotion and monetization of your game on the Web, rather than each version being locked into a single store controlled by one company. 
You can benefit from the web being truly multiplatform. 
This series of articles looks at the options you have when you want to publish and distribute your game, and earn something out of it while you wait for it to become famous. 
Game distribution 
So you’ve followed a tutorial or two and created an HTML game — that’s great! 
Game distribution provides all you need to know about the ways you can distribute your newly created game into the wild — including hosting it yourself online, submitting it to open marketplaces, and submitting it to closed ones like Google Play or the iOS App Store. 
Game promotion 
Developing and finishing the game is not enough. 
You have to let the world know that you have made something interesting available, which people will enjoy playing. 
There are many Game promotion techniques — many of them free — so even if you’re struggling to make a living as an indie dev with zero budget you can still do a lot to let people know about your great new game. 
Promoting the game helps a lot in monetizing it later on too, so it’s important to do it effectively. 
Game monetization 
When you spend your time building, publishing and promoting your game, you will at some point consider earning money out of it. Game monetization is essential to anyone who considers their game development work a serious endeavour on the path to becoming an independent game developer able to make a living, so read on and see what your options are. 
The technology is mature enough; it’s just a matter of choosing the right approach. 



{{GamesSidebar}} 
This article explains all of the basic theory that’s useful to know when you are getting started working with 3D. 
Coordinate system 
3D essentially is all about representations of shapes in a 3D space, with a coordinate system used to calculate their position. 
Coordinate system 
WebGL uses the right-hand coordinate system — the x axis points to the right, the y axis points up, and the z axis points out of the screen, as seen in the above diagram. 
Objects 
Different types of objects are built using vertices. 
A Vertex is a point in space having its own 3D position in the coordinate system and usually some additional information that defines it. 
Every vertex is described by these attributes: 
Position: Identifies it in a 3D space (x, y, z). 
Color: Holds an RGBA value (R, G and B for the red, green, and blue channels, alpha for transparency — all values range from 0.0 to 1.0). 
Normal: A way to describe the direction the vertex is facing. 
Texture: A 2D image that the vertex can use to decorate the surface it is part of instead of a simple color. 
You can build geometry using this information — here is an example of a cube: 
Cube 
A face of the given shape is a plane between vertices. 
For example, a cube has 8 different vertices (points in space) and 6 different faces, each constructed out of 4 vertices. 
A normal defines which way the face is directed in. 
Also, by connecting the points we’re creating the edges of the cube. 
The geometry is built from a vertex and the face, while material is a texture, which uses a color or an image. 
If we connect the geometry with the material we will get a mesh. 
Rendering pipeline 
The rendering pipeline is the process by which images are prepared and output onto the screen. 
The graphics rendering pipeline takes the 3D objects built from primitives described using vertices, applies processing, calculates the fragments and renders them on the 2D screen as pixels. 
Rendering pipeline 
Terminology used in the diagram above is as follows: 
A Primitive: An input to the pipeline — it’s built from vertices and can be a triangle, point or line. 
A Fragment: A 3D projection of a pixel, which has all the same attributes as a pixel. 
A Pixel: A point on the screen arranged in the 2D grid, which holds an RGBA color. 
Vertex and fragment processing are programmable — you can write your own shaders that manipulate the output. 
Vertex processing 
Vertex processing is about combining the information about individual vertices into primitives and setting their coordinates in the 3D space for the viewer to see. 
It’s like taking a photo of the given scenery you have prepared — you have to place the objects first, configure the camera, and then take the shot. 
Vertex processing 
There are four stages to this processing: the first one involves arranging the objects in the world, and is called model transformation. 
Then there’s view transformation which takes care of positioning and setting the orientation of the camera in the 3D space. 
The camera has three parameters — location, direction, and orientation — which have to be defined for the newly created scene. 
Camera 
Projection transformation (also called perspective transformation) then defines the camera settings. It sets up what can be seen by the camera — the configuration includes field of view, aspect ratio and optional near and far planes. read the Camera paragraph in the Three.js article to learn about those. 
Camera settings 
The last step is viewport transformation, which involves outputting everything for the next step in the rendering pipeline. 
Rasterization 
Rasterization converts primitives (which are connected vertices) to a set of fragments. 
Rasterization 
Those fragments — which are 3D projections of the 2D pixels — are aligned to the pixel grid, so eventually they can be printed out as pixels on a 2D screen display during the output merging stage. 
Fragment processing 
Fragment processing focuses on textures and lighting — it calculates final colors based on the given parameters. 
Fragment processing 
Textures 
Textures are 2D images used in the 3D space to make the objects look better and more realistic. 
Textures are combined from single texture elements called texels the same way picture elements are combined from pixels. 
Applying textures onto objects during the fragment processing stage of the rendering pipeline allows us to adjust it by wrapping and filtering it if necessary. 
Texture wrapping allows us to repeat the 2D image around the 3D object. 
Texture filtering is applied when the original resolution or the texture image is different from the displayed fragment — it will be minified or magnified accordingly. 
Lighting 
The colors we see on the screen is a result of the light source interacting with the surface colors of the object’s material. 
Light might be absorbed or reflected. The standard Phong Lighting Model implemented in WebGL has four basic types of lighting: 
Diffuse: A distant directional light, like the sun. 
Specular: A point of light, just like a light bulb in a room or a flashlight. 
Ambient: The constant light applied to everything on the scene. 
Emissive: The light emitted directly by the object. 
Output merging 
During the output manipulation stage all the fragments of the primitives from the 3D space are transformed into a 2D grid of pixels that are then printed out on the screen display. 
Output merging 
During output merging some processing is also applied to ignore information that is not needed — for example the parameters of objects that are outside the screen or behind other objects, and thus not visible, are not calculated. 
Conclusion 
Now you know the basic theory behind 3D manipulation. 
If you want to move on to practice and see some demos in action, follow up with the tutorials below: 
Building up a basic demo with Three.js 
Building up a basic demo with Babylon.js 
Building up a basic demo with PlayCanvas 
Building up a basic demo with A-Frame 
Go ahead and create some cool cutting-edge 3D experiments yourself! 

{{GamesSidebar}} 
A typical 3D scene in a game — even the simplest one — contains standard items like shapes located in a coordinate system, a camera to actually see them, lights and materials to make it look better, animations to make it look alive, etc. Three.js, as with any other 3D library, provides built-in helper functions to help you implement common 3D functionality more quickly. 
In this article we’ll take you through the real basics of using Three, including setting up a development environment, structuring the necessary HTML, the fundamental objects of Three, and how to build up a basic demo. 
Note: We chose Three because it is one of the most popular WebGL libraries, and it is easy to get started with. 
We are not trying to say it is better than any other WebGL library available, and you should feel free to try another library, such as CopperLicht, GLGE, or PlayCanvas. 
Environment setup 
To start developing with Three.js, you don’t need much. You should: 
Make sure you are using a modern browser with good WebGL support, such as the latest Firefox or Chrome. 
Create a directory to store your experiments in. 
Save a copy of the latest minimized Three.js library inside your directory. 
Open the Three.js documentation in a separate tab — it is useful to refer to. 
HTML structure 
Here’s the HTML structure we will use: 
<! 
doctype html> 
<html lang="en-GB"> 
<head> 
<meta charset="utf-8" /> 
<title>MDN Games: Three.js demo</title> 
<style> 
body { 
margin: 0; 
padding: 0; 
} 
canvas { 
width: 100%; 
height: 100%; 
} 
</style> 
</head> 
<body> 
<script src="three.min.js"></script> 
<script> 
const WIDTH = window.innerWidth; 
const HEIGHT = window.innerHeight; 
/* all our JavaScript code goes here */ 
</script> 
</body> 
</html> 
It contains some basic information like the document {{htmlelement(“title”)}}, and some CSS to set the width and height of the {{htmlelement(“canvas”)}} element, that Three.js will insert on the page to 100% to fill the entire available viewport space. 
The first {{htmlelement(“script”)}} element includes the Three.js library in the page, and we will write our example code inside the second. 
There are two helper variables already included, which store the window’s width and height. 
Before reading further, copy this code to a new text file, and save it in your working directory as index.html. 
Renderer 
A renderer is a tool which displays scenes right in your browser. 
There are a few different renderers: WebGL is the default, and others you can use are Canvas, SVG, CSS, and DOM. 
They differ in how everything is rendered, so the WebGL implementation will implement differently than the CSS one. 
Despite the variety of ways they achieve the goal, the experience will look the same for the user. 
const renderer = new THREE.WebGLRenderer({ antialias: true }); 
renderer.setSize(WIDTH, HEIGHT); 
renderer.setClearColor(0xdddddd, 1); 
document.body.appendChild(renderer.domElement); 
We are creating a new WebGL renderer, setting its size to fit the whole available space on the screen, and appending the DOM structure to the page. 
You might have noticed the antialias parameter in the first line — this renders the edges of shapes more smoothly. 
The setClearColor() method sets our background to a light gray color, instead of the default black one. 
Add this code into our second {{htmlelement(“script”)}} element, just below the JavaScript comment. 
Scene 
A scene is the place where everything happens. 
When creating new objects in the demo, we add them all inside the scene to become visible on the screen. 
In three.js, the scene is represented by a Scene object. 
Let’s create it, by adding the following line below our previous lines: 
const scene = new THREE.Scene(); 
Later, we will be using the .add() method, to add objects to this scene. 
Camera 
We have the rendered scene, but we still need to add a camera to view our handiwork — imagine a movie set without any cameras. 
The following lines put the camera in place in the 3D coordinate system, and point it in the direction of our scene, so we can finally see something: 
const camera = new THREE.PerspectiveCamera(70, WIDTH / HEIGHT); 
camera.position.z = 50; 
scene.add(camera); 
Add the above lines to your code, below those previously added. 
There are other types of camera available (Cube, Orthographic), but the simplest is Perspective. 
To initialize it, we have to set its field of view and aspect ratio: the former is used to set how much is seen, and the latter is important for the objects on the screen to have the right proportions when rendered, and not look stretched. 
Let’s explain values we are setting for the code above: 
The value we set for the field of view, 70, is something we can experiment with: the higher the value, the greater the amount of scene the camera will show. 
Imagine a normal camera view, versus a fish eye effect, which allows a lot more to be seen. 
The default value is 50. 
The aspect ratio is set to the current width and height of the window so it will be dynamically adjusted. 
We could set a fixed ratio — for example 16 ⁄ 9, which is the aspect ratio of a widescreen TV. 
The default value is 1. 
The z position, with the value of 50 units, is the distance between the camera and the center of the scene on the z axis. Here we’re moving the camera back, so the objects in the scene can be viewed. 50 feels about right. It’s not too near, or too far, and the sizes of the objects allow them to stay on the scene, within the given field of view. 
The x and y values, if not specified, will default to 0. 
You should experiment with these values and see how they change what you see in the scene. 

{{GamesSidebar}} 
Shaders use GLSL (OpenGL Shading Language), a special OpenGL Shading Language with syntax similar to C. GLSL is executed directly by the graphics pipeline. 
There are several kinds of shaders, but two are commonly used to create graphics on the web: Vertex Shaders and Fragment (Pixel) Shaders. 
Vertex Shaders transform shape positions into 3D drawing coordinates. Fragment Shaders compute the renderings of a shape’s colors and other attributes. 
GLSL is strongly typed and there is a lot of math involving vectors and matrices. It can get very complicated — very quickly. 
In this article we will make a simple code example that renders a cube. 
To speed up the background code we will be using the Three.js API. 
As you may remember from the basic theory article, a vertex is a point in a 3D coordinate system. 
Vertices may, and usually do, have additional properties. 
The 3D coordinate system defines space and the vertices help define shapes in that space. 
Shader types 
A shader is essentially a function required to draw something on the screen. 
Shaders run on a GPU (graphics processing unit), which is optimized for such operations. Using a GPU to deal with shaders offloads some of the number crunching from the CPU. This allows the CPU to focus its processing power on other tasks, like executing code. 
Vertex shaders 
Vertex shaders manipulate coordinates in a 3D space and are called once per vertex. 
The purpose of the vertex shader is to set up the gl_Position variable — this is a special, global, and built-in GLSL variable. gl_Position is used to store the position of the current vertex. 
The void main() function is a standard way of defining the gl_Position variable. 
Everything inside void main() will be executed by the vertex shader. 
A vertex shader yields a variable containing how to project a vertex’s position in 3D space onto a 2D screen. 
Fragment shaders 
Fragment (or texture) shaders define RGBA (red, green, blue, alpha) colors for each pixel being processed — a single fragment shader is called once per pixel. 
The purpose of the fragment shader is to set up the gl_FragColor variable. gl_FragColor is a built-in GLSL variable like gl_Position. 
The calculations result in a variable containing the information about the RGBA color. 
Demo 
Let’s build a simple demo to explain those shaders in action. 
Be sure to read Three.js tutorial first to grasp the concept of the scene, its objects, and materials. 
Note: Remember that you don’t have to use Three.js or any other library to write your shaders — pure WebGL (Web Graphics Library) is more than enough. 
We’ve used Three.js here to make the background code a lot simpler and clearer to understand, so you can just focus on the shader code. 
Three.js and other 3D libraries abstract a lot of things for you — if you wanted to create such an example in raw WebGL, you’d have to write a lot of extra code to actually make it work. 
Environment setup 
To start with the WebGL shaders you don’t need much. You should: 
Make sure you are using a modern browser with good WebGL support, such as the latest Firefox or Chrome. 
Create a directory to store your experiments in. 
Save a copy of the latest minimized Three.js library inside your directory. 
HTML structure 
Here’s the HTML structure we will use. 
<! 
doctype html> 
<html lang="en-US"> 
<head> 
<meta charset="utf-8" /> 
<title>MDN Games: Shaders demo</title> 
<style> 
body { 
margin: 0; 
padding: 0; 
font-size: 0; 
} 
canvas { 
width: 100%; 
height: 100%; 
} 
</style> 
<script src="three.min.js"></script> 
</head> 
<body> 
<script id="vertexShader" type="x-shader/x-vertex"> 
// vertex shader's code goes here 
</script> 
<script id="fragmentShader" type="x-shader/x-fragment"> 
// fragment shader's code goes here 
</script> 
<script> 
// scene setup goes here 
</script> 
</body> 
</html> 
It contains some basic information like the document {{htmlelement(“title”)}}, and some CSS to set the width and height of the {{htmlelement(“canvas”)}} element that Three.js will insert on the page to be the full size of the viewport. 
The {{htmlelement(“script”)}} element in the {{htmlelement(“head”)}} includes the Three.js library in the page; we will write our code into three script tags in the {{htmlelement(“body”)}} tag: 
The first one will contain the vertex shader. 
The second one will contain the fragment shader. 
The third one will contain the actual JavaScript code generating the scene. 
Before reading on, copy this code to a new text file and save it in your working directory as index.html. 
We’ll create a scene featuring a simple cube in this file to explain how the shaders work. 
The cube’s source code 
Instead of creating everything from scratch we can reuse the Building up a basic demo with Three.js source code of the cube. Most of the components like the renderer, camera, and lights will stay the same, but instead of the basic material we will set the cube’s color and position using shaders. 
Go to the cube.html file on GitHub, copy all the JavaScript code from inside the second {{htmlelement(“script”)}} element, and paste it into the third <script> element of the current example. 
Save and load index.html in your browser — you should see a blue cube. 
The vertex shader code 
Let’s continue by writing a simple vertex shader — add the code below inside the body’s first <script> tag: 
void main() { 
gl_Position = projectionMatrix * modelViewMatrix * vec4(position.x+10.0, position.y, position.z+5.0, 1.0); 
} 
The resulting gl_Position is calculated by multiplying the model-view and the projection matrices by each vector to get the final vertex position, in each case. 
Note: You can learn more about model, view, and projection transformations from the vertex processing paragraph, and you can also check out the links at the end of this article to learn more about it. 
Both projectionMatrix and modelViewMatrix are provided by Three.js and the vector is passed with the new 3D position, which results in the original cube moving 10 units along the x axis and 5 units along the z axis, translated via a shader. 
We can ignore the fourth parameter and leave it with the default 1.0 value; this is used to manipulate the clipping of the vertex position in the 3D space, but we don’t need in our case. 
The texture shader code 
Now we’ll add the texture shader to the code — add the code below to the body’s second <script> tag: 
void main() { 
gl_FragColor = vec4(0.0, 0.58, 0.86, 1.0); 
} 
This will set an RGBA color to recreate the current light blue one — the first three float values (ranging from 0.0 to 1.0) represent the red, green, and blue channels while the fourth one is the alpha transparency (ranging from 0.0 — fully transparent — to 1.0 — fully opaque). 
Applying the shaders 
To actually apply the newly created shaders to the cube, comment out the basicMaterial definition first: 
// const basicMaterial = new THREE.MeshBasicMaterial({color: 0x0095DD}); 
Then, create the shaderMaterial: 
const shaderMaterial = new THREE.ShaderMaterial({ 
vertexShader: document.getElementById("vertexShader").textContent, 
fragmentShader: document.getElementById("fragmentShader").textContent, 
}); 
This shader material takes the code from the scripts and applies it to the object the material is assigned to. 
// const cube = new THREE.Mesh(boxGeometry, basicMaterial); 
const cube = new THREE.Mesh(boxGeometry, shaderMaterial); 
Three.js compiles and runs the shaders attached to the mesh to which this material is given. 
In our case the cube will have both vertex and texture shaders applied. 
That’s it — you’ve just created the simplest possible shader, congratulations! 
Here’s what the cube should look like: 
Three.js blue cube demo 
renderer.setClearColor(0xdddddd, 1); 
scene.add(camera); 
const shaderMaterial = new THREE.ShaderMaterial({ vertexShader: document.getElementById("vertexShader").textContent, fragmentShader: document.getElementById("fragmentShader").textContent, 
}); const cube = new THREE.Mesh(boxGeometry, shaderMaterial); scene.add(cube); cube.rotation.set(0.4, 0.2, 0); function render() { requestAnimationFrame(render); renderer.render(scene, camera); } render(); CSS body { margin: 0; padding: 0; font-size: 0; } canvas { width: 100%; height: 100%; } Result 
{{ EmbedLiveSample(‘Final_code’, ‘100%’, ‘400’) }} 
Conclusion 
This article has taught the very basics of shaders. 
Our example doesn’t do much but there are many more cool things you can do with shaders — check out some really cool ones on ShaderToy for inspiration and to learn from their sources. 
See also 
Learning WebGL — for general WebGL knowledge 
WebGL Shaders and GLSL at WebGL Fundamentals — for GLSL specific information 

{{GamesSidebar}} 
For rich gaming experiences on the web, the weapon of choice is WebGL, which is rendered on HTML {{htmlelement(“canvas”)}}. 
WebGL is basically an OpenGL ES 2.0 for the Web — it’s a JavaScript API providing tools to build rich interactive animations and of course, also games. 
You can generate and render dynamic 3D graphics with JavaScript that is hardware accelerated. 
Documentation and browser support 
The WebGL project documentation and specification is maintained by the Khronos Group, not the W3C as with most of the web APIs. 
Support on modern browsers is very good, even on mobile, so you don’t have to worry about that too much. 
The main browsers are all supporting WebGL and all you need to focus on is optimizing the performance on the devices you use. 
There’s an ongoing effort on releasing WebGL 2.0 (based on OpenGL ES 3.0) in the near future, which will bring many improvements and will help developers build games for the modern web using current, powerful hardware. 
Explaining the basic 3D theory 
The basics of 3D theory centers around shapes represented in a 3D space, with a coordinate system being used to calculate their positions. 
See our Explaining basic 3D theory article for all the information you need. 
Advanced concepts 
You can do a lot more with WebGL. 
There are some advanced concepts which you should dive into and learn more about — like shaders, collision detection, or the latest hot topic: virtual reality on the web. 
Shaders 
It’s worth mentioning shaders, which are a separate story on their own. 
Shaders use GLSL, a special OpenGL shading language, with syntax similar to C, that is executed directly by the graphics pipeline. 
Collision detection 
It’s hard to imagine a game without collision detection — we always need to work out when something is hitting something else. 
We have information available for you to learn from: 
2D collision detection 
3D collision detection 
The concept of virtual reality is not new, but it’s storming onto the web thanks to hardware advancements such as the Oculus Rift, and the (currently experimental) WebVR API for capturing information from VR hardware and making it available for use in JavaScript applications. 
For more, read WebVR — Virtual Reality for the Web. 
There’s also the Building up a basic demo with A-Frame article showing you how easy it is to build 3D environments for virtual reality using the A-Frame framework. 
The rise of libraries and frameworks 
Coding raw WebGL is fairly complex, but you’ll want to get to grips with it in the long run, as your projects get more advanced (see our WebGL documentation to get started.) 
For real-world projects you’ll probably also make use of a framework to speed up development and help you manage the project you’re working on. 
Using a framework for 3D games also helps optimize the performance as a lot is taken care of by the tools you use, so you can focus on building the game itself. 
The most popular JavaScript 3D library is Three.js, a multipurpose tool that makes common 3D techniques simpler to implement. 
There are other popular game development libraries and frameworks worth checking too; A-Frame, PlayCanvas and Babylon.js are among the most recognizable ones with rich documentation, online editors and active communities. 
Building up a basic demo with A-Frame 
A-Frame is a web framework for building 3D and VR experiences. 
Under the hood, it is a Three.js framework with a declarative entity-component pattern, meaning we can build scenes with just HTML. 
See the Building up a basic demo with A-Frame subpage for the step-by-step process of creating the demo. 
Building up a basic demo with Babylon.js 
Babylon.js is one of the most popular 3D game engines used by developers. 
As with any other 3D library, it provides built-in functions to help you implement common 3D functionality more quickly. 
See the Building up a basic demo with Babylon.js subpage for the basics of using Babylon.js, including setting up a development environment, structuring the necessary HTML, and writing the JavaScript code. 
Building up a basic demo with PlayCanvas 
PlayCanvas is a popular 3D WebGL game engine open-sourced on GitHub, with an editor available online and good documentation. 
See the Building up a basic demo with PlayCanvas subpage for higher-level details, and further articles showing how to create demos using the PlayCanvas library, and the online editor. 
Building up a basic demo with Three.js 
Three.js, like any other library, gives you a huge advantage: instead of writing hundreds of lines of WebGL code to build anything interesting you can use built-in helper functions to do it a lot easier and faster. 
See the Building up a basic demo with Three.js subpage for the step-by-step process of creating the demo. 
Other tools 
Both Unity and Unreal can export your game to WebGL with asm.js, so you’re free to use their tools and techniques to build games that will be exported to the web. 
Illustration of three 3D geometry shapes: a grey torus, a blue cube, and a yellow cylinder. 
Where to go next 
With this article we just scratched the surface of what’s possible with currently available technologies. 
You can build immersive, beautiful and fast 3D games on the Web using WebGL, and the libraries and frameworks build on top of it. 
Source code 
You can find all the source code for this series demos on GitHub. 
APIs 
Canvas API 
WebGL API 
WebVR API 
Frameworks 
Three.js 
PlayCanvas 
Babylon.js 
A-Frame 
Tutorials 
Building up a basic demo with Three.js 
Building up a basic demo with PlayCanvas 
Building up a basic demo with Babylon.js 
Building up a basic demo with A-Frame 

{{GamesSidebar}} 
Every medium or large game should compile asm.js code as part of an async script to give the browser the maximum flexibility to optimize the compilation process. 
In Gecko, async compilation allows the JavaScript engine to compile the asm.js off the main thread when the game is loading and cache the generated machine code so that the game doesn’t need to be compiled on subsequent loads (starting in Firefox 28). 
To see the difference, toggle javascript.options.parallel_parsing in about:config. 
Putting async into action 
Getting async compilation is easy: when writing your JavaScript, just use the async attribute like so: 
<script async src="file.js"></script> 
or, to do the same thing via script: 
const script = document.createElement("script"); 
script.src = "file.js"; 
document.body.appendChild(script); 
(Scripts created from script default to async.) 
The default HTML shell Emscripten generates produces the latter. 
When is async not async? 
Two common situations in which a script is *not* async (as defined by the HTML spec) are: 
<script async> code(); </script> 
and 
const script = document.createElement("script"); 
script.textContent = "code()"; 
document.body.appendChild(script); 
Both are counted as ‘inline’ scripts and get compiled and then run immediately. 
What if your code is in a JS string? 
Instead of using eval or innerHTML, both of which trigger synchronous compilation, you should use a Blob with an object URL: 
const blob = new Blob([codeString]); 
const script = document.createElement("script"); 
const url = URL.createObjectURL(blob); 
script.onload = script.onerror = () => URL.revokeObjectURL(url); 
script.src = url; 
document.body.appendChild(script); 
The setting of src rather than innerHTML is what makes this script async. 

{{GamesSidebar}} 
One of HTML5’s main advantages as a game development platform is the ability to run on various platforms and devices. 
Streamlining cross device differences creates multiple challenges, not least when providing appropriate controls for different contexts. 
In this series of articles we will show you how you can approach building a game that can be played using touchscreen smartphones, mouse and keyboard, and also less common mechanisms such as gamepads. 
Case study 
We’ll be using the Captain Rogers: Battle at Andromeda demo as an example. 
Captain Rogers: Battle at Andromeda - cover of the game containing Enclave Games and Blackmoon Design logos, Roger’s space ship and title of the game. 
Captain Rogers was created using the Phaser framework, the most popular tool for simple 2D game development in JavaScript right now, but it should be fairly easy to reuse the knowledge contained within these articles when building games in pure JavaScript or any other framework. 
If you’re looking for a good introduction to Phaser, then check the 2D breakout game using Phaser tutorial. 
In the following articles we will show how to implement various different control mechanisms for Captain Rogers to support different platforms — from touch on mobile, through keyboard/mouse/gamepad on desktop, to more unconventional ones like TV remote, shouting to or waving your hand in front of the laptop, or squeezing bananas. 
Setting up the environment 
Let’s start with a quick overview of the game’s folder structure, JavaScript files and in-game states, so we know what’s happening where. 
The game’s folders look like this: 
Captain Rogers: Battle at Andromeda - folder structure of the games’ project containing JavaScript sources, images and fonts. 
As you can see there are folders for images, JavaScript files, fonts and sound effects. 
The src folder contains the JavaScript files split as a separate states — Boot.js, Preloader.js, MainMenu.js and Game.js — these are loaded into the index file in this exact order. 
The first one initializes Phaser, the second preloads all the assets, the third one controls the main menu welcoming the player, and the fourth controls the actual gameplay. 
Every state has its own default methods: preload(), create(), and update(). 
The first one is needed for preloading required assets, create() is executed once the state had started, and update() is executed on every frame. 
For example, you can define a button in the create() function: 
create() { 
// … 
const buttonEnclave = this.add.button(10, 10, 'logo-enclave', this.clickEnclave, this); 
// … 
} 
It will be created once at the start of the game, and will execute this.clickEnclave() action assigned to it when clicked, but you can also use the mouse’s pointer value in the update() function to make an action: 
update() { 
// … 
if (this.game.input.mousePointer.isDown) { 
// do something 
} 
// … 
} 
This will be executed whenever the mouse button is pressed, and it will be checked against the input’s isDown boolean variable on every frame of the game. 
That should give you some understanding of the project structure. 
We’ll be playing mostly with the MainMenu.js and Game.js files, and we’ll explain the code inside the create() and update() methods in much more detail in later articles. 
Pure JavaScript demo 
There’s also a small online demo with full source code available on GitHub where the basic support for the control mechanisms described in the articles is implemented in pure JavaScript. 
It will be explained in the given articles themselves below, but you can play with it already, and use the code however you want for learning purposes. 
The articles 
JavaScript is the perfect choice for mobile gaming because of HTML being truly multiplatform; all of the following articles focus on the APIs provided for interfacing with different control mechanisms: 
Mobile touch controls — The first article will kick off with touch, as the mobile first approach is very popular. 
Desktop mouse and keyboard controls — When playing on a desktop/laptop computer, providing keyboard and mouse controls is essential to provide an acceptable level of accessibility for the game. 
Desktop gamepad controls — The Gamepad API rather usefully allows gamepads to be used for controlling web apps on desktop/laptop, for that console feel. 
Unconventional controls — The final article showcases some unconventional control mechanisms, from the experimental to the slightly crazy, which you might not believe could be used to play the game. 

{{GamesSidebar}} 
{{NextMenu(“Games/Techniques/Control_mechanisms/Desktop_with_mouse_and_keyboard”, “Games/Techniques/Control_mechanisms”)}} 
The future of mobile gaming is definitely web, and many developers choose the mobile first approach in their game development process — in the modern world, this generally also involves implementing touch controls. 
In this tutorial, we will see how easy it is to implement mobile controls in an HTML game, and enjoy playing on a mobile touch-enabled device. 
Note: The game Captain Rogers: Battle at Andromeda is built with Phaser and managing the controls is Phaser-based, but it could also be done in pure JavaScript. 
The good thing about using Phaser is that it offers helper variables and functions for easier and faster development, but it’s entirely up to you which approach you to choose. 
Pure JavaScript approach 
We could implement touch events on our own — setting up event listeners and assigning relevant functions to them would be quite straightforward: 
const el = document.querySelector("canvas"); 
el.addEventListener("touchstart", handleStart); 
el.addEventListener("touchmove", handleMove); 
el.addEventListener("touchend", handleEnd); 
el.addEventListener("touchcancel", handleCancel); 
This way, touching the game’s {{htmlelement(“canvas”)}} on the mobile screen would emit events, and thus we could manipulate the game in any way we want (for example, moving the spaceship around). 
The events are as follows: 
touchstart is fired when the user puts a finger on the screen. 
touchmove is fired when they move the finger on the screen while touching it 
touchend is fired when the user stops touching the screen 
touchcancel is fired when a touch is cancelled, for example when the user moves their finger out of the screen. 
Note: The touch events reference article provides more examples and information. 
Pure JavaScript demo 
Let’s implement the mobile support in a little demo available on GitHub, so we can move the player’s ship by touching the screen on a mobile device. 
We will use two events: touchstart and touchmove, both handled by one function. 
Why? 
The function touchHandler will assign proper variables to the ship’s position so that we can use it for both cases: when the player touches the screen but doesn’t move it (touchstart), and when the finger is moved on the screen (touchmove): 
document.addEventListener("touchstart", touchHandler); 
document.addEventListener("touchmove", touchHandler); 
The touchHandler function looks like this: 
function touchHandler(e) { 
if (e.touches) { 
playerX = e.touches[0].pageX - canvas.offsetLeft - playerWidth / 2; 
playerY = e.touches[0].pageY - canvas.offsetTop - playerHeight / 2; 
output.textContent = `Touch: x: ${playerX}, y: ${playerY}`; 
e.preventDefault(); 
} 
} 
If the touch occurs (touches object is not empty), then we will have all the info we need in that object. 
We can get the first touch (e.touches[0], our example is not multitouch-enabled), extract the pageX and pageY variables and set the player’s ship position on the screen by subtracting the Canvas offset (distance from the Canvas and the edge of the screen) and half the player’s width and height. 
Touch controls for the player’s ship, with visible output of the x and y position. 
To see if it’s working correctly we can output the x and y positions using the output element. 
The preventDefault() function is needed to prevent the browser from moving — without it, you’d have the default behavior, and the Canvas would be dragged around the page, which would show the browser scroll bars and look messy. 
Touch events in Phaser 
We don’t have to do this on our own; frameworks like Phaser offer systems for managing touch events for us — see managing the touch events. 
Pointer theory 
A pointer represents a single finger on the touch screen. 
Phaser starts two pointers by default, so two fingers can perform an action at once. 
Captain Rogers is a simple game — it can be controlled by two fingers, the left one moving the ship and the right one controlling the ship’s gun. 
There’s no multitouch or gestures — everything is handled by single pointer inputs. 
You can add more pointers to the game by using; this.game.input.addPointer up to ten pointers can be managed simultaneously. 
The most recently used pointer is available in the this.game.input.activePointer object — the most recent finger active on the screen. 
If you need to access a specific pointer, they are all available at, this.game.input.pointer1, this.game.input.pointer2, etc. 
They are assigned dynamically, so if you put three fingers on the screen, then, pointer1, pointer2, and pointer3 will be active. 
Removing the second finger, for example, won’t affect the other two, and setting it back again will use the first available property, so pointer2 will be used again. 
You can quickly get the coordinates of the most recently active pointer via the this.game.input.x and this.game.input.y variables. 
Input events 
Instead of using the pointers directly it is also possible to listen for this.game.input events, like onDown, onUp, onTap and onHold: 
this.game.input.onDown.add(itemTouched, this); 
function itemTouched(pointer) { 
// Do something 
} 
The itemTouched() function will be executed when the onDown event is dispatched by touching the screen. 
The pointer variable will contain the information about the pointer that activated the event. 
This approach uses the generally available this.game.input object, but you can also detect the actions on any game objects like sprites or buttons by using onInputOver, onInputOut, onInputDown, onInputUp, onDragStart, or onDragStop: 
this.button.events.onInputOver.add(itemTouched, this); 
function itemTouched(button, pointer) { 
// Do something 
} 
That way you’ll be able to attach an event to any object in the game, like the player’s ship, and react to the actions performed by the user. 
An additional advantage of using Phaser is that the buttons you create will take any type of input, whether it’s a touch on mobile or a click on desktop — the framework sorts this out in the background for you. 
Implementation 
The easiest way to add an interactive object that will listen for user input is to create a button: 
const buttonEnclave = this.add.button( 
10, 
10, 
"logo-enclave", 
this.clickEnclave, 
this, 
); 
This one is formed in the MainMenu state — it will be placed ten pixels from the top left corner of the screen, use the logo-enclave image, and execute the clickEnclave() function when it is touched. 
This will work on mobile and desktop out of the box. 
There are a few buttons in the main menu, including the one that will start the game. 
For the actual gameplay, instead of creating more buttons and covering the small mobile screen with them, we can use something a little different: we’ll create invisible areas which respond to the given action. 
From a design point of view, it is better to make the field of activity bigger without covering half of the screen with button images. 
For example, tapping on the right side of the screen will fire the weapon: 
this.buttonShoot = this.add.button( 
this.world.width * 0.5, 
0, 
"button-alpha", 
null, 
this, 
); 
this.buttonShoot.onInputDown.add(this.goShootPressed, this); 
this.buttonShoot.onInputUp.add(this.goShootReleased, this); 
The code above will create a new button using a transparent image that covers the right half of the screen. 
You can assign functions on input down and input up separately if you’d like to perform more complicated actions, but in this game touching the right side of the screen will fire the bullets to the right — this is all we need in this case. 
Moving the player could be managed by creating the four directional buttons, but we can take the advantage of touch screens and drag the player’s ship around: 
const player = this.game.add.sprite(30, 30, "ship"); 
player.inputEnabled = true; 
player.input.enableDrag(); 
player.events.onDragStart.add(onDragStart, this); 
player.events.onDragStop.add(onDragStop, this); 
function onDragStart(sprite, pointer) { 
// Do something when dragging 
} 
We can pull the ship around and do something in the meantime, and react when the drag is stopped. 
Hauling in Phaser, if enabled, will work out of the box — you don’t have to set the position of the sprite yourself manually, so you could leave the onDragStart() function empty, or place some debug output to see if it’s working correctly. 
The pointer element contains the x and y variables storing the current position of the dragged element. 
Dedicated plugins 
You could go even further and use dedicated plugins like Virtual Joystick — this is a paid, official Phaser plugin, but you can find free and open source alternatives. 
The initialization of Virtual Joystick looks like this: 
this.pad = this.game.plugins.add(Phaser.VirtualJoystick); 
this.stick = this.pad.addStick(30, 30, 80, "generic"); 
In the create() function of the Game state we’re creating a virtual pad and a generic stick that has four directional virtual buttons by default. 
This is placed 30 pixels from the top and left edges of the screen and is 80 pixels wide. 
The stick being pressed can be handled during the gameplay in the update function like so: 
if (this.stick.isDown) { 
// Move the player 
} 
We can adjust the player’s velocity based on the current angle of the stick and move him appropriately. 
Summary 
That covers adding touch controls for mobile; in the next article we’ll see how to add keyboard and mouse support. 
{{NextMenu(“Games/Techniques/Control_mechanisms/Desktop_with_mouse_and_keyboard”, “Games/Techniques/Control_mechanisms”)}} 


{{GamesSidebar}} 
This page lists essential core techniques for anyone wanting to develop games using open web technologies. 
Using async scripts for asm.js 
: Especially when creating medium to large-sized games, async scripts are an essential technique to take advantage of, so that your game’s JavaScript can be compiled off the main thread and be cached for future game running, resulting in a significant performance improvement for your users. 
This article explains how. 
Optimizing startup performance 
: How to make sure your game starts up quickly, smoothly, and without appearing to lock up the user’s browser or device. 
Using WebRTC peer-to-peer data channels 
: In addition to providing support for audio and video communication, WebRTC lets you set up peer-to-peer data channels to exchange text or binary data actively between your players. 
This article explains what this can do for you, and shows how to use libraries that make this easy. 
Audio for Web Games 
: Audio is an important part of any game — it adds feedback and atmosphere. 
Web-based audio is maturing fast, but there are still many browser differences to negotiate. 
This article provides a detailed guide to implementing audio for web games, looking at what works currently across as wide a range of platforms as possible. 
2D collision detection 
: A concise introduction to collision detection in 2D games. 
Tilemaps 
: Tiles are a very popular technique in 2D games for building the game world. 
These articles provide an introduction to tilemaps and how to implement them with the Canvas API. 

{{GamesSidebar}} 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/Extra_lives”, “Games/Workflows/2D_Breakout_game_Phaser/Buttons”)}} 
This is the 14th step out of 16 of the Gamedev Phaser tutorial. 
You can find the source code as it should look after completing this lesson at Gamedev-Phaser-Content-Kit/demos/lesson14.html. 
To make the game look more juicy and alive we can use animations and tweens. 
This will result in a better, more entertaining experience. 
Let’s explore how to implement Phaser animations and tweens in our game. 
Animations 
In Phaser, animations, involve taking a spritesheet from an external source and displaying the sprites sequentially. 
As an example, we will make the ball wobble when it hits something. 
First of all, grab the spritesheet from GitHub and save it in your /img directory. 
Next, we will load the spritesheet — put the following line at the bottom of your preload() function: 
game.load.spritesheet("ball", "img/wobble.png", 20, 20); 
Instead of loading a single image of the ball we can load the whole spritesheet — a collection of different images. 
We will show the sprites sequentially to create the illusion of animation. 
The spritesheet() method’s two extra parameters determine the width and height of each single frame in the given spritesheet file, indicating to the program how to chop it up to get the individual frames. 
Loading the animation 
Next up, go into your create() function, find the line that loads the ball sprite, and below it put the call to animations.add() seen below: 
ball = game.add.sprite(50, 250, "ball"); 
ball.animations.add("wobble", [0, 1, 0, 2, 0, 1, 0, 2, 0], 24); 
To add an animation to the object we use the animations.add() method, which contains the following parameters 
The name we chose for the animation 
An array defining the order in which to display the frames during the animation. 
If you look again at the wobble.png image, you’ll see there are three frames. 
Phaser extracts these and stores references to them in an array — positions 0, 1, and 2. 
The above array says that we are displaying frame 0, then 1, then 0, etc. 
The frame rate, in fps. 
Since we are running the animation at 24fps and there are 9 frames, the animation will display just under three times per second. 
Applying the animation when the ball hits the paddle 
In the arcade.collide() method call that handles the collision between the ball and the paddle (the first line inside update(), see below) we can add an extra parameter that specifies a function to be executed every time the collision happens, in the same fashion as the ballHitBrick() function. 
Update the first line inside update() as shown below: 
function update() { 
game.physics.arcade.collide(ball, paddle, ballHitPaddle); 
game.physics.arcade.collide(ball, bricks, ballHitBrick); 
paddle.x = game.input.x || game.world.width * 0.5; 
} 
Then we can create the ballHitPaddle() function (having ball and paddle as default parameters), playing the wobble animation when it is called. 
Add the following function just before your closing </script> tag: 
function ballHitPaddle(ball, paddle) { 
ball.animations.play("wobble"); 
} 
The animation is played every time the ball hits the paddle. 
You can add the animations.play() call inside the ballHitBrick() function too, if you feel it would make the game look better. 
Tweens 
Whereas animations play external sprites sequentially, tweens smoothly animate properties of an object in the gameworld, such as width or opacity. 
Let’s add a tween to our game to make the bricks smoothly disappear when they are hit by the ball. 
Go to your ballHitBrick() function, find your brick.kill(); line, and replace it with the following: 
const killTween = game.add.tween(brick.scale); 
killTween.to({ x: 0, y: 0 }, 200, Phaser.Easing.Linear.None); 
killTween.onComplete.addOnce(() => { 
brick.kill(); 
}, this); 
killTween.start(); 
Let’s walk through this so you can see what’s happening here: 
When defining a new tween you have to specify which property will be tweened — in our case, instead of hiding the bricks instantly when hit by the ball, we will make their width and height scale to zero, so they will nicely disappear. 
To the end, we use the add.tween() method, specifying brick.scale as the argument as this is what we want to tween. 
The to() method defines the state of the object at the end of the tween. 
It takes an object containing the chosen parameter’s desired ending values (scale takes a scale value, 1 being 100% of size, 0 being 0% of size, etc.), the time of the tween in milliseconds and the type of easing to use for the tween. 
We will also add the optional onComplete event handler, which defines a function to be executed when the tween finishes. 
The last thing do to is to start the tween right away using start(). 
That’s the expanded version of the tween definition, but we can also use the shorthand syntax: 
game.add 
.tween(brick.scale) 
.to({ x: 2, y: 2 }, 500, Phaser.Easing.Elastic.Out, true, 100); 
This tween will double the brick’s scale in half a second using Elastic easing, will start automatically, and have a delay of 100 milliseconds. 
Compare your code 
You can check the finished code for this lesson in the live demo below, and play with it to understand better how it works: 
{{JSFiddleEmbed(“https://jsfiddle.net/end3r/9o4pakrb/”,““,”400”)}} 
Next steps 
Animations and tweens look very nice, but we can add even more to our game — in the next section we’ll look at handling button inputs. 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/Extra_lives”, “Games/Workflows/2D_Breakout_game_Phaser/Buttons”)}} 

{{GamesSidebar}} 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/Physics”, “Games/Workflows/2D_Breakout_game_Phaser/Player_paddle_and_controls”)}} 
This is the 6th step out of 16 of the Gamedev Phaser tutorial. 
You can find the source code as it should look after completing this lesson at Gamedev-Phaser-Content-Kit/demos/lesson06.html. 
Now that physics have been introduced, we can start implementing collision detection into the game — first we’ll look at the walls. 
Bouncing off the world boundaries 
The easiest way to get our ball bouncing off the walls is to tell the framework that we want to treat the boundaries of the {{htmlelement(“canvas”)}} element as walls and not let the ball move past them. 
In Phaser this can be easily accomplished using the collideWorldsBound property. 
Add this line right after the existing game.physics.enable() method call: 
ball.body.collideWorldBounds = true; 
Now the ball will stop at the edge of the screen instead of disappearing, but it doesn’t bounce. 
To make this occur we have to set its bounciness. 
Add the following line below the previous one: 
ball.body.bounce.set(1); 
Try reloading index.html again — now you should see the ball bouncing off all the walls and moving inside the canvas area. 
Compare your code 
You can check the finished code for this lesson in the live demo below, and play with it to understand better how it works: 
{{JSFiddleEmbed(“https://jsfiddle.net/end3r/dcw36opz/”,““,”400”)}} 
Next steps 
This is starting to look more like a game now, but we can’t control it in any way — it’s high time we introduced the player paddle and controls. 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/Physics”, “Games/Workflows/2D_Breakout_game_Phaser/Player_paddle_and_controls”)}} 

{{GamesSidebar}} 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/Game_over”, “Games/Workflows/2D_Breakout_game_Phaser/Collision_detection”)}} 
This is the 9th step out of 16 of the Gamedev Phaser tutorial. 
You can find the source code as it should look after completing this lesson at Gamedev-Phaser-Content-Kit/demos/lesson09.html. 
Building the brick field is a little bit more complicated than adding a single object to the screen, although It’s still easier with Phaser than in pure JavaScript. 
Let’s explore how to create a group of bricks and print them on screen using a loop. 
Defining new variables 
First, let’s define the needed variables — add the following below your previous variable definitions: 
let bricks; 
let newBrick; 
let brickInfo; 
The bricks variable will be used to create a group, newBrick will be a new object added to the group on every iteration of the loop, and brickInfo will store all the data we need. 
Rendering the brick image 
Next, let’s load the image of the brick — add the following load.image() call just below the others: 
function preload() { 
// … 
game.load.image("brick", "img/brick.png"); 
} 
You also need to grab the brick image from GitHub and save it in your /img directory. 
Drawing the bricks 
We will place all the code for drawing the bricks inside an initBricks function to keep it separated from the rest of the code. 
Add a call to initBricks at the end of the create() function: 
function create() { 
// … 
initBricks(); 
} 
Now onto the function itself. 
Add the initBricks() function at the end of our games code, just before the closing </script> tag, as shown below. 
To begin with we’ve included the brickInfo object, as this will come in handy very soon: 
function initBricks() { 
brickInfo = { 
width: 50, 
height: 20, 
count: { 
row: 3, 
}, 
offset: { 
top: 50, 
left: 60, 
}, 
padding: 10, 
}; 
} 
This brickInfo object will hold all the information we need: the width and height of a single brick, the number of rows and columns of bricks we will see on screen, the top and left offset (the location on the canvas where we shall start to draw the bricks) and the padding between each row and column of bricks. 
Now, let’s start creating the bricks themselves — add an empty group first to contain the bricks, by adding the following line at the bottom of the initBricks() function: 
bricks = game.add.group(); 
We can loop through the rows and columns to create new brick on each iteration — add the following nested loop below the previous line of code: 
for (let c = 0; c < brickInfo.count.col; c++) { 
for (let r = 0; r < brickInfo.count.row; r++) { 
// create new brick and add it to the group 
} 
} 
This way we will create the exact number of bricks we need and have them all contained in a group. 
Now we need to add some code inside the nested loop structure to draw each brick. 
Fill in the contents as shown below: 
for (let c = 0; c < brickInfo.count.col; c++) { 
for (let r = 0; r < brickInfo.count.row; r++) { 
let brickX = 0; 
let brickY = 0; 
newBrick = game.add.sprite(brickX, brickY, "brick"); 
game.physics.enable(newBrick, Phaser.Physics.ARCADE); 
newBrick.body.immovable = true; 
newBrick.anchor.set(0.5); 
bricks.add(newBrick); 
} 
} 
Here we’re looping through the rows and columns to create the new bricks and place them on the screen. 
The newly created brick is enabled for the Arcade physics engine, it’s body is set to be immovable (so it won’t move when hit by the ball), and we’re also setting the anchor to be in the middle and adding the brick to the group. 
The problem currently is that we’re painting all the bricks in one place, at coordinates (0,0). 
What we need to do is draw each brick at its own x and y position. 
Update the brickX and brickY lines as follows: 
const brickX = c * (brickInfo.width + brickInfo.padding) + brickInfo.offset.left; 
const brickY = r * (brickInfo.height + brickInfo.padding) + brickInfo.offset.top; 
Each brickX position is worked out as brickInfo.width plus brickInfo.padding, multiplied by the column number, c, plus the brickInfo.offset.left; the logic for the brickY is identical except that it uses the values for row number, r, brickInfo.height, and brickInfo.offset.top. 
Now every single brick can be placed in its correct place, with padding between each brick, and drawn at an offset from the left and top Canvas edges. 
Checking the initBricks() code 
Here is the complete code for the initBricks() function: 
function initBricks() { 
brickInfo = { 
width: 50, 
height: 20, 
count: { 
row: 3, 
}, 
offset: { 
top: 50, 
left: 60, 
}, 
padding: 10, 
}; 
bricks = game.add.group(); 
for (let c = 0; c < brickInfo.count.col; c++) { 
for (let r = 0; r < brickInfo.count.row; r++) { 
const brickX = 
c * (brickInfo.width + brickInfo.padding) + brickInfo.offset.left; 
const brickY = 
r * (brickInfo.height + brickInfo.padding) + brickInfo.offset.top; 
newBrick = game.add.sprite(brickX, brickY, "brick"); 
game.physics.enable(newBrick, Phaser.Physics.ARCADE); 
newBrick.body.immovable = true; 
newBrick.anchor.set(0.5); 
bricks.add(newBrick); 
} 
} 
} 
If you reload index.html at this point, you should see the bricks printed on screen, at an even distance from one another. 
Compare your code 
You can check the finished code for this lesson in the live demo below, and play with it to understand better how it works: 
{{JSFiddleEmbed(“https://jsfiddle.net/end3r/cck2b9e8/”,““,”400”)}} 
Next steps 
Something is missing though. The ball goes through the bricks without stopping — we need proper collision detection. 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/Game_over”, “Games/Workflows/2D_Breakout_game_Phaser/Collision_detection”)}} 

{{GamesSidebar}} 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/Animations_and_tweens”, “Games/Workflows/2D_Breakout_game_Phaser/Randomizing_gameplay”)}} 
This is the 15th step out of 16 of the Gamedev Phaser tutorial. 
You can find the source code as it should look after completing this lesson at Gamedev-Phaser-Content-Kit/demos/lesson15.html. 
Instead of starting the game right away we can leave that decision to the player by adding a Start button they can press. 
Let’s investigate how to do that. 
New variables 
We will need a variable to store a boolean value representing whether the game is currently being played or not, and another one to represent our button. 
Add these lines below your other variable definitions: 
let playing = false; 
let startButton; 
Loading the button spritesheet 
We can load the button spritesheet the same way we loaded the ball’s wobble animation. 
Add the following to the bottom of the preload() function: 
game.load.spritesheet("button", "img/button.png", 120, 40); 
A single button frame is 120 pixels wide and 40 pixels high. 
You also need to grab the button spritesheet from GitHub, and save it in your /img directory. 
Adding the button to the game 
Adding the new button to the game is done by using the add.button method. 
Add the following lines to the bottom of your create() function: 
startButton = game.add.button( 
game.world.width * 0.5, 
game.world.height * 0.5, 
"button", 
startGame, 
this, 
1, 
0, 
2, 
); 
startButton.anchor.set(0.5); 
The button() method’s parameters are as follows: 
The button’s x and y coordinates 
The name of the graphic asset to be displayed for the button 
A callback function that will be executed when the button is pressed 
A reference to this to specify the execution context 
The frames that will be used for the over, out and down events. 
Note: The over event is the same as hover, out is when the pointer moves out of the button and down is when the button is pressed. 
Now we need to define the startGame() function referenced in the code above: 
function startGame() { 
startButton.destroy(); 
ball.body.velocity.set(150, -150); 
playing = true; 
} 
When the button is pressed, we remove the button, sets the ball’s initial velocity and set the playing variable to true. 
Finally for this section, go back into your create() function, find the ball.body.velocity.set(150, -150); line, and remove it. 
You only want the ball to move when the button is pressed, not before! 
Keeping the paddle still before the game starts 
It works as expected, but we can still move the paddle when the game hasn’t started yet, which looks a bit silly. 
To stop this, we can take advantage of the playing variable and make the paddle movable only when the game has started. 
To do that, adjust the update() function like so: 
function update() { 
game.physics.arcade.collide(ball, paddle, ballHitPaddle); 
game.physics.arcade.collide(ball, bricks, ballHitBrick); 
if (playing) { 
paddle.x = game.input.x || game.world.width * 0.5; 
} 
} 
That way the paddle is immovable after everything is loaded and prepared, but before the start of the actual game. 
Compare your code 
You can check the finished code for this lesson in the live demo below, and play with it to understand better how it works: 
{{JSFiddleEmbed(“https://jsfiddle.net/end3r/1rpj71k4/”,““,”400”)}} 
Next steps 
The last thing we will do in this article series is make the gameplay even more interesting by adding some randomization to the way the ball bounces off the paddle. 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/Animations_and_tweens”, “Games/Workflows/2D_Breakout_game_Phaser/Randomizing_gameplay”)}} 

{{GamesSidebar}} 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/Build_the_brick_field”, “Games/Workflows/2D_Breakout_game_Phaser/The_score”)}} 
This is the 10th step out of 16 of the Gamedev Phaser tutorial. 
You can find the source code as it should look after completing this lesson at Gamedev-Phaser-Content-Kit/demos/lesson10.html. 
Now onto the next challenge — the collision detection between the ball and the bricks. 
Luckily enough we can use the physics engine to check collisions not only between single objects (like the ball and the paddle), but also between an object and the group. 
Brick/Ball collision detection 
The physics engine makes everything a lot easier — we just need to add two simple pieces of code. 
First, add a new line inside your update() function that checks for collision detection between ball and bricks, as shown below: 
function update() { 
game.physics.arcade.collide(ball, paddle); 
game.physics.arcade.collide(ball, bricks, ballHitBrick); 
paddle.x = game.input.x || game.world.width * 0.5; 
} 
The ball’s position is calculated against the positions of all the bricks in the group. 
The third, optional parameter is the function executed when a collision occurs — ballHitBrick(). 
Create this new function as the bottom of your code, just before the closing </script> tag, as follows: 
function ballHitBrick(ball, brick) { 
brick.kill(); 
} 
And that’s it! 
Reload your code and you should see the new collision detection working just as required. 
Thanks to Phaser there are two parameters passed to the function — the first one is the ball, which we explicitly defined in the collide method, and the second one is the single brick from the bricks group that the ball is colliding with. 
Inside the function we remove the brick in question from the screen by running the kill() method on it. 
You would expect to have to write a lot more calculations of your own to implement collision detection when using pure JavaScript. 
That’s the beauty of using the framework — you can leave a lot of boring code to Phaser, and focus on the most fun and interesting parts of making a game. 
Compare your code 
You can check the finished code for this lesson in the live demo below, and play with it to understand better how it works: 
{{JSFiddleEmbed(“https://jsfiddle.net/end3r/wwneakwf/”,““,”400”)}} 
Next steps 
We can hit the bricks and remove them, which is a nice addition to the gameplay already. 
It would be even better to count the destroyed bricks increment the score as a result. 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/Build_the_brick_field”, “Games/Workflows/2D_Breakout_game_Phaser/The_score”)}} 

{{GamesSidebar}} 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/Win_the_game”, “Games/Workflows/2D_Breakout_game_Phaser/Animations_and_tweens”)}} 
This is the 13th step out of 16 of the Gamedev Phaser tutorial. 
You can find the source code as it should look after completing this lesson at Gamedev-Phaser-Content-Kit/demos/lesson13.html. 
We can make the game enjoyable for longer by adding lives. 
In this article we’ll implement a lives system, so that the player can continue playing until they have lost three lives, not just one. 
New variables 
Add the following new variables below the existing ones in your code: 
let lives = 3; 
let livesText; 
let lifeLostText; 
These respectively will store the number of lives, the text label that displays the number of lives that remain, and a text label that will be shown on screen when the player loses one of their lives. 
Defining the new text labels 
Defining the texts look like something we already did in the score lesson. 
Add the following lines below the existing scoreText definition inside your create() function: 
livesText = game.add.text(game.world.width - 5, 5, `Lives: ${lives}`, { 
font: "18px Arial", 
fill: "#0095DD", 
}); 
livesText.anchor.set(1, 0); 
lifeLostText = game.add.text( 
game.world.width * 0.5, 
game.world.height * 0.5, 
"Life lost, click to continue", 
{ font: "18px Arial", fill: "#0095DD" }, 
); 
lifeLostText.anchor.set(0.5); 
lifeLostText.visible = false; 
The livesText and lifeLostText objects look very similar to the scoreText one — they define a position on the screen, the actual text to display, and the font styling. 
The former is anchored on its top right edge to align properly with the screen, and the latter is centered, both using anchor.set(). 
The lifeLostText will be shown only when the life is lost, so its visibility is initially set to false. 
Making our text styling DRY 
As you probably noticed we’re using the same styling for all three texts: scoreText, livesText and lifeLostText. 
If we ever want to change the font size or color we will have to do it in multiple places. 
To make it easier for us to maintain in the future we can create a separate variable that will hold our styling, let’s call it textStyle and place it before the text definitions: 
textStyle = { font: "18px Arial", fill: "#0095DD" }; 
We can now use this variable when styling our text labels — update your code so that the multiple instances of the text styling are replaced with the variable: 
scoreText = game.add.text(5, 5, "Points: 0", textStyle); 
livesText = game.add.text( 
game.world.width - 5, 
5, 
`Lives: ${lives}`, 
textStyle, 
); 
livesText.anchor.set(1, 0); 
lifeLostText = game.add.text( 
game.world.width * 0.5, 
game.world.height * 0.5, 
"Life lost, click to continue", 
textStyle, 
); 
lifeLostText.anchor.set(0.5); 
lifeLostText.visible = false; 
This way changing the font in one variable will apply the changes to every place it is used. 
The lives handling code 
To implement lives in our game, let’s first change the ball’s function bound to the onOutOfBounds event. 
Instead of executing an anonymous function and showing the alert right away: 
ball.events.onOutOfBounds.add(() => { 
alert("Game over!" 
); 
location.reload(); 
}, this); 
We will assign a new function called ballLeaveScreen; delete the previous event handler (shown above) and replace it with the following line: 
ball.events.onOutOfBounds.add(ballLeaveScreen, this); 
We want to decrease the number of lives every time the ball leaves the canvas. 
Add the ballLeaveScreen() function definition at the end of our code: 
function ballLeaveScreen() { 
lives--; 
if (lives) { 
livesText.setText(`Lives: ${lives}`); 
lifeLostText.visible = true; 
ball.reset(game.world.width * 0.5, game.world.height - 25); 
paddle.reset(game.world.width * 0.5, game.world.height - 5); 
game.input.onDown.addOnce(() => { 
lifeLostText.visible = false; 
ball.body.velocity.set(150, -150); 
}, this); 
} else { 
alert("You lost, game over!" 
); 
location.reload(); 
} 
} 
Instead of instantly printing out the alert when you lose a life, we first subtract one life from the current number and check if it’s a non-zero value. 
If yes, then the player still has some lives left and can continue to play — they will see the life lost message, the ball and paddle positions will be reset on screen and on the next input (click or touch) the message will be hidden and the ball will start to move again. 
When the number of available lives reaches zero, the game is over and the game over alert message will be shown. 
Events 
You have probably noticed the add() and addOnce() method calls in the above two code blocks and wondered how they differ. 
The difference is that the add() method binds the given function and causes it to be executed every time the event occurs, while addOnce() is useful when you want to have the bound function executed only once and then unbound so it is not executed again. 
In our case, on every outOfBounds event the ballLeaveScreen will be executed, but when the ball leaves the screen we only want to remove the message from the screen once. 
Compare your code 
You can check the finished code for this lesson in the live demo below, and play with it to understand better how it works: 
{{JSFiddleEmbed(“https://jsfiddle.net/end3r/yk1c5n0b/”,““,”400”)}} 
Next steps 
Lives made the game more forgiving — if you lose one life, you still have two more left and can continue to play. 
Now let’s expand the look and feel of the game by adding animations and tweens. 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/Win_the_game”, “Games/Workflows/2D_Breakout_game_Phaser/Animations_and_tweens”)}} 

{{GamesSidebar}} 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/Player_paddle_and_controls”, “Games/Workflows/2D_Breakout_game_Phaser/Build_the_brick_field”)}} 
This is the 8th step out of 16 of the Gamedev Phaser tutorial. 
You can find the source code as it should look after completing this lesson at Gamedev-Phaser-Content-Kit/demos/lesson08.html. 
To make the game more interesting we can introduce the ability to lose — if you don’t hit the ball before it reaches the bottom edge of the screen it will be game over. 
How to lose 
To provide the ability to lose, we will disable the ball’s collision with the bottom edge of the screen. 
Add the code below inside the create() function; just after you define the ball’s attributes is fine: 
game.physics.arcade.checkCollision.down = false; 
This will make the three walls (top, left and right) bounce the ball back, but the fourth (bottom) will disappear, letting the ball fall off the screen if the paddle misses it. 
We need a way to detect this and act accordingly. 
Add the following lines just below the previous new one: 
ball.checkWorldBounds = true; 
ball.events.onOutOfBounds.add(() => { 
alert("Game over!" 
); 
location.reload(); 
}, this); 
Adding those lines will make the ball check the world (in our case canvas) bounds and execute the function bound to the onOutOfBounds event. 
When you click on the resulting alert, the page will be reloaded so you can play again. 
Compare your code 
You can check the finished code for this lesson in the live demo below, and play with it to understand better how it works: 
{{JSFiddleEmbed(“https://jsfiddle.net/end3r/436bckb7/”,““,”400”)}} 
Next steps 
Now the basic gameplay is in place let’s make it more interesting by introducing bricks to smash — it’s time to build the brick field. 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/Player_paddle_and_controls”, “Games/Workflows/2D_Breakout_game_Phaser/Build_the_brick_field”)}} 

{{GamesSidebar}} 
{{Next(“Games/Workflows/2D_Breakout_game_Phaser/Initialize_the_framework”)}} 
In this step-by-step tutorial, we create a simple mobile MDN Breakout game written in JavaScript, using the Phaser framework. 
Every step has editable, live samples available to play with, so you can see what the intermediate stages should look like. 
You will learn the basics of using the Phaser framework to implement fundamental game mechanics like rendering and moving images, collision detection, control mechanisms, framework-specific helper functions, animations and tweens, and winning and losing states. 
To get the most out of this series of articles you should already have basic to intermediate JavaScript knowledge. 
After working through this tutorial, you should be able to build your own simple Web games with Phaser. 
Gameplay screen from the game MDN Breakout created with Phaser where you can use your paddle to bounce the ball and destroy the brick field, with keeping the points and lives. 
Lesson details 
All the lessons — and the different versions of the MDN Breakout game we are building together — are available on GitHub: 
Initialize the framework 
Scaling 
Load the assets and print them on screen 
Move the ball 
Physics 
Bounce off the walls 
Player paddle and controls 
Game over 
Build the brickfield 
Collision detection 
The score 
Win the game 
Extra lives 
Animations and tweens 
Buttons 
Randomizing gameplay 
As a note on learning paths — starting with pure JavaScript is the best way to get a solid knowledge of web game development. 
If you are not already familiar with pure JavaScript game development, we would suggest that you first work through this series’ counterpart, 2D breakout game using pure JavaScript. 
After that, you can pick any framework you like and use it for your projects; we have chosen Phaser as it is a good solid framework, with a good support and community available, and a good set of plugins. 
Frameworks speed up development time and help take care of the boring parts, allowing you to concentrate on the fun stuff. 
However, frameworks are not always perfect, so if something unexpected happens or you want to write some functionality that the framework does not provide, you will need some pure JavaScript knowledge. 
Note: This series of articles can be used as material for hands-on game development workshops. 
You can also make use of the Gamedev Phaser Content Kit based on this tutorial if you want to give a talk about game development with Phaser. 
Next steps 
Ok, let us get started! 
Head to the first part of the series — Initialize the framework. 
{{Next(“Games/Workflows/2D_Breakout_game_Phaser/Initialize_the_framework”)}} 

{{GamesSidebar}} 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser”, “Games/Workflows/2D_Breakout_game_Phaser/Scaling”)}} 
This is the first of 16 tutorials to learn how to use Gamedev Phaser. 
After completing this tutorial you can find the source code for this section at Gamedev-Phaser-Content-Kit/demos/lesson01.html. 
Before we can start writing the game’s functionality, we need to create a basic structure to render the game inside. 
This can be done using HTML — the Phaser framework will generate the required {{htmlelement(“canvas”)}} element. 
The game’s HTML 
The HTML document structure is quite simple, as the game will be rendered entirely on the {{htmlelement(“canvas”)}} element generated by the framework. 
Using your favorite text editor, create a new HTML document, save it as index.html, in a sensible location, and add the following code to it: 
<! 
doctype html> 
<html lang="en-US"> 
<head> 
<meta charset="utf-8" /> 
<title>Gamedev Phaser Workshop - lesson 01: Initialize the framework</title> 
<style> 
* { 
padding: 0; 
margin: 0; 
} 
</style> 
<script src="js/phaser.min.js"></script> 
</head> 
<body> 
<script> 
const game = new Phaser.Game(480, 320, Phaser.CANVAS, null, { 
preload, 
create, 
update, 
}); 
function preload() {} 
function create() {} 
function update() {} 
</script> 
</body> 
</html> 
Downloading the Phaser code 
Next, we need to go through the process of downloading the Phaser source code and applying it to our HTML document. 
Go to the Phaser download page. 
Choose an option that suits you best — we recommend the min.js option as it keeps the source code smaller, and you are unlikely to go through the source code anyway. Please make sure to use Phaser version 2 as that’s what this tutorial was written for. 
Save the Phaser code inside a /js directory in the same location as your index.html file. 
Update the src value of the first {{htmlelement(“script”)}} element as shown above. 
Walking through what we have so far 
At this point we have a charset defined, {{htmlelement(“title”)}} and some basic CSS in the header to reset the default margin and padding. 
We also have a {{htmlelement(“script”)}} element to apply the Phaser source code to the page. 
The body contains a second {{htmlelement(“script”)}} element, where we will write the JavaScript code to render the game and control it. 
The {{htmlelement(“canvas”)}} element is generated automatically by the framework. 
We are initializing it by creating a new Phaser.Game object and assigning it to the game variable. 
The parameters are: 
The width and height to set the {{htmlelement(“canvas”)}} to. 
The rendering method. 
The three options are AUTO, CANVAS and WEBGL. 
We can set one of the latter two explicitly or use AUTO to let Phaser decide which one to use. It usually uses WebGL if available in the browser, falling back to Canvas 2D if not. 
The id of the {{htmlelement(“canvas”)}} to use for rendering if one already exists on the page (we’ve specified null because we want Phaser to create its own.) 
The names to use for Phaser’s three key functions that load and start the game, and update the game loop on every frame; we will use the same names to keep it clean. 
preload takes care of preloading the assets 
create is executed once when everything is loaded and ready 
update is executed on every frame. 
Compare your code 
Here’s the full source code of the first lesson, running live in a JSFiddle: 
{{JSFiddleEmbed(“https://jsfiddle.net/end3r/h6cwzv2b/”,““,”400”)}} 
Next steps 
Now we’ve set up the basic HTML and learned a bit about Phaser initialization, let’s continue to the second lesson and learn about scaling. 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser”, “Games/Workflows/2D_Breakout_game_Phaser/Scaling”)}} 

{{GamesSidebar}} 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/Scaling”, “Games/Workflows/2D_Breakout_game_Phaser/Move the ball”)}} 
This is the 3rd step out of 16 in the Gamedev Phaser tutorial. 
You can find the source code as it should look after completing this lesson at Gamedev-Phaser-Content-Kit/demos/lesson03.html. 
Our game will feature a ball rolling around the screen, bouncing off a paddle, and destroying bricks to earn points — familiar, huh? 
In this article we’ll look at how to add sprites into our gameworld. 
Having a ball 
Let’s start by creating a JavaScript variable to represent our ball. Add the following line between the game initialization code (our const game block) and the preload() function: 
let ball; 
Note: For the sake of this tutorial, we will use global variables. 
That’s it — if you load your index.html file you will see the image already loaded and rendered on the canvas! Compare your code 

{{GamesSidebar}} 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/Load_the_assets_and_print_them_on_screen”, “Games/Workflows/2D_Breakout_game_Phaser/Physics”)}} 
This is the 4th step out of 16 of the Gamedev Phaser tutorial. 
You can find the source code as it should look after completing this lesson at Gamedev-Phaser-Content-Kit/demos/lesson04.html. 
We have our blue ball printed on screen, but it’s doing nothing — It would be cool to make it move somehow. 
This article covers how to do just that. 
Updating the ball’s position on each frame 
Remember the update() function and its definition? 
The code inside it is executed on every frame, so it’s a perfect place to put the code that will update the ball’s position on screen. 
Add the following new lines of the code inside update(), as shown: 
function update() { 
ball.x += 1; 
ball.y += 1; 
} 
The code above adds 1 to the x and y properties representing the ball coordinates on the canvas, on each frame. 
Reload index.html and you should see the ball rolling across the screen. 
Compare your code 
You can check the finished code for this lesson in the live demo below, and play with it to understand better how it works: 
{{JSFiddleEmbed(“https://jsfiddle.net/end3r/g1cfp0vv/”,““,”400”)}} 
Next steps 
The next step is to add some basic collision detection, so our ball can bounce off the walls. 
This would take several lines of code — a significantly more complex step than we have seen so far, especially if we want to add paddle and brick collisions too — but fortunately Phaser allows us to do this much more easily than if we wanted to use pure JavaScript. 
In any case, before we do all that we will first introduce Phaser’s physics engines, and do some setup work. 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/Load_the_assets_and_print_them_on_screen”, “Games/Workflows/2D_Breakout_game_Phaser/Physics”)}} 

{{GamesSidebar}} 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/Move_the_ball”, “Games/Workflows/2D_Breakout_game_Phaser/Bounce_off_the_walls”)}} 
This is the 5th step out of 16 of the Gamedev Phaser tutorial. 
You can find the source code as it should look after completing this lesson at Gamedev-Phaser-Content-Kit/demos/lesson05.html. 
For proper collision detection between objects in our game we will need to have physics; this article introduces you to what’s available in Phaser, as well as demonstrating a typical simple setup. 
Adding physics 
Phaser is bundled with three different physics engines — Arcade Physics, P2 and Ninja Physics — with a fourth option, Box2D, being available as a commercial plugin. 
For simple games like ours, we can use the Arcade Physics engine. 
We don’t need any heavy geometry calculations — after all it’s just a ball bouncing off walls and bricks. 
First, let’s initialize the Arcade Physics engine in our game. 
Add the physics.startSystem() method at the beginning of the create function (make it the first line inside the function), as shown below: 
game.physics.startSystem(Phaser.Physics.ARCADE); 
Next, we need to enable our ball for the physics system — Phaser object physics is not enabled by default. 
Add the following line at the bottom of the create() function: 
game.physics.enable(ball, Phaser.Physics.ARCADE); 
Next, if we want to move our ball on the screen, we can set velocity on its body. 
Add the following line, again at the bottom of create(): 
ball.body.velocity.set(150, 150); 
Removing our previous update instructions 
Remember to remove our old method of adding values to x and y from the update() function: 
function update() { 
ball.x += 1; 
ball.y += 1; 
} 
we are now handling this properly, with a physics engine. 
Final code check 
The latest code should look like this: 
let ball; 
function preload() { 
game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL; 
game.scale.pageAlignHorizontally = true; 
game.scale.pageAlignVertically = true; 
game.stage.backgroundColor = "#eee"; 
game.load.image("ball", "img/ball.png"); 
} 
function create() { 
game.physics.startSystem(Phaser.Physics.ARCADE); 
ball = game.add.sprite(50, 50, "ball"); 
game.physics.enable(ball, Phaser.Physics.ARCADE); 
ball.body.velocity.set(150, 150); 
} 
function update() {} 
Try reloading index.html again — The ball should now be moving constantly in the given direction. 
At the moment, the physics engine has gravity and friction set to zero. 
Adding gravity would result in the ball falling down while friction would eventually stop the ball. 
Fun with physics 
You can do much more with physics, for example by adding ball.body.gravity.y = 100; you will set the vertical gravity of the ball. 
As a result it will be launched upwards, but then fall due to the effects of gravity pulling it down. 
This kind of functionality is just the tip of the iceberg — there are various functions and variables that can help you manipulate the physics objects. 
Check out the official physics documentation and see the huge collection of examples using the Arcade and P2 physics systems. 
Compare your code 
You can check the finished code for this lesson in the live demo below, and play with it to understand better how it works: 
{{JSFiddleEmbed(“https://jsfiddle.net/end3r/bjto9nj8/”,““,”400”)}} 
Next steps 
Now we can move to the next lesson and see how to make the ball bounce off the walls. 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/Move_the_ball”, “Games/Workflows/2D_Breakout_game_Phaser/Bounce_off_the_walls”)}} 

{{GamesSidebar}} 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/Bounce_off_the_walls”, “Games/Workflows/2D_Breakout_game_Phaser/Game_over”)}} 
This is the 7th step out of 16 of the Gamedev Phaser tutorial. 
You can find the source code as it should look after completing this lesson at Gamedev-Phaser-Content-Kit/demos/lesson07.html. 
We have the ball moving and bouncing off the walls, but it quickly gets boring — there’s no interactivity! 
We need a way to introduce gameplay, so in this article we’ll create a paddle to move around and hit the ball with. 
Rendering the paddle 
From the framework point of view the paddle is very similar to the ball — we need to add a variable to represent it, load the relevant image asset, and then do the magic. 
Loading the paddle 
First, add the paddle variable we will be using in our game, right after the ball variable: 
let paddle; 
Then, in the preload function, load the paddle image by adding the following new load.image() call: 
function preload() { 
// … 
game.load.image("ball", "img/ball.png"); 
game.load.image("paddle", "img/paddle.png"); 
} 
Adding the paddle graphic 
Just so we don’t forget, at this point you should grab the paddle graphic from GitHub, and save it in your /img folder. 
Rendering the paddle, with physics 
Next up, we will initialize our paddle by adding the following add.sprite() call inside the create() function — add it right at the bottom: 
paddle = game.add.sprite( 
game.world.width * 0.5, 
game.world.height - 5, 
"paddle", 
); 
We can use the world.width and world.height values to position the paddle exactly where we want it: game.world.width*0.5 will be right in the middle of the screen. 
In our case the world is the same as the Canvas, but for other types of games, like side-scrollers for example, the world will be bigger, and you can tinker with it to create interesting effects. 
As you’ll notice if you reload your index.html at this point, the paddle is currently not exactly in the middle. 
Why? 
Because the anchor from which the position is calculated always starts from the top left edge of the object. 
We can change that to have the anchor in the middle of the paddle’s width and at the bottom of its height, so it’s easier to position it against the bottom edge. 
Add the following line below the previous new one: 
paddle.anchor.set(0.5, 1); 
The paddle is now positioned right where we want it to be. 
Now, to make it collide with the ball we have to enable physics for the paddle. 
Continue by adding the following new line, again at the bottom of the create() function: 
game.physics.enable(paddle, Phaser.Physics.ARCADE); 
Now the magic can start to happen — the framework can take care of checking the collision detection on every frame. 
To enable collision detection between the paddle and ball, add the collide() method to the update() function as shown: 
function update() { 
game.physics.arcade.collide(ball, paddle); 
} 
The first parameter is one of the objects we are interested in — the ball — and the second is the other one, the paddle. 
This works, but not quite as we expected it to — when the ball hits the paddle, the paddle falls off the screen! 
All we want is the ball bouncing off the paddle and the paddle staying in the same place. 
We can set the body of the paddle to be immovable, so it won’t move when the ball hits it. 
To do this, add the below line at the bottom of the create() function: 
paddle.body.immovable = true; 
Now it works as expected. 
Controlling the paddle 
The next problem is that we can’t move the paddle. 
To do that we can use the system’s default input (mouse or touch, depending on platform) and set the paddle position to where the input position is. 
Add the following new line to the update() function, as shown: 
function update() { 
game.physics.arcade.collide(ball, paddle); 
paddle.x = game.input.x; 
} 
Now on every new frame the paddle’s x position will adjust accordingly to the input’s x position, however when we start the game, the position of the paddle is not in the middle. 
It’s because the input position is not yet defined. 
To fix that we can set the default position (if an input position is not yet defined) to be the middle of the screen. 
Update the previous line as follows: 
paddle.x = game.input.x || game.world.width * 0.5; 
If you haven’t already done so, reload your index.html and try it out! 
Position the ball 
We have the paddle working as expected, so let’s position the ball on it. 
It’s very similar to positioning the paddle — we need to have it placed in the middle of the screen horizontally and at the bottom vertically with a little offset from the bottom. 
To place it exactly as we want it we will set the anchor to the exact middle of the ball. 
Find the existing ball = game.add.sprite() line, and replace it with the following two lines: 
ball = game.add.sprite(game.world.width * 0.5, game.world.height - 25, "ball"); 
ball.anchor.set(0.5); 
The velocity stays almost the same — we’re just changing the second parameter’s value from 150 to -150, so the ball will start the game by moving up instead of down. 
Find the existing ball.body.velocity.set() line and update it to the following: 
ball.body.velocity.set(150, -150); 
Now the ball will start right from the middle of the paddle. 
Compare your code 
You can check the finished code for this lesson in the live demo below, and play with it to understand better how it works: 
{{JSFiddleEmbed(“https://jsfiddle.net/end3r/ogqza0ye/”,““,”400”)}} 
Next steps 
We can move the paddle and bounce the ball off it, but what’s the point if the ball is bouncing off the bottom edge of the screen anyway? 
Let’s introduce the possibility of losing — also known as game over logic. 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/Bounce_off_the_walls”, “Games/Workflows/2D_Breakout_game_Phaser/Game_over”)}} 

{{GamesSidebar}} 
{{Previous(“Games/Workflows/2D_Breakout_game_Phaser/Buttons”)}} 
This is the 16th step out of 16 of the Gamedev Phaser tutorial. 
You can find the source code as it should look after completing this lesson at Gamedev-Phaser-Content-Kit/demos/lesson16.html. 
Our game appears to be completed, but if you look close enough you’ll notice that the ball is bouncing off the paddle at the same angle throughout the whole game. 
This means that every game is quite similar. 
To fix this and improve playability we should make the rebound angles more random, and in this article we’ll look at how. 
Making rebounds more random 
We can change the ball’s velocity depending on the exact spot it hits the paddle, by modifying the x velocity each time the ballHitPaddle() function is run using a line along the lines of the below. 
Add this new line to your code now, and try it out. 
function ballHitPaddle(ball, paddle) { 
ball.animations.play("wobble"); 
ball.body.velocity.x = -5 * (paddle.x - ball.x); 
} 
It’s a little bit of magic — the new velocity is higher, the larger the distance between the center of the paddle and the place where the ball hits it. 
Also, the direction (left or right) is determined by that value — if the ball hits the left side of the paddle it will bounce left, whereas hitting the right side will bounce it to the right. 
It ended up that way because of a little bit of experimentation with the given values, you can do your own experimentation and see what happens. 
It’s not completely random of course, but it does make the gameplay a bit more unpredictable and therefore more interesting. 
Compare your code 
You can check the finished code for this lesson in the live demo below, and play with it to understand better how it works: 
{{JSFiddleEmbed(“https://jsfiddle.net/end3r/3yds5ege/”,““,”400”)}} 
Summary 
You’ve finished all the lessons — congratulations! 
By this point you would have learnt the basics of Phaser and the logic behind simple 2D games. 
Exercises to follow 
You can do a lot more in the game — add whatever you feel would be best to make it more fun and interesting. 
It’s a basic intro scratching the surface of the countless helpful methods that Phaser provides. 
Below are some suggestions as to how you could expand our little game, to get you started: 
Add a second ball or paddle. 
Change the color of the background on every hit. 
Change the images and use your own. 
Grant extra bonus points if bricks are destroyed rapidly, several-in-a-row (or other bonuses of your choosing.) 
Create levels with different brick layouts. 
Be sure to check the ever-growing list of examples and the official documentation, and visit the HTML5 Gamedevs forums if you ever need any help. 
You could also go back to this tutorial series’ index page. 
{{Previous(“Games/Workflows/2D_Breakout_game_Phaser/Buttons”)}} 

{{GamesSidebar}} 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/Initialize_the_framework”, “Games/Workflows/2D_Breakout_game_Phaser/Load_the_assets_and_print_them_on_screen”)}} 
This is the 2nd step out of 16 of the Gamedev Phaser tutorial. 
You can find the source code as it should look after completing this lesson at Gamedev-Phaser-Content-Kit/demos/lesson02.html. 
Scaling refers to how the game canvas will scale on different screen sizes. 
We can make the game scale to fit on any screen size automatically during the preload stage, so we don’t have to worry about it later. 
The Phaser scale object 
There’s a special scale object available in Phaser with a few handy methods and properties available. 
Update your existing preload() function as follows: 
function preload() { 
game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL; 
game.scale.pageAlignHorizontally = true; 
game.scale.pageAlignVertically = true; 
} 
scaleMode has a few different options available for how the Canvas can be scaled: 
NO_SCALE — nothing is scaled. 
EXACT_FIT — scale the canvas to fill all the available space both vertically and horizontally, without preserving the aspect ratio. 
SHOW_ALL — scales the canvas, but keeps the aspect ratio untouched, so images won’t be skewed like in the previous mode. 
There might be black stripes visible on the edges of the screen, but we can live with that. 
RESIZE — creates the canvas with the same size as the available width and height, so you have to place the objects inside your game dynamically; this is more of an advanced mode. 
USER_SCALE — allows you to have custom dynamic scaling, calculating the size, scale and ratio on your own; again, this is more of an advanced mode 
The other two lines of code in the preload() function are responsible for aligning the canvas element horizontally and vertically, so it is always centered on screen regardless of size. 
Adding a custom canvas background color 
We can also add a custom background color to our canvas, so it won’t stay black. 
The stage object has a backgroundColor property for this purpose, which we can set using CSS color definition syntax. 
Add the following line below the other three you added earlier: 
game.stage.backgroundColor = "#eee"; 
Compare your code 
You can check the finished code for this lesson in the live demo below, and play with it to understand better how it works: 
{{JSFiddleEmbed(“https://jsfiddle.net/end3r/6a64vecL/”,““,”400”)}} 
Next steps 
Now we’ve set up the scaling for our game, let’s continue to the third lesson and work out how to load the assets and print them on screen. 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/Initialize_the_framework”, “Games/Workflows/2D_Breakout_game_Phaser/Load_the_assets_and_print_them_on_screen”)}} 

{{GamesSidebar}} 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/Collision_detection”, “Games/Workflows/2D_Breakout_game_Phaser/Win_the_game”)}} 
This is the 11th step out of 16 of the Gamedev Phaser tutorial. 
You can find the source code as it should look after completing this lesson at Gamedev-Phaser-Content-Kit/demos/lesson11.html. 
Having a score can also make the game more interesting — you can try to beat your own high score, or your friend’s. 
In this article we’ll add a scoring system to our game. 
We will use a separate variable for storing the score and Phaser’s text() method to print it out onto the screen. 
New variables 
Add two new variables right after the previously defined ones: 
// … 
let scoreText; 
let score = 0; 
Adding score text to the game display 
Now add this line at the end of the create() function: 
scoreText = game.add.text(5, 5, "Points: 0", { 
font: "18px Arial", 
fill: "#0095DD", 
}); 
The text() method can take four parameters: 
The x and y coordinates to draw the text at. 
The actual text that will be rendered. 
The font style to render the text with. 
The last parameter looks very similar to CSS styling. 
In our case the score text will be blue, sized at 18 pixels, and use the Arial font. 
Updating the score when bricks are destroyed 
We will increase the number of points every time the ball hits a brick and update the scoreText to display the current score. 
This can be done using the setText() method — add the two new lines seen below to the ballHitBrick() function: 
function ballHitBrick(ball, brick) { 
brick.kill(); 
score += 10; 
scoreText.setText(`Points: ${score}`); 
} 
That’s it for now — reload your index.html and check that the score updates on every brick hit. 
Compare your code 
You can check the finished code for this lesson in the live demo below, and play with it to understand better how it works: 
{{JSFiddleEmbed(“https://jsfiddle.net/end3r/n8o6rhrf/”,““,”400”)}} 
Next steps 
We now have a scoring system, but what’s the point of playing and keeping score if you can’t win? 
Let’s see how we can add a victory state, allowing us to win the game. 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/Collision_detection”, “Games/Workflows/2D_Breakout_game_Phaser/Win_the_game”)}} 

{{GamesSidebar}} 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/The_score”, “Games/Workflows/2D_Breakout_game_Phaser/Extra_lives”)}} 
This is the 12th step out of 16 of the Gamedev Phaser tutorial. 
You can find the source code as it should look after completing this lesson at Gamedev-Phaser-Content-Kit/demos/lesson12.html. 
Implementing winning in our game is quite easy: if you happen to destroy all the bricks, then you win. 
How to win? 
Add the following new code into your ballHitBrick() function: 
function ballHitBrick(ball, brick) { 
brick.kill(); 
score += 10; 
scoreText.setText(`Points: ${score}`); 
let count_alive = 0; 
for (let i = 0; i < bricks.children.length; i++) { 
if (bricks.children[i].alive) { 
count_alive++; 
} 
} 
if (count_alive === 0) { 
alert("You won the game, congratulations!" 
); 
location.reload(); 
} 
} 
We loop through the bricks in the group using bricks.children, checking for the aliveness of each with each brick’s .alive() method. 
If there are no more bricks left alive, then we show a winning message, restarting the game once the alert is dismissed. 
Compare your code 
You can check the finished code for this lesson in the live demo below, and play with it to understand better how it works: 
{{JSFiddleEmbed(“https://jsfiddle.net/u8waa4Lx/1/”,““,”400”)}} 
Next steps 
Both losing and winning are implemented, so the core gameplay of our game is finished. 
Now let’s add something extra — we’ll give the player three lives instead of one. 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_Phaser/The_score”, “Games/Workflows/2D_Breakout_game_Phaser/Extra_lives”)}} 

{{GamesSidebar}} 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_pure_JavaScript/Move_the_ball”, “Games/Workflows/2D_Breakout_game_pure_JavaScript/Paddle_and_keyboard_controls”)}} 
This is the 3rd step out of 10 of the Gamedev Canvas tutorial. 
You can find the source code as it should look after completing this lesson at Gamedev-Canvas-workshop/lesson3.html. 
It is nice to see our ball moving, but it quickly disappears from the screen, limiting the fun we can have with it! 
To overcome that we will implement some very simple collision detection (which will be explained later in more detail) to make the ball bounce off the four edges of the Canvas. 
Simple collision detection 
To detect the collision we will check whether the ball is touching (colliding with) the wall, and if so, we will change the direction of its movement accordingly. 
To make the calculations easier let’s define a variable called ballRadius that will hold the radius of the drawn circle and be used for calculations. 
Add this to your code, somewhere below the existing variable declarations: 
const ballRadius = 10; 
Now update the line that draws the ball inside the drawBall() function to this: 
ctx.arc(x, y, ballRadius, 0, Math.PI * 2); 
Bouncing off the top and bottom 
There are four walls to bounce the ball off — let’s focus on the top one first. 
We need to check, on every frame, whether the ball is touching the top edge of the Canvas — if yes, we’ll reverse the ball movement so it will start to move in the opposite direction and stay within the visible boundaries. 
Remembering that the coordinate system starts from the top left, we can come up with something like this: 
if (y + dy < 0) { 
dy = -dy; 
} 
If the y value of the ball position is lower than zero, change the direction of the movement on the y axis by setting it equal to itself, reversed. 
If the ball was moving upwards with a speed of 2 pixels per frame, now it will be moving “up” with a speed of -2 pixels, which actually equals to moving down at a speed of 2 pixels per frame. 
The code above would deal with the ball bouncing off the top edge, so now let’s think about the bottom edge: 
if (y + dy > canvas.height) { 
dy = -dy; 
} 
If the ball’s y position is greater than the height of the Canvas (remember that we count the y values from the top left, so the top edge starts at 0 and the bottom edge is at 320 pixels, the Canvas’ height), then bounce it off the bottom edge by reversing the y axis movement as before. 
We could merge those two statements into one to save on code verbosity: 
if (y + dy > canvas.height || y + dy < 0) { 
dy = -dy; 
} 
If either of the two statements is true, reverse the movement of the ball. 
Bouncing off the left and right 
We have the top and bottom edge covered, so let’s think about the left and right ones. 
It is very similar actually, all you have to do is to repeat the statements for x instead of y: 
if (x + dx > canvas.width || x + dx < 0) { 
dx = -dx; 
} 
if (y + dy > canvas.height || y + dy < 0) { 
dy = -dy; 
} 
At this point you should insert the above code block into the draw() function, just before the closing curly brace. 
The ball keeps disappearing into the wall! 
Test your code at this point, and you will be impressed — now we have a ball that bounced off all four edges of the canvas! 
We have another problem however — when the ball hits each wall it sinks into it slightly before changing direction: 
This is because we’re calculating the collision point of the wall and the center of the ball, while we should be doing it for its circumference. 
The ball should bounce right after if touches the wall, not when it’s already halfway in the wall, so let’s adjust our statements a bit to include that. 
Update the last code you added to this: 
if (x + dx > canvas.width - ballRadius || x + dx < ballRadius) { 
dx = -dx; 
} 
if (y + dy > canvas.height - ballRadius || y + dy < ballRadius) { 
dy = -dy; 
} 
When the distance between the center of the ball and the edge of the wall is exactly the same as the radius of the ball, it will change the movement direction. 
Compare your code 
Let’s again check the finished code for this part against what you’ve got, and have a play: 
{{JSFiddleEmbed(“https://jsfiddle.net/end3r/redj37dc/”,““,”395”)}} 
Note: Try changing the color of the ball to a random color every time it hits the wall. 
Next steps 
We’ve now got to the stage where our ball is both moving and staying on the game board. 
In the fourth chapter we’ll look at implementing a controllable paddle — see Paddle and keyboard controls. 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_pure_JavaScript/Move_the_ball”, “Games/Workflows/2D_Breakout_game_pure_JavaScript/Paddle_and_keyboard_controls”)}} 

{{GamesSidebar}} 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_pure_JavaScript/Game_over”, “Games/Workflows/2D_Breakout_game_pure_JavaScript/Collision_detection”)}} 
This is the 6th step out of 10 of the Gamedev Canvas tutorial. 
You can find the source code as it would look after completing this lesson at Gamedev-Canvas-workshop/lesson6.html. 
After modifying the gameplay mechanics, we are now able to lose — this is great as it means the game is finally feeling more like a game. 
However, it will quickly get boring if all you do is bounce the ball off the walls and the paddle. 
What a breakout game really needs is some bricks to destroy with the ball, and this is what we’ll create now! 
Setting up the brick variables 
The overall aim of this lesson is to render a few lines of code for the bricks, using a nested loop that works through a two-dimensional array. 
First however we need to set up some variables to define information about the bricks such as their width and height, rows and columns, etc. 
Add the following lines to your code below the variables which you have previously declared in your program. 
const brickRowCount = 3; 
const brickColumnCount = 5; 
const brickWidth = 75; 
const brickHeight = 20; 
const brickPadding = 10; 
const brickOffsetTop = 30; 
const brickOffsetLeft = 30; 
Here we’ve defined the number of rows and columns of bricks, their width and height, the padding between the bricks so they won’t touch each other and a top and left offset so they won’t start being drawn right from the edge of the Canvas. 
We will hold all our bricks in a two-dimensional array. 
It will contain the brick columns (c), which in turn will contain the brick rows (r), which in turn will each contain an object containing the x and y position to paint each brick on the screen. 
Add the following just below your variables: 
const bricks = []; 
for (let c = 0; c < brickColumnCount; c++) { 
bricks[c] = []; 
for (let r = 0; r < brickRowCount; r++) { 
bricks[c][r] = { x: 0, y: 0 }; 
} 
} 
The code above will loop through the rows and columns and create the new bricks. 
NOTE that the brick objects will also be used for collision detection purposes later. 
Brick drawing logic 
Now let’s create a function to loop through all the bricks in the array and draw them on the screen. 
Our code might look like this: 
function drawBricks() { 
for (let c = 0; c < brickColumnCount; c++) { 
for (let r = 0; r < brickRowCount; r++) { 
bricks[c][r].x = 0; 
bricks[c][r].y = 0; 
ctx.beginPath(); 
ctx.rect(0, 0, brickWidth, brickHeight); 
ctx.fillStyle = "#0095DD"; 
ctx.fill(); 
ctx.closePath(); 
} 
} 
} 
Again, we’re looping through the rows and columns to set the x and y position of each brick, and we’re also painting a brick on the Canvas — size brickWidth x brickHeight — with each loop iteration. 
The problem is that we’re painting them all in one place, at coordinates (0,0). 
What we need to do is include some calculations that will work out the x and y position of each brick for each loop iteration: 
const brickX = c * (brickWidth + brickPadding) + brickOffsetLeft; 
const brickY = r * (brickHeight + brickPadding) + brickOffsetTop; 
Each brickX position is worked out as brickWidth + brickPadding, multiplied by the column number, c, plus the brickOffsetLeft; the logic for the brickY is identical except that it uses the values for row number, r, brickHeight, and brickOffsetTop. 
Now every single brick can be placed in its correct place row and column, with padding between each brick, drawn at an offset from the left and top canvas edges. 
The final version of the drawBricks() function, after assigning the brickX and brickY values as the coordinates instead of (0,0) each time, will look like this — add this into your code below the drawPaddle() function: 
function drawBricks() { 
for (let c = 0; c < brickColumnCount; c++) { 
for (let r = 0; r < brickRowCount; r++) { 
const brickX = c * (brickWidth + brickPadding) + brickOffsetLeft; 
const brickY = r * (brickHeight + brickPadding) + brickOffsetTop; 
bricks[c][r].x = brickX; 
bricks[c][r].y = brickY; 
ctx.beginPath(); 
ctx.rect(brickX, brickY, brickWidth, brickHeight); 
ctx.fillStyle = "#0095DD"; 
ctx.fill(); 
ctx.closePath(); 
} 
} 
} 
Actually drawing the bricks 
The last thing to do in this lesson is to add a call to drawBricks() somewhere in the draw() function, preferably at the beginning, between the clearing of the Canvas and drawing the ball. 
Add the following just above the drawBall() call: 
drawBricks(); 
Compare your code 
At this point, the game has got a little more interesting again: 
{{JSFiddleEmbed(“https://jsfiddle.net/raymondjplante/Lu3vtejz/”,““,”395”)}} 
Note: Try changing the number of bricks in a row or a column, or their positions. 
Next steps 
So now we have bricks! 
But the ball isn’t interacting with them at all — we’ll change that as we continue to the seventh chapter: Collision detection. 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_pure_JavaScript/Game_over”, “Games/Workflows/2D_Breakout_game_pure_JavaScript/Collision_detection”)}} 

{{GamesSidebar}} 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_pure_JavaScript/Build_the_brick_field”, “Games/Workflows/2D_Breakout_game_pure_JavaScript/Track_the_score_and_win”)}} 
This is the 7th step out of 10 of the Gamedev Canvas tutorial. 
You can find the source code as it should look after completing this lesson at Gamedev-Canvas-workshop/lesson7.html. 
We have the bricks appearing on the screen already, but the game still isn’t that interesting as the ball goes through them. 
We need to think about adding collision detection so it can bounce off the bricks and break them. 
It’s our decision how to implement this, of course, but it can be tough to calculate whether the ball is touching the rectangle or not because there are no helper functions in Canvas for this. 
For the sake of this tutorial we will do it the easiest way possible. 
We will check if the center of the ball is colliding with any of the given bricks. 
This won’t give a perfect result every time, and there are much more sophisticated ways to do collision detection, but this will work fine for teaching you the basic concepts. 
A collision detection function 
To kick this all off we want to create a collision detection function that will loop through all the bricks and compare every single brick’s position with the ball’s coordinates as each frame is drawn. 
For better readability of the code we will define the b variable for storing the brick object in every loop of the collision detection: 
function collisionDetection() { 
for (let c = 0; c < brickColumnCount; c++) { 
for (let r = 0; r < brickRowCount; r++) { 
const b = bricks[c][r]; 
// calculations 
} 
} 
} 
If the center of the ball is inside the coordinates of one of our bricks, we’ll change the direction of the ball. 
For the center of the ball to be inside the brick, all four of the following statements need to be true: 
The x position of the ball is greater than the x position of the brick. 
The x position of the ball is less than the x position of the brick plus its width. 
The y position of the ball is greater than the y position of the brick. 
The y position of the ball is less than the y position of the brick plus its height. 
Let’s write that down in code: 
function collisionDetection() { 
for (let c = 0; c < brickColumnCount; c++) { 
for (let r = 0; r < brickRowCount; r++) { 
const b = bricks[c][r]; 
if (x > b.x && x < b.x + brickWidth && y > b.y && y < b.y + brickHeight) { 
dy = -dy; 
} 
} 
} 
} 
Add the above block to your code, below the keyUpHandler() function. 
Making the bricks disappear after they are hit 
The above code will work as desired and the ball changes its direction. 
The problem is that the bricks are staying where they are. 
We have to figure out a way to get rid of the ones we’ve already hit with the ball. 
We can do that by adding an extra parameter to indicate whether we want to paint each brick on the screen or not. 
In the part of the code where we initialize the bricks, let’s add a status property to each brick object. 
Update the following part of the code as indicated by the highlighted line: 
const bricks = []; 
for (let c = 0; c < brickColumnCount; c++) { 
bricks[c] = []; 
for (let r = 0; r < brickRowCount; r++) { 
bricks[c][r] = { x: 0, y: 0, status: 1 }; 
} 
} 
Next we’ll check the value of each brick’s status property in the drawBricks() function before drawing it — if status is 1, then draw it, but if it’s 0, then it was hit by the ball and we don’t want it on the screen anymore. 
Update your drawBricks() function as follows: 
function drawBricks() { 
for (let c = 0; c < brickColumnCount; c++) { 
for (let r = 0; r < brickRowCount; r++) { 
if (bricks[c][r].status === 1) { 
const brickX = c * (brickWidth + brickPadding) + brickOffsetLeft; 
const brickY = r * (brickHeight + brickPadding) + brickOffsetTop; 
bricks[c][r].x = brickX; 
bricks[c][r].y = brickY; 
ctx.beginPath(); 
ctx.rect(brickX, brickY, brickWidth, brickHeight); 
ctx.fillStyle = "#0095DD"; 
ctx.fill(); 
ctx.closePath(); 
} 
} 
} 
} 
Tracking and updating the status in the collision detection function 
Now we need to involve the brick status property in the collisionDetection() function: if the brick is active (its status is 1) we will check whether the collision happens; if a collision does occur we’ll set the status of the given brick to 0 so it won’t be painted on the screen. 
Update your collisionDetection() function as indicated below: 
function collisionDetection() { 
for (let c = 0; c < brickColumnCount; c++) { 
for (let r = 0; r < brickRowCount; r++) { 
const b = bricks[c][r]; 
if (b.status === 1) { 
if ( 
x > b.x && 
x < b.x + brickWidth && 
y > b.y && 
y < b.y + brickHeight 
) { 
dy = -dy; 
b.status = 0; 
} 
} 
} 
} 
} 
Activating our collision detection 
The last thing to do is to add a call to the collisionDetection() function to our main draw() function. 
Add the following line to the draw() function, just below the drawPaddle() call: 
collisionDetection(); 
Compare your code 
The collision detection of the ball is now checked on every frame, with every brick. 
Now we can destroy bricks! :- 
{{JSFiddleEmbed(“https://jsfiddle.net/yumetodo/kaed3hbu/”,““,”395”)}} 
Note: Try changing the color of the ball when it hits the brick. 
Next steps 
We are definitely getting there now; let’s move on! 
In the eighth chapter we will be looking at how to Track the score and win. 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_pure_JavaScript/Build_the_brick_field”, “Games/Workflows/2D_Breakout_game_pure_JavaScript/Track_the_score_and_win”)}} 

{{GamesSidebar}} 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_pure_JavaScript”, “Games/Workflows/2D_Breakout_game_pure_JavaScript/Move_the_ball”)}} 
This is the 1st step out of 10 of the Gamedev Canvas tutorial. 
You can find the source code as it should look after completing this lesson at Gamedev-Canvas-workshop/lesson1.html. 
Before we can start writing the game’s functionality, we need to create a basic structure to render the game inside. This can be done using HTML and the {{htmlelement(“canvas”)}} element. 
The game’s HTML 
The HTML document structure is quite simple, as the game will be rendered entirely on the {{htmlelement(“canvas”)}} element. 
Using your favorite text editor, create a new HTML document, save it as index.html, in a sensible location, and add the following code to it: 
<! 
doctype html> 
<html lang="en-US"> 
<head> 
<meta charset="utf-8" /> 
<title>Gamedev Canvas Workshop</title> 
<style> 
* { 
padding: 0; 
margin: 0; 
} 
canvas { 
background: #eee; 
display: block; 
margin: 0 auto; 
} 
</style> 
</head> 
<body> 
<canvas id="myCanvas" width="480" height="320"></canvas> 
<script> 
// JavaScript code goes here 
</script> 
</body> 
</html> 
We have a charset defined, {{htmlelement(“title”)}} and some basic CSS in the header. 
The body contains {{htmlelement(“canvas”)}} and {{htmlelement(“script”)}} elements — we will render the game inside the first one and write the JavaScript code that controls it in the second one. 
The {{htmlelement(“canvas”)}} element has an id of myCanvas to allow us to easily grab a reference to it, and it is 480 pixels wide and 320 pixels high. 
All the JavaScript code we will write in this tutorial will go between the opening <script> and closing </script> tags. 
Canvas basics 
To actually be able to render graphics on the {{htmlelement(“canvas”)}} element, first we have to grab a reference to it in JavaScript. 
Add the following below your opening <script> tag. 
const canvas = document.getElementById("myCanvas"); 
const ctx = canvas.getContext("2d"); 
Here we’re storing a reference to the {{htmlelement(“canvas”)}} element to the canvas variable. Then we’re creating the ctx variable to store the 2D rendering context — the actual tool we can use to paint on the Canvas. 
Let’s see an example piece of code that prints a red square on the canvas. 
Add this below your previous lines of JavaScript, then load your index.html in a browser to try it out. 
ctx.beginPath(); 
ctx.rect(20, 40, 50, 50); 
ctx.fillStyle = "#FF0000"; 
ctx.fill(); 
ctx.closePath(); 
All the instructions are between the {{domxref(“CanvasRenderingContext2D.beginPath()”,“beginPath()”)}} and {{domxref(“CanvasRenderingContext2D.closePath()”,“closePath()”)}} methods. 
We are defining a rectangle using {{domxref(“CanvasRenderingContext2D.rect()”,“rect()”)}}: the first two values specify the coordinates of the top left corner of the rectangle on the canvas, while the second two specify the width and height of the rectangle. 
In our case the rectangle is painted 20 pixels from the left side of the screen and 40 pixels from the top side, and is 50 pixels wide and 50 pixels high, which makes it a perfect square. 
The {{domxref(“CanvasRenderingContext2D.fillStyle”,“fillStyle”)}} property stores a color that will be used by the {{domxref(“CanvasRenderingContext2D.fill()”,“fill()”)}} method to paint the square, in our case, red. 
We’re not limited to rectangles — here’s a piece of code for printing out a green circle. Try adding this to the bottom of your JavaScript, saving and refreshing: 
ctx.beginPath(); 
ctx.arc(240, 160, 20, 0, Math.PI * 2, false); 
ctx.fillStyle = "green"; 
ctx.fill(); 
ctx.closePath(); 
Between them, the most important part of the code above is the {{domxref(“CanvasRenderingContext2D.arc()”,“arc()”)}} method. 
It takes six parameters: 
x and y coordinates of the arc’s center 
arc radius 
start angle and end angle (what angle to start and finish drawing the circle, in radians) 
direction of drawing (false for clockwise, the default, or true for anti-clockwise.) 
This last parameter is optional. 
The {{domxref(“CanvasRenderingContext2D.fillStyle”,“fillStyle”)}} property looks different than before. 
This is because, just as with CSS, color can be specified as a hexadecimal value, a color keyword, the rgba() function, or any of the other available color methods. 
Instead of using {{domxref(“CanvasRenderingContext2D.fill()”,“fill()”)}} and filling the shapes with colors, we can use {{domxref(“CanvasRenderingContext2D.stroke()”,“stroke()”)}} to only color the outer stroke. 
Try adding this code to your JavaScript too: 
ctx.beginPath(); 
ctx.rect(160, 10, 100, 40); 
ctx.strokeStyle = "rgba(0, 0, 255, 0.5)"; 
ctx.stroke(); 
ctx.closePath(); 
The code above prints a blue-stroked empty rectangle. 
Thanks to the alpha channel in the rgba() function, the blue color is semi transparent. 
Compare your code 
Here’s the full source code of the first lesson, running live in a JSFiddle: 
{{JSFiddleEmbed(“https://jsfiddle.net/end3r/x62h15e2/”,““,”395”)}} 
Note: Try changing the size and color of the given shapes. 
Next steps 
Now we’ve set up the basic HTML and learned a bit about canvas, lets continue to the second chapter and work out how to Move the ball in our game. 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_pure_JavaScript”, “Games/Workflows/2D_Breakout_game_pure_JavaScript/Move_the_ball”)}} 

{{GamesSidebar}} 
{{Previous(“Games/Workflows/2D_Breakout_game_pure_JavaScript/Mouse_controls”)}} 
This is the 10th and final step of the Gamedev Canvas tutorial. 
You can find the source code as it should look after completing this lesson at Gamedev-Canvas-workshop/lesson10.html. 
There’s always room for improvements in any game we write. 
For example, we can offer more than one life to the player. They could make a mistake or two and still be able to finish the game. 
We could also improve our code rendering. 
Giving the player some lives 
Implementing lives is quite straightforward. 
Let’s first add a variable to store the number of lives in the same place where we declared our other variables: 
let lives = 3; 
Drawing the life counter looks almost the same as drawing the score counter — add the following function to your code, below the drawScore() function: 
function drawLives() { 
ctx.font = "16px Arial"; 
ctx.fillStyle = "#0095DD"; 
ctx.fillText(`Lives: ${lives}`, canvas.width - 65, 20); 
} 
Instead of ending the game immediately, we will decrease the number of lives until they are no longer available. 
We can also reset the ball and the paddle positions when the player begins with their next life. 
So, in the draw() function replace the following three lines: 
alert("GAME OVER"); 
document.location.reload(); 
clearInterval(interval); // Needed for Chrome to end game 
With this, we can add slightly more complex logic to it as given below: 
lives--; 
if (! 
lives) { 
alert("GAME OVER"); 
document.location.reload(); 
clearInterval(interval); // Needed for Chrome to end game 
} else { 
x = canvas.width / 2; 
y = canvas.height - 30; 
dx = 2; 
dy = -2; 
paddleX = (canvas.width - paddleWidth) / 2; 
} 
Now, when the ball hits the bottom edge of the screen, we’re subtracting one life from the lives variable. 
If there are no lives left, the game is lost; if there are still some lives left, then the position of the ball and the paddle are reset, along with the movement of the ball. 
Rendering the lives display 
Now you need to add a call to drawLives() inside the draw() function and add it below the drawScore() call. 
drawLives(); 
Improving rendering with requestAnimationFrame() 
Now let’s work on something that is not connected to the game mechanics, but to the way it is being rendered. {{domxref(“window.requestAnimationFrame”, “requestAnimationFrame”)}} helps the browser render the game better than the fixed frame rate we currently have implemented using {{domxref(“setInterval()”)}}. 
Replace the following line: 
const interval = setInterval(draw, 10); 
with: 
draw(); 
and remove each instance of: 
clearInterval(interval); // Needed for Chrome to end game 
Then, at the very bottom of the draw() function (just before the closing curly brace), add in the following line, which causes the draw() function to call itself over and over again: 
requestAnimationFrame(draw); 
The draw() function is now getting executed again and again within a requestAnimationFrame() loop, but instead of the fixed 10 milliseconds frame rate, we are giving control of the frame rate back to the browser. 
It will sync the frame rate accordingly and render the shapes only when needed. 
This produces a more efficient, smoother animation loop than the older setInterval() method. 
Compare your code 
That’s all — the final version of the game is ready and set to go ! 
{{JSFiddleEmbed(“https://jsfiddle.net/raymondjplante/dfh2tpu1/”,““,”395”)}} 
Note:: Try changing the number of lives and the angle the ball bounces off the paddle. 
You’ve finished all the lessons - congratulations! 
By this point, you should now know the basics of canvas manipulation and the logic behind simple 2D games. 
Now it’s a good time to learn some frameworks and continue game development. 
You can check out this series’ counterpart, 2D breakout game using Phaser or the Cyber Orb built in Phaser tutorial. 
You can also look through the Games section on MDN for inspiration and more knowledge. 
You could also go back to this tutorial series’ index page. 
Have fun coding! 
{{Previous(“Games/Workflows/2D_Breakout_game_pure_JavaScript/Mouse_controls”)}} 

{{GamesSidebar}} 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_pure_JavaScript/Paddle_and_keyboard_controls”, “Games/Workflows/2D_Breakout_game_pure_JavaScript/Build_the_brick_field”)}} 
This is the 5th step out of 10 of the Gamedev Canvas tutorial. 
You can find the source code as it should look after completing this lesson at Gamedev-Canvas-workshop/lesson5.html. 
It’s fun to watch the ball bouncing off the walls and be able to move the paddle around, but other than that the game does nothing and doesn’t have any progression or end goal. 
It would be good from the gameplay point of view to be able to lose. 
The logic behind losing in breakout is simple. 
If you miss the ball with the paddle and let it reach the bottom edge of the screen, then it’s game over. 
Implementing game over 
Let’s try to implement game over in our game. Here’s the piece of code from the third lesson where we made the ball bounce off the walls: 
if (x + dx > canvas.width - ballRadius || x + dx < ballRadius) { 
dx = -dx; 
} 
if (y + dy > canvas.height - ballRadius || y + dy < ballRadius) { 
dy = -dy; 
} 
Instead of allowing the ball to bounce off all four walls, let’s only allow three now — left, top and right. 
Hitting the bottom wall will end the game. 
We’ll edit the second if block so it’s an if else block that will trigger our “game over” state upon the ball colliding with the bottom edge of the canvas. 
For now we’ll keep it simple, showing an alert message and restarting the game by reloading the page. 
First, replace where you initially called setInterval() 
setInterval(draw, 10); 
with: 
const interval = setInterval(draw, 10); 
Then replace the second if statement with the following: 
if (y + dy < ballRadius) { 
dy = -dy; 
} else if (y + dy > canvas.height - ballRadius) { 
alert("GAME OVER"); 
document.location.reload(); 
} 
Letting the paddle hit the ball 
The last thing to do in this lesson is to create some kind of collision detection between the ball and the paddle, so it can bounce off it and get back into the play area. 
The easiest thing to do is to check whether the center of the ball is between the left and right edges of the paddle. 
Update the last bit of code you modified again, to the following: 
if (y + dy < ballRadius) { 
dy = -dy; 
} else if (y + dy > canvas.height - ballRadius) { 
if (x > paddleX && x < paddleX + paddleWidth) { 
dy = -dy; 
} else { 
alert("GAME OVER"); 
clearInterval(interval); 
} 
} 
If the ball hits the bottom edge of the Canvas we need to check whether it hits the paddle. 
If so, then it bounces off just like you’d expect; if not, then the game is over as before. 
Compare your code 
Here’s the working code for you to compare yours against: 
{{JSFiddleEmbed(“https://jsfiddle.net/raymondjplante/L61c9y50/”,““,”395”)}} 
Note: Try making the ball move faster when it hits the paddle. 
Next steps 
We’re doing quite well so far and our game is starting to feel a lot more worth playing now that you can lose! 
But it is still missing something. 
Let’s move on to the sixth chapter — Build the brick field — and create some bricks for the ball to destroy. 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_pure_JavaScript/Paddle_and_keyboard_controls”, “Games/Workflows/2D_Breakout_game_pure_JavaScript/Build_the_brick_field”)}} 

{{GamesSidebar}} 
{{Next(“Games/Workflows/2D_Breakout_game_pure_JavaScript/Create_the_Canvas_and_draw_on_it”)}} 
In this step-by-step tutorial we create a simple MDN Breakout game written entirely in pure JavaScript and rendered on HTML {{htmlelement(“canvas”)}}. 
Every step has editable, live samples available to play with so you can see what the intermediate stages should look like. 
You will learn the basics of using the {{htmlelement(“canvas”)}} element to implement fundamental game mechanics like rendering and moving images, collision detection, control mechanisms, and winning and losing states. 
To get the most out of this series of articles you should already have basic to intermediate JavaScript knowledge. 
After working through this tutorial you should be able to build your own simple Web games. 
Gameplay screen from the game MDN Breakout where you can use your paddle to bounce the ball and destroy the brick field, with keeping the score and lives. 
Lesson details 
All the lessons — and the different versions of the MDN Breakout game we are building together — are available on GitHub: 
Create the Canvas and draw on it 
Move the ball 
Bounce off the walls 
Game over 
Build the brick field 
Collision detection 
Track the score and win 
Mouse controls 
Finishing up 
Starting with pure JavaScript is the best way to get a solid knowledge of web game development. 
After that, you can pick any framework you like and use it for your projects. 
Frameworks are just tools built with the JavaScript language; so even if you plan on working with them, it’s good to learn about the language itself first to know what exactly is going on under the hood. 
Frameworks speed up development time and help take care of boring parts of the game, but if something is not working as expected, you can always try to debug that or just write your own solutions in pure JavaScript. 
Note: If you are interested in learning about 2D web game development using a game library, consult this series’ counterpart, 2D breakout game using Phaser. 
Note: This series of articles can be used as material for hands-on game development workshops. 
You can also make use of the Gamedev Canvas Content Kit based on this tutorial if you want to give a talk about game development in general. 
Next steps 
Ok, let’s get started! 
Head to the first chapter— Create the Canvas and draw on it. 
{{Next(“Games/Workflows/2D_Breakout_game_pure_JavaScript/Create_the_Canvas_and_draw_on_it”)}} 

{{GamesSidebar}} 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_pure_JavaScript/Track_the_score_and_win”, “Games/Workflows/2D_Breakout_game_pure_JavaScript/Finishing_up”)}} 
This is the 9th step out of 10 of the Gamedev Canvas tutorial. 
You can find the source code as it should look after completing this lesson at Gamedev-Canvas-workshop/lesson9.html. 
The game itself is actually finished, so let’s work on polishing it up. 
We have already added keyboard controls, but we could easily add mouse controls too. 
Listening for mouse movement 
Listening for mouse movement is even easier than listening for key presses: all we need is the listener for the {{domxref(“Element/mousemove_event”, “mousemove”)}} event. 
Add the following line in the same place as the other event listeners, just below the keyup event: 
document.addEventListener("mousemove", mouseMoveHandler, false); 
Anchoring the paddle movement to the mouse movement 
We can update the paddle position based on the pointer coordinates — the following handler function will do exactly that. 
Add the following function to your code, below the previous line you added: 
function mouseMoveHandler(e) { 
const relativeX = e.clientX - canvas.offsetLeft; 
if (relativeX > 0 && relativeX < canvas.width) { 
paddleX = relativeX - paddleWidth / 2; 
} 
} 
In this function we first work out a relativeX value, which is equal to the horizontal mouse position in the viewport (e.clientX) minus the distance between the left edge of the canvas and left edge of the viewport (canvas.offsetLeft) — effectively this is equal to the distance between the canvas left edge and the mouse pointer. 
If the relative X pointer position is greater than zero and lower than the Canvas width, the pointer is within the Canvas boundaries, and the paddleX position (anchored on the left edge of the paddle) is set to the relativeX value minus half the width of the paddle, so that the movement will actually be relative to the middle of the paddle. 
The paddle will now follow the position of the mouse cursor, but since we’re restricting the movement to the size of the Canvas, it won’t disappear completely off either side. 
Compare your code 
This is the latest state of the code to compare against: 
{{JSFiddleEmbed(“https://jsfiddle.net/raymondjplante/vt7y5hcp/”,““,”395”)}} 
Note: Try adjusting the boundaries of the paddle movement, so the whole paddle will be visible on both edges of the Canvas instead of only half of it. 
Next steps 
Now we’ve got a complete game we’ll finish our series of lessons with some more small tweaks — Finishing up. 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_pure_JavaScript/Track_the_score_and_win”, “Games/Workflows/2D_Breakout_game_pure_JavaScript/Finishing_up”)}} 

{{PreviousNext(“Games/Workflows/2D_Breakout_game_pure_JavaScript/Create_the_Canvas_and_draw_on_it”, “Games/Workflows/2D_Breakout_game_pure_JavaScript/Bounce_off_the_walls”)}} 
This is the 2nd step out of 10 of the Gamedev Canvas tutorial. 
You can find the source code as it should look after completing this lesson at Gamedev-Canvas-workshop/lesson2.html. 
You already know how to draw a ball from working through the previous article, so now let’s make it move. 
Technically, we will be painting the ball on the screen, clearing it and then painting it again in a slightly different position every frame to make the impression of movement — just like how movement works with the movies. 
Defining a drawing loop 
To keep constantly updating the canvas drawing on each frame, we need to define a drawing function that will run over and over again, with a different set of variable values each time to change sprite positions, etc. 
You can run a function over and over again using a JavaScript timing function such as {{domxref(“setInterval()”)}} or {{domxref(“window.requestAnimationFrame()”, “requestAnimationFrame()”)}}. 
Delete all the JavaScript you currently have inside your HTML file except for the first two lines, and add the following below them. The draw() function will be executed within setInterval every 10 milliseconds: 
function draw() { 
// drawing code 
} 
setInterval(draw, 10); 
Thanks to the infinite nature of setInterval the draw() function will be called every 10 milliseconds forever, or until we stop it. 
Now, let’s draw the ball — add the following inside your draw() function: 
ctx.beginPath(); 
ctx.arc(50, 50, 10, 0, Math.PI * 2); 
ctx.fillStyle = "#0095DD"; 
ctx.fill(); 
ctx.closePath(); 
Try your updated code now — the ball should be repainted on every frame. 
Making it move 
You won’t notice the ball being repainted constantly at the moment, as it’s not moving. 
Let’s change that. 
First, instead of a hardcoded position at (50,50) we will define a starting point at the bottom center part of the Canvas in variables called x and y, then use those to define the position the circle is drawn at. 
First, add the following two lines above your draw() function, to define x and y: 
let x = canvas.width / 2; 
let y = canvas.height - 30; 
Next update the draw() function to use the x and y variables in the {{domxref(“CanvasRenderingContext2D.arc()”,“arc()”)}} method, as shown in the following highlighted line: 
function draw() { 
ctx.beginPath(); 
ctx.arc(x, y, 10, 0, Math.PI * 2); 
ctx.fillStyle = "#0095DD"; 
ctx.fill(); 
ctx.closePath(); 
} 
Now comes the important part: we want to add a small value to x and y after every frame has been drawn to make it appear that the ball is moving. 
Let’s define these small values as dx and dy and set their values to 2 and -2 respectively. 
Add the following below your x and y variable definitions: 
let dx = 2; 
let dy = -2; 
The last thing to do is to update x and y with our dx and dy variable on every frame, so the ball will be painted in the new position on every update. 
Add the following two new lines indicated below to your draw() function: 
function draw() { 
ctx.beginPath(); 
ctx.arc(x, y, 10, 0, Math.PI * 2); 
ctx.fillStyle = "#0095DD"; 
ctx.fill(); 
ctx.closePath(); 
x += dx; 
y += dy; 
} 
Save your code again and try it in your browser. 
This works OK, although it appears that the ball is leaving a trail behind it: 
Clearing the canvas before each frame 
The ball is leaving a trail because we’re painting a new circle on every frame without removing the previous one. 
Don’t worry, because there’s a method to clear canvas content: {{domxref(“CanvasRenderingContext2D.clearRect()”,“clearRect()”)}}. 
This method takes four parameters: the x and y coordinates of the top left corner of a rectangle, and the x and y coordinates of the bottom right corner of a rectangle. 
The whole area covered by this rectangle will be cleared of any content previously painted there. 
Add the following highlighted new line to the draw() function: 
function draw() { 
ctx.clearRect(0, 0, canvas.width, canvas.height); 
ctx.beginPath(); 
ctx.arc(x, y, 10, 0, Math.PI * 2); 
ctx.fillStyle = "#0095DD"; 
ctx.fill(); 
ctx.closePath(); 
x += dx; 
y += dy; 
} 
Save your code and try again, and this time you’ll see the ball move without a trail. 
Every 10 milliseconds the canvas is cleared, the blue circle (our ball) will be drawn on a given position and the x and y values will be updated for the next frame. 
Cleaning up our code 
We will be adding more and more commands to the draw() function in the next few articles, so it’s good to keep it as simple and clean as possible. 
Let’s start by moving the ball drawing code to a separate function. 
Replace the existing draw() function with the following two functions: 
function drawBall() { 
ctx.beginPath(); 
ctx.arc(x, y, 10, 0, Math.PI * 2); 
ctx.fillStyle = "#0095DD"; 
ctx.fill(); 
ctx.closePath(); 
} 
function draw() { 
ctx.clearRect(0, 0, canvas.width, canvas.height); 
drawBall(); 
x += dx; 
y += dy; 
} 
Compare your code 
You can check the finished code for this article for yourself in the live demo below, and play with it to understand better how it works: 
{{JSFiddleEmbed(“https://jsfiddle.net/end3r/3x5foxb1/”,““,”395”)}} 
Note: Try changing the speed of the moving ball, or the direction it moves in. 
Next steps 
We’ve drawn our ball and gotten it moving, but it keeps disappearing off the edge of the canvas. 
In the third chapter we’ll explore how to make it bounce off the walls. 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_pure_JavaScript/Create_the_Canvas_and_draw_on_it”, “Games/Workflows/2D_Breakout_game_pure_JavaScript/Bounce_off_the_walls”)}} 

{{GamesSidebar}} 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_pure_JavaScript/Bounce_off_the_walls”, “Games/Workflows/2D_Breakout_game_pure_JavaScript/Game_over”)}} 
This is the 4th step out of 10 of the Gamedev Canvas tutorial. 
You can find the source code as it should look after completing this lesson at Gamedev-Canvas-workshop/lesson4.html. 
The ball is bouncing off the walls freely and you can watch it indefinitely, but currently there’s no interactivity. 
It’s not a game if you cannot control it! 
So let’s add some user interaction: a controllable paddle. 
Defining a paddle to hit the ball 
So, we need a paddle to hit the ball. Let’s define a few variables for that. 
Add the following variables near the top of your code, beside your other variables: 
const paddleHeight = 10; 
const paddleWidth = 75; 
let paddleX = (canvas.width - paddleWidth) / 2; 
Here we’re defining the height and width of the paddle and its starting point on the x axis for use in calculations further on down the code. 
Let’s create a function that will draw the paddle on the screen. 
Add the following just below your drawBall() function: 
function drawPaddle() { 
ctx.beginPath(); 
ctx.rect(paddleX, canvas.height - paddleHeight, paddleWidth, paddleHeight); 
ctx.fillStyle = "#0095DD"; 
ctx.fill(); 
ctx.closePath(); 
} 
Allowing the user to control the paddle 
We can draw the paddle wherever we want, but it should respond to the user’s actions. 
It’s time to implement some keyboard controls. 
We will need the following: 
Two variables for storing information on whether the left or right control button is pressed. 
Two event listeners for keydown and keyup events. 
We want to run some code to handle the paddle movement when the buttons are pressed. 
Two functions handling the keydown and keyup events the code that will be run when the buttons are pressed. 
The ability to move the paddle left and right 
Pressed buttons can be defined and initialized with boolean variables like in the example. 
Add these lines somewhere near the rest of your variables: 
let rightPressed = false; 
let leftPressed = false; 
The default value for both is false because at the beginning the control buttons are not pressed. 
To listen for key presses, we will set up two event listeners. 
Add the following lines just above the setInterval() line at the bottom of your JavaScript: 
document.addEventListener("keydown", keyDownHandler, false); 
document.addEventListener("keyup", keyUpHandler, false); 
When the keydown event is fired on any of the keys on your keyboard (when they are pressed), the keyDownHandler() function will be executed. 
The same pattern is true for the second listener: keyup events will fire the keyUpHandler() function (when the keys stop being pressed). 
Add these to your code now, below the addEventListener() lines: 
function keyDownHandler(e) { 
if (e.key === "Right" || e.key === "ArrowRight") { 
rightPressed = true; 
} else if (e.key === "Left" || e.key === "ArrowLeft") { 
leftPressed = true; 
} 
} 
function keyUpHandler(e) { 
if (e.key === "Right" || e.key === "ArrowRight") { 
rightPressed = false; 
} else if (e.key === "Left" || e.key === "ArrowLeft") { 
leftPressed = false; 
} 
} 
When we press a key down, this information is stored in a variable. 
The relevant variable in each case is set to true. 
When the key is released, the variable is set back to false. 
Both functions take an event as a parameter, represented by the e variable. 
From that you can get useful information: the key holds the information about the key that was pressed. 
Most browsers use ArrowRight and ArrowLeft for the left/right cursor keys, but we need to also include Right and Left checks to support IE/Edge browsers. 
If the left cursor is pressed, then the leftPressed variable is set to true, and when it is released, the leftPressed variable is set to false. 
The same pattern follows with the right cursor and the rightPressed variable. 
The paddle moving logic 
We’ve now set up the variables for storing the info about the pressed keys, event listeners, and relevant functions. 
Next we’ll get into the code to use all the things we just set up and to move the paddle on the screen. 
Inside the draw() function, we will check if the left or right cursor keys are pressed when each frame is rendered. 
Our code might look like this: 
if (rightPressed) { 
paddleX += 7; 
} else if (leftPressed) { 
paddleX -= 7; 
} 
If the left cursor is pressed, the paddle will move seven pixels to the left, and if the right cursor is pressed, the paddle will move seven pixels to the right. 
This currently works, but the paddle disappears off the edge of the canvas if we hold either key for too long. 
We could improve that and move the paddle only within the boundaries of the canvas by changing the code like this: 
if (rightPressed) { 
paddleX = Math.min(paddleX + 7, canvas.width - paddleWidth); 
} else if (leftPressed) { 
paddleX = Math.max(paddleX - 7, 0); 
} 
The paddleX position we’re using will move between 0 on the left side of the canvas and canvas.width-paddleWidth on the right-hand side, which will work exactly as we want it to. 
Add the above code block into the draw() function at the bottom, just above the closing curly brace. 
The only thing left to do now is call the drawPaddle() function from within the draw() function, to actually print it on the screen. 
Add the following line inside your draw() function, just below the line that calls drawBall(): 
drawPaddle(); 
Compare your code 
Here’s the working code for you to compare yours against: 
{{JSFiddleEmbed(“https://jsfiddle.net/L9xfn4up/1/”,““,”395”)}} 
Note: Try making the paddle move faster or slower, or change its size. 
Next steps 
Now we have something resembling a game. 
The only trouble now is that you can just continue hitting the ball with the paddle forever. 
This will all change in the fifth chapter, Game over, when we start to add in an endgame state for our game. 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_pure_JavaScript/Bounce_off_the_walls”, “Games/Workflows/2D_Breakout_game_pure_JavaScript/Game_over”)}} 

{{GamesSidebar}} 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_pure_JavaScript/Collision_detection”, “Games/Workflows/2D_Breakout_game_pure_JavaScript/Mouse_controls”)}} 
This is the 8th step out of 10 of the Gamedev Canvas tutorial. 
You can find the source code as it should look after completing this lesson at Gamedev-Canvas-workshop/lesson8.html. 
Destroying the bricks is really cool, but to be even more awesome the game could award points for every brick a user hits, and keep count of the total score. 
Counting the score 
If you can see your score throughout the game, eventually you can impress your friends. 
You need a variable to record the score. 
Add the following into your JavaScript, after the rest of your variables: 
let score = 0; 
You also need a drawScore() function, to create and update the score display. 
Add the following after the collisionDetection() function: 
function drawScore() { 
ctx.font = "16px Arial"; 
ctx.fillStyle = "#0095DD"; 
ctx.fillText(`Score: ${score}`, 8, 20); 
} 
Drawing text on a canvas is similar to drawing a shape. 
The font definition looks exactly like the one in CSS — you can set the size and font type in the {{domxref(“CanvasRenderingContext2D.font”,“font()”)}} method. 
Then use {{domxref(“CanvasRenderingContext2D.fillStyle()”,“fillStyle()”)}} to set the color of the font and {{domxref(“CanvasRenderingContext2D.fillText”,“fillText()”)}} to set the actual text that will be placed on the canvas, and where it will be placed. 
The first parameter is the text itself — the code above shows the current number of points — and the last two parameters are the coordinates where the text will be placed on the canvas. 
To award a score each time a brick is hit, add a line to the collisionDetection() function to increment the value of the score variable each time a collision is detected. 
Add the following highlighted line to your code: 
function collisionDetection() { 
for (let c = 0; c < brickColumnCount; c++) { 
for (let r = 0; r < brickRowCount; r++) { 
const b = bricks[c][r]; 
if (b.status === 1) { 
if ( 
x > b.x && 
x < b.x + brickWidth && 
y > b.y && 
y < b.y + brickHeight 
) { 
dy = -dy; 
b.status = 0; 
score++; 
} 
} 
} 
} 
} 
Calling drawScore() from the draw() function keeps the score up to date with every new frame — add the following line inside draw(), just below the drawPaddle() call: 
drawScore(); 
Displaying a winning message when all bricks have been destroyed 
Collecting the points works well, but you won’t be adding them forever — what about when all the bricks have been destroyed? 
It’s the main purpose of the game after all, so you should display a winning message if all available points have been collected. 
Add the following highlighted section into your collisionDetection() function: 
function collisionDetection() { 
for (let c = 0; c < brickColumnCount; c++) { 
for (let r = 0; r < brickRowCount; r++) { 
const b = bricks[c][r]; 
if (b.status === 1) { 
if ( 
x > b.x && 
x < b.x + brickWidth && 
y > b.y && 
y < b.y + brickHeight 
) { 
dy = -dy; 
b.status = 0; 
score++; 
if (score === brickRowCount * brickColumnCount) { 
alert("YOU WIN, CONGRATULATIONS!" 
); 
document.location.reload(); 
} 
} 
} 
} 
} 
} 
Thanks to this, your users can actually win the game when they destroy all the bricks, which is quite important when it comes to games. 
The document.location.reload() function reloads the page and starts the game again once the alert button is clicked. 
Compare your code 
The latest code looks (and works) like this, in case you want to compare and contrast it with yours: 
{{JSFiddleEmbed(“https://jsfiddle.net/raymondjplante/b3z2Lpu9/”,““,”395”)}} 
Note: Try adding more points per brick hit, print out the number of collected points in the end game alert box. 
Next steps 
The game looks pretty good at this point. 
In the next lesson you will broaden the game’s appeal by adding Mouse controls. 
{{PreviousNext(“Games/Workflows/2D_Breakout_game_pure_JavaScript/Collision_detection”, “Games/Workflows/2D_Breakout_game_pure_JavaScript/Mouse_controls”)}} 

{{GamesSidebar}} 
This page contains multiple tutorial series that highlight different workflows for effectively creating different types of web games. 
2D breakout game using pure JavaScript 
: In this step-by-step tutorial you’ll implement a simple breakout clone using pure JavaScript. 
Along the way you will learn the basics of using the {{htmlelement(“canvas”)}} element to implement fundamental game mechanics like rendering and moving images, collision detection, control mechanisms, and winning and losing states. 
2D breakout game using Phaser 
: In this step-by-step tutorial you’ll implement the same breakout clone as the previous tutorial series, except that this time you’ll do it using the Phaser HTML game framework. 
This idea here is to teach some of the fundamentals (and advantages) of working with frameworks, along with fundamental game mechanics. 
2D maze game with device orientation 
: This tutorial shows how to create a 2D maze game using HTML, incorporating fundamentals such as collision detection and sprite placement on a {{htmlelement(“canvas”)}}. 
This is a mobile game that uses the Device Orientation and Vibration APIs to enhance the gameplay and is built using the Phaser framework. 
2D platform game with Phaser 
: This tutorial series shows how to create a simple platform game using Phaser, covering fundamentals such as sprites, collisions, physics, collectables, and more. 

{{GlossarySidebar}} 
Abstraction in {{Glossary(“computer programming”)}} is a way to reduce complexity and allow efficient design and implementation in complex software systems. 
It hides the technical complexity of systems behind simpler {{Glossary(“API”, “APIs”)}}. 
Advantages of Data Abstraction 
Helps the user to avoid writing low-level code. 
Avoids code duplication and increases reusability. 
Can change the internal implementation of a class independently without affecting the user. 
Helps to increase the security of an application or program as only important details are provided to the user. 
Example 
class ImplementAbstraction { 
// method to set values of internal members 
set(x, y) { 
this.a = x; 
this.b = y; 
} 
display() { 
console.log(`a = ${this.a}`); 
console.log(`b = ${this.b}`); 
} 
} 
const obj = new ImplementAbstraction(); 
obj.set(10, 20); 
obj.display(); 
// a = 10 
// b = 20 
See also 
Abstraction on Wikipedia 

{{GlossarySidebar}} 
An accent is a typically bright color that contrasts with the more utilitarian background and foreground colors within a color scheme. 
These are present in the visual style of many platforms (though not all). 
On the web, an accent is sometimes used in {{HTMLElement(“input”)}} elements for the active portion of the control, for instance, the background of a checked checkbox. 
See also 
CSS related to the accent 
You can set the color of the accent for a given element by setting the element’s CSS {{cssxref(“accent-color”)}} property to the appropriate {{cssxref(“<color>”)}} value. 

{{GlossarySidebar}} 
Web Accessibility (A11Y) refers to best practices for keeping a website usable despite physical and technical restrictions. 
Web accessibility is formally defined and discussed at the {{Glossary(“W3C”)}} through the {{Glossary(“WAI”,“Web Accessibility Initiative”)}} (WAI). 
See also 
Accessibility resources at MDN 
Learn accessibility on MDN 
ARIA documentation on MDN 
Web accessibility on Wikipedia 
Web Accessibility In Mind 
The W3C Web Accessibility Initiative 

{{GlossarySidebar}} 
Flash is an obsolete technology developed by Adobe for viewing expressive web applications, multimedia content, and streaming media. 
As of 2021, Flash is no longer supported by Adobe or any major web browsers. 
See also 
Adobe Flash end-of-life announcement 
Saying goodbye to Flash in Chrome 
Firefox Roadmap for Flash End-of-Life 
Microsoft Windows Flash Player removal 

{{GlossarySidebar}} 
Ajax, which initially stood for Asynchronous {{Glossary(“JavaScript”)}} And {{Glossary(“XML”)}}, is a programming practice of building complex, dynamic webpages using a technology known as {{Glossary(“XMLHttpRequest”)}}. 
Ajax allows you to collect data to update parts of the {{Glossary(“DOM”)}} of an {{Glossary(“HTML”)}} page without the need for a full page refresh. 
Ajax also lets you work asynchronously, meaning your code continues to run while the targeted part of your web page is trying to reload (compared to synchronously, which blocks your code from running until that part of your page is done reloading). 
With interactive websites and modern web standards, Ajax is performed using functions within JavaScript frameworks and the {{domxref(“Fetch API”)}} Standard. 
See also 
Ajax 
{{DOMxRef(“XMLHttpRequest”)}} 
{{DOMxRef(“Fetch API”)}} 
Using Fetch API 
AJAX on Wikipedia 

{{GlossarySidebar}} 
An algorithm is a self-contained series of instructions to perform a function. 
In other words, an algorithm is a means of describing a way to solve a problem so that it can be solved repeatedly, by humans or machines. 
Computer scientists compare the efficiency of algorithms through the concept of “Algorithmic Complexity” or “Big O” notation. 
For example: 
A cooking recipe is a simple algorithm for humans. 
A sorting algorithm is often used in computer programming to explain to a machine how to sort data. 
Common algorithms are Pathfinding algorithms such as the optimization Traveling Salesman Problem, Tree Traversal algorithms, and so on. 
There are also Machine Learning algorithms such as Linear Regression, Logistic Regression, Decision Tree, Random Forest, Support Vector Machine, Recurrent Neural Network (RNN), Long Short Term Memory (LSTM) Neural Network, Convolutional Neural Network (CNN), Deep Convolutional Neural Network, and so on. 
See also 
Algorithm on Wikipedia 
Explanations of sorting algorithms 
Explanations of algorithmic complexity 

{{GlossarySidebar}} 
Application-Layer Protocol Negotiation (ALPN) is a {{Glossary(“TLS”)}} extension (defined in RFC 7301) for identifying what application-layer protocol is negotiating the encrypted connection, without requiring additional round trips to do so. 
Protocol 
Identification sequence 
{{Glossary(“HTTP”, “HTTP/1.1”)}} 
0x68 0x74 0x74 0x70 0x2F 0x31 0x2E 0x31 (“http/1.1”) 
{{Glossary(“HTTP 2”, “HTTP/2”)}} 
0x68 0x32 (“h2”) 
HTTP/2 over cleartext {{Glossary(“TCP”)}} 
0x68 0x33 (“h3”) 
See also 
IANA registered ALPN identifiers 

{{GlossarySidebar}} 
An API (Application Programming Interface) is a set of features and rules that exist inside a software program (the application) enabling interaction with it through software - as opposed to a human user interface. 
The API can be seen as a simple contract (the interface) between the application offering it and other items, such as third-party software or hardware. 

{{GlossarySidebar}} 
Safari is a {{Glossary(“Browser”,“Web browser”)}} developed by Apple and bundled with macOS, iPadOS, and iOS. 
It’s based on the open-source WebKit engine. 
See also 
Safari on Wikipedia 
Safari on apple.com 
The WebKit project 
WebKit nightly build 
Reporting a bug for Safari 

{{GlossarySidebar}} 
An argument is a {{glossary(“value”)}} ({{Glossary(“primitive”)}} or {{Glossary(“object”)}}) passed as input to a {{Glossary(“function”)}}. 
For example: 
const argument1 = "Web"; 
// This function takes two values function example(parameter1, parameter2) { 
const argument1 = "foo"; 
function example(parameter) { 

{{GlossarySidebar}} 
ARIA (Accessible Rich {{glossary(“Internet”)}} Applications) is a {{Glossary(“W3C”)}} specification for adding semantics and other metadata to {{Glossary(“HTML”)}} to cater to users of assistive technology. 
For example, you could add the attribute role="alert" to a {{HTMLElement(“p”)}} {{glossary(“tag”)}} to notify a sight-challenged user that the information is important and time-sensitive (which you might otherwise convey through text color). 
See also 
ARIA 

{{GlossarySidebar}} 
.arpa (address and routing parameter area) is a {{glossary(“TLD”,“top-level domain”)}} in the Domain Name System (DNS) used for Internet infrastructure purposes, especially reverse DNS lookup (i.e., find the {{glossary(‘domain name’)}} for a given {{glossary(“IP address”)}}). 
See also 
{{Glossary(“ARPANET”)}} 
Official website 
.arpa on Wikipedia 

{{GlossarySidebar}} 
The ARPANET (Advanced Research Projects Agency NETwork) was an early computer network, constructed in 1969 as a robust medium to transmit sensitive military data and to connect leading research groups throughout the United States. 
ARPANET first ran NCP (Network Control Protocol) and subsequently the first version of the Internet protocol or {{glossary(“TCP”)}}/{{glossary(“IPv4”,“IP”)}} suite, making ARPANET a prominent part of the nascent {{glossary(“Internet”)}}. 
ARPANET was closed in early 1990. 
See also 
{{Glossary(“TCP”)}} 
ARPANET on Wikipedia 

{{GlossarySidebar}} 
An array is an ordered collection of data (either {{Glossary(“primitive”)}} or {{Glossary(“object”)}} depending upon the language). 
Arrays are used to store multiple values under a single variable name. A regular variable, on the other hand, can store only one value. 
Each item in an array has a number attached to it, called a numeric index, that allows you to access it. 
In JavaScript, arrays start at index zero and can be manipulated with various {{Glossary(“Method”, “methods”)}}. 
Arrays in JavaScript look like this: 
const myArray = [1, 2, 3, 4]; 
const barbieDollNamesArray = ["Barbie", "Ken", "Midge", "Allan", "Skipper"]; 
// Array indexes starts at 0. console.log(myArray[0]); // output: 1 

{{GlossarySidebar}} 
ASCII (American Standard Code for Information Interchange) is a character encoding standard of 128 7-bit used by computers for converting letters, numbers, punctuation, and control codes into digital form. 
{{Glossary(“UTF-8”)}} superseded ASCII on the Web in 2007. 
See also 
ASCII on Wikipedia 

{{GlossarySidebar}} 
The term asynchronous refers to two or more objects or events that do not exist or happen at the same time, that is, they are not {{glossary(“synchronous”)}} . 
When multiple related things happen without any being dependent on the completion of previous happenings, they are asynchronous. 
In networking and communications 
Asynchronous communication is a method of exchanging messages in which the sending, receiving, and processing of each message is not dependent on the sending, receipt, or processing of other messages. 
In asynchronous communication, each party receives and processes messages when convenient or possible to do so, rather than doing so immediately upon receipt. 
Additionally, messages may be sent without waiting for acknowledgement, with the understanding that if a problem occurs, the recipient will request corrections or otherwise handle the situation. 
Email is a type of asynchronous human communication. A sender sends an email. The recipient reads the email and responds to it (or not) at their convenience, not necessarily right away. 
All parties can continue to send and receive messages at any time. Emails don’t have to be scheduled in a particular sequence. 
In asynchronous software, making a request, such as to a server, does not block other processes while waiting for the response. The software can continue performing other tasks. 
For example, in promise-based APIs, {{JSxRef(“Promise”)}} objects are created for long operations. 
In software design 
Asynchronous software design expands upon the concept by building code that allows a program to ask that a task be performed alongside the original task (or tasks), without stopping to wait for the task to complete. 
When the secondary task is completed, the original task is notified using an agreed-upon mechanism so that it knows the work is done, and that the result, if any, is available. 
There are a number of programming techniques for implementing asynchronous software. 
See the article Asynchronous JavaScript for an introduction to them. 
See also 
Fetching data from the server (Learning Area) 
{{glossary(“Synchronous”)}} 

{{GlossarySidebar}} 
You may see attributes without the equals sign or a value. 
That is a shorthand for providing the empty string in HTML, or the attribute’s name in XML. <input required /> <!-- is the same as… --> <input required="" /> <!-- or --> <input required="required" /> Reflection of an attribute 
Attributes may be reflected into a particular property of the specific interface. It means that the value of the attribute can be read by accessing the property, and can be modified by setting the property to a different value. 
console.log(attr.value); 
See also 
HTML attribute reference 
Information about HTML’s global attributes 

{{GlossarySidebar}} 
Bandwidth is the measure of how much information can pass through a data connection in a given amount of time. 
It is usually measured in multiples of bits-per-second (bps), for example megabits-per-second (Mbps) or gigabits-per-second (Gbps). 
See also 
Bandwidth on Wikipedia 


{{GlossarySidebar}} 
The term baseline can have several meanings depending on the context. It may refer to: 
{{GlossaryDisambiguation}} 
See also 
Baseline on Wikipedia 

{{GlossarySidebar}} 
A Bézier curve (pronounced [bezje]) is a mathematically described curve used in computer graphics and animation. 
In vector images, they are used to model smooth curves that can be scaled indefinitely. 
The curve is defined by a set of control points with a minimum of two. 
Web related graphics and animations often use cubic Béziers, which are curves with four control points P0, P1, P2, and P3. 
To draw a quadratic Bézier curve, two imaginary lines are drawn, one from P0 to P1 and the other from P1 to P2. A third imaginary line is drawn with its starting point moving steadily on the first helper line and the end point on the second helper line. On this imaginary line a point is drawn from its starting point moving steadily to its end point. 
The curve this point describes is the Bézier curve. 
Drawing a Bézier curve 
See also 
Bézier curve on Wikipedia 
Cubic Bézier easing functions in CSS 
{{SVGAttr(“keySplines”)}} SVG attribute 

{{GlossarySidebar}} 
BiDi (BiDirectional) refers to a document containing both right-to-left and left-to-right text. 
Even when both directionalities occur in the same paragraph, the text in each language must appear in its proper directionality. 
See also 
Bi-directional text on Wikipedia 

{{GlossarySidebar}} 
In {{Glossary(“JavaScript”)}}, BigInt is a numeric data type that can represent integers in the arbitrary precision format. 
In other programming languages different numeric types can exist, for examples: Integers, Floats, Doubles, or Bignums. 
See also 
Numeric types on Wikipedia 
The JavaScript type: BigInt 
The JavaScript global object {{jsxref(“BigInt”)}} 

{{GlossarySidebar}} 
Blink is an open-source browser layout engine developed by Google as part of Chromium (and therefore part of {{glossary(“Google Chrome”, “Chrome”)}} as well). 
Specifically, Blink began as a fork of the WebCore library in {{glossary(“WebKit”)}}, which handles layout, rendering, and {{glossary(“DOM”)}}, but now stands on its own as a separate {{glossary(“rendering engine”)}}. See also 
Blink on Wikipedia 
FAQ on Blink 
Glossary {{glossary(“Google Chrome”)}} 
{{glossary(“Trident”)}} 
{{glossary(“WebKit”)}} 

{{GlossarySidebar}} 
A block cipher mode of operation, usually just called a “mode” in context, specifies how a block cipher should be used to encrypt or decrypt messages that are longer than the block size. 
Most symmetric-key algorithms currently in use are block ciphers: this means that they encrypt data a block at a time. 
The size of each block is fixed and determined by the algorithm: for example AES uses 16-byte blocks. 
Block ciphers are always used with a mode, which specifies how to securely encrypt messages that are longer than the block size. 
For example, AES is a cipher, while CTR, CBC, and GCM are all modes. 
Using an inappropriate mode, or using a mode incorrectly, can completely undermine the security provided by the underlying cipher. 

{{GlossarySidebar}} 

{{GlossarySidebar}} 
The term block can have several meanings depending on the context. 
It may refer to: 
{{GlossaryDisambiguation}} 

{{GlossarySidebar}} 
In CSS, content that participates in block layout is called block-level content. 
In a block layout, boxes are laid out one after the other, vertically, beginning at the top of a containing block. 
Each box’s left outer edge touches the left edge of the containing block. 
A block-level element always starts on a new line. 
In horizontal writing modes, like English or Arabic, it occupies the entire horizontal space of its parent element (container) and vertical space equal to the height of its contents, thereby creating a “block”. 
Note: The above behavior of block layout changes if the containing block’s writing-mode is set to value other than the default value. 
Note: HTML (HyperText Markup Language) elements historically were categorized as either “block-level” elements or “inline” elements. 
As a presentational characteristic, this is now specified by CSS. 
Examples 
In this example, two paragraph ({{HTMLElement(“p”)}}) elements are put in a {{HTMLElement(“div”)}}. 
<div> 
<p> This the first paragraph. 
The background color of these paragraphs have been colored to distinguish them from their parent element. 
</p> 
<p>This is the second paragraph.</p> 
</div> 
The paragraph({{HTMLElement(“p”)}}) elements are block-level by default. 
That is why they are displayed in block layout: 
css hidden p { background-color: #8abb55; } 
{{EmbedLiveSample(“Examples”)}} 
See also 
Inline-level content 
Block formatting context 
{{cssxref(“display”)}} 
writing-mode 

{{GlossarySidebar}} 
In {{glossary(“JavaScript”)}}, a block is a collection of related {{glossary(“statement”,“statements”)}} enclosed in braces (“{}”). 
For example, you can put a block of statements after an {{jsxref(“Statements/if…else”,“if (condition)”)}} block, indicating that the interpreter should run the code inside the block if the condition is true, or skip the whole block if the condition is false. 
See also 
JavaScript block statement 

{{GlossarySidebar}} 
In computer science, a Boolean is a logical data type that can have only the values true or false. 
For example, in JavaScript, Boolean conditionals are often used to decide which sections of code to execute (such as in if statements) or repeat (such as in for loops). 
/* JavaScript if statement */ 
if (boolean conditional) { 
// code to execute if the conditional is true 
} 
if (boolean conditional) { 
console.log("boolean conditional resolved to true"); 
} else { 
console.log("boolean conditional resolved to false"); 
} 
/* JavaScript for loop */ 
for (control variable; boolean conditional; counter) { 
// code to execute repeatedly if the conditional is true 
} 
The Boolean value is named after English mathematician George Boole, who pioneered the field of mathematical logic. 
Above is a general introduction. 
The term Boolean can have more specific meanings depending on the context. 
It may refer to: 
{{GlossaryDisambiguation}} 
See also Boolean on Wikipedia 

{{GlossarySidebar}} 
Brotli is a general-purpose lossless compression algorithm. 
It compresses data using a combination of a modern variant of the LZ77 algorithm, Huffman coding, and second-order context modeling, providing a compression ratio comparable to the best currently available general-purpose compression methods. 
Brotli provides better compression ratios than {{glossary(“GZip_compression”, “gzip”)}} and deflate speeds are comparable, but brotli compressing is a slower process than Gzip compression, so gzip may be a better option for the compression of non-{{glossary(“Cache”, “cacheable”)}} content. 
Brotli is compatible with most modern browsers, but you may want to consider a fallback. 
See also 
brotli.org 
Brotli GitHub repository 
Brotli on Wikipedia 
Brotli on Caniuse 

{{GlossarySidebar}} 
A Web browser or browser is a program that retrieves and displays pages from the {{Glossary(“World Wide Web”,“Web”)}}, and lets users access further pages through {{Glossary(“hyperlink”,“hyperlinks”)}}. 
A browser is the most familiar type of {{Glossary(“user agent”)}}. 
See also 
Web browser on Wikipedia 
{{Glossary(“user agent”)}} (Glossary) 
{{HTTPHeader(“User-agent”)}} (HTTP Header) 
Download a browser 
Google Chrome 
Microsoft Edge 
Opera Browser 

{{GlossarySidebar}} 
A browsing context is an environment in which a browser displays a {{domxref(“Document”)}}. 
In modern browsers, it usually is a tab, but can be a window or even only parts of a page, like a frame or an iframe. 
Each browsing context has an origin (that of the active document) and an ordered history of previously displayed documents. 
Communication between browsing contexts is severely constrained. Between browsing contexts of the same origin, a {{domxref(“BroadcastChannel”)}} can be opened and used. 
See also 
See {{glossary(“origin”)}} 

{{GlossarySidebar}} 
A buffer is a storage in physical memory used to temporarily store data while it is being transferred from one place to another. 
See also 
Data buffer on Wikipedia 

{{GlossarySidebar}} 
A cacheable response is an HTTP response that can be cached, that is stored to be retrieved and used later, saving a new request to the server. 
Not all HTTP responses can be cached, these are the following constraints for an HTTP response to be cached: 
The method used in the request is itself cacheable, that is either a {{HTTPMethod(“GET”)}} or a {{HTTPMethod(“HEAD”)}} method. 
A response to a {{HTTPMethod(“POST”)}} or {{HTTPMethod(“PATCH”)}} request can also be cached if freshness is indicated and the {{HTTPHeader(“Content-Location”)}} header is set, but this is rarely implemented. 
For example, Firefox does not support it (Firefox bug 109553). 
Other methods, like {{HTTPMethod(“PUT”)}} or {{HTTPMethod(“DELETE”)}} are not cacheable and their result cannot be cached. 
The status code of the response is known by the application caching, and it is considered cacheable. 
The following status code are cacheable: {{HTTPStatus(“200”)}}, {{HTTPStatus(“203”)}}, {{HTTPStatus(“204”)}}, {{HTTPStatus(“206”)}}, {{HTTPStatus(“300”)}}, {{HTTPStatus(“301”)}}, {{HTTPStatus(“404”)}}, {{HTTPStatus(“405”)}}, {{HTTPStatus(“410”)}}, {{HTTPStatus(“414”)}}, and {{HTTPStatus(“501”)}}. 
There are specific headers in the response, like {{HTTPHeader(“Cache-Control”)}}, that prevents caching. 
Note that some non-cacheable requests/responses to a specific URI may invalidate previously cached responses on the same URI. 
For example, a {{HTTPMethod(“PUT”)}} to pageX.html will invalidate all cached {{HTTPMethod(“GET”)}} or {{HTTPMethod(“HEAD”)}} requests to the same URI. 
When both, the method of the request and the status of the response, are cacheable, the response to the request can be cached: 
GET /pageX.html HTTP/1.1 
(…) 
200 OK 
(…) 
A {{HTTPMethod(“PUT”)}} request cannot be cached. 
Moreover, it invalidates cached data for request to the same URI done via {{HTTPMethod(“HEAD”)}} or {{HTTPMethod(“GET”)}}: 
PUT /pageX.html HTTP/1.1 
(…) 
200 OK 
(…) 
A specific {{HTTPHeader(“Cache-Control”)}} header in the response can prevent caching: 
GET /pageX.html HTTP/1.1 
(…) 
200 OK 
Cache-Control: no-cache 
(…) 
See also 
Details about methods and caching are provided in the HTTP specification. 
Description of common cacheable methods: {{HTTPMethod(“GET”)}}, {{HTTPMethod(“HEAD”)}} 
Description of common non-cacheable methods: {{HTTPMethod(“PUT”)}}, {{HTTPMethod(“DELETE”)}}, often {{HTTPMethod(“POST”)}} 

{{GlossarySidebar}} 
A cache (web cache or HTTP cache) is a component that stores HTTP responses temporarily so that it can be used for subsequent HTTP requests as long as it meets certain conditions. 
See also 
Web cache on Wikipedia 

{{GlossarySidebar}} 
CalDAV (Calendaring extensions to {{Glossary(“WebDAV”)}}) is a {{glossary(“protocol”)}} standardized by the {{Glossary(“IETF”)}} and used to remotely access calendar data from a {{glossary(“server”)}}. 
See also 
CalDAV on Wikipedia 
RFC 4791: Calendaring extensions to WebDAV (CalDAV) 
RFC 6638: Scheduling Extensions to CalDAV 

{{GlossarySidebar}} 
A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action. 
There are two ways in which the callback may be called: synchronous and asynchronous. 
Consider the following example: 
let value = 1; 
doSomething(() => { 
value = 2; 
}); 
console.log(value); 
If doSomething calls the callback synchronously, then the last statement would log 2 because value = 2 is synchronously executed; otherwise, if the callback is asynchronous, the last statement would log 1 because value = 2 is only executed after the console.log statement. 
Examples of synchronous callbacks include the callbacks passed to {{jsxref(“Array.prototype.map()”)}}, {{jsxref(“Array.prototype.forEach()”)}}, etc. 
Examples of asynchronous callbacks include the callbacks passed to setTimeout() and {{jsxref(“Promise.prototype.then()”)}}. 
The Using promises guide has more information on the timing of asynchronous callbacks. 
See also 
Callback on Wikipedia 

{{GlossarySidebar}} 
A call stack is a mechanism for an interpreter (like the JavaScript interpreter in a web browser) to keep track of its place in a script that calls multiple {{glossary(“function”,“functions”)}} — what function is currently being run and what functions are called from within that function, etc. 
When a script calls a function, the interpreter adds it to the call stack and then starts carrying out the function. 
Any functions that are called by that function are added to the call stack further up, and run where their calls are reached. 
When the current function is finished, the interpreter takes it off the stack and resumes execution where it left off in the last code listing. 
If the stack takes up more space than it was assigned, a “stack overflow” error is thrown. Example 
function greeting() { 
// [1] Some code here 
sayHi(); 
// [2] Some code here 
} 
function sayHi() { 
return "Hi!" 
; 
} 
// Invoke the `greeting` function 
greeting(); 
// [3] Some code here 
The code above would be executed like this: 
Ignore all functions, until it reaches the greeting() function invocation. 
Add the greeting() function to the call stack list. 
Note: Call stack list: - greeting 
Execute all lines of code inside the greeting() function. 
Get to the sayHi() function invocation. 
Add the sayHi() function to the call stack list. 
Note: Call stack list: - sayHi - greeting 
Execute all lines of code inside the sayHi() function, until reaches its end. 
Return execution to the line that invoked sayHi() and continue executing the rest of the greeting() function. 
Delete the sayHi() function from our call stack list. 
Note: Call stack list: - greeting 
Delete the greeting() function from the call stack list. 
In summary, then, we start with an empty Call Stack. 
Whenever we invoke a function, it is automatically added to the Call Stack. 
Once the function has executed all of its code, it is automatically removed from the Call Stack. 
Ultimately, the Stack is empty again. 
See also 
Call stack on Wikipedia 
Glossary 
{{Glossary(“Call stack”)}} 
{{Glossary(“Function”)}} 

{{GlossarySidebar}} 
It is a low level, procedural model that updates a bitmap and does not have a built-in scene graph. It provides an empty graphic zone on which specific {{Glossary(“JavaScript”)}} {{Glossary(“API”,“APIs”)}} can draw (such as Canvas 2D or {{Glossary(“WebGL”)}}). 
See also 
Canvas on Wikipedia 
The Canvas tutorial on MDN 
The HTML {{HTMLElement(“canvas”)}} element on MDN 
The Canvas general documentation on MDN 
{{domxref(“CanvasRenderingContext2D”)}}: The canvas 2D drawing API 
The Canvas 2D API specification 

{{GlossarySidebar}} 
Card sorting is a simple technique used in {{glossary(“Information architecture”)}} whereby people involved in the design of a website (or other type of product) are invited to write down the content / services / features they feel the product should contain, and then organize those features into categories or groupings. 
This can be used for example to work out what should go on each page of a website. 
The name comes from the fact that often card sorting is carried out by literally writing the items to sort onto cards, and then arranging the cards into piles. 
See also 
Card sorting on Wikipedia 

{{GlossarySidebar}} 
A CDN (Content Delivery Network) is a group of servers spread out over many locations. 
These servers store duplicate copies of data so that servers can fulfill data requests based on which servers are closest to the respective end-users. 
CDNs make for fast service less affected by high traffic. 
CDNs are used widely for delivering stylesheets and JavaScript files (static assets) of libraries like Bootstrap, jQuery etc. 
Using CDN for those library files is preferable for a number of reasons: 
Serving libraries’ static assets over CDN lowers the request burden on an organization’s own servers. 
Most CDNs have servers all over the globe, so CDN servers may be geographically nearer to your users than your own servers. 
Geographical distance affects latency proportionally. 
CDNs are already configured with proper cache settings. 
Using a CDN saves further configuration for static assets on your own servers. 

{{GlossarySidebar}} 
Certified means that an application, content or data transmission has successfully undergone evaluation by professionals with expertise in the relevant field, thereby indicating completeness, security and trustworthiness. 
For details on certification in {{glossary(“Cryptography”)}}, please refer to {{glossary(“Digital Certificate”)}}. 
See also 
Certification on Wikipedia 

{{GlossarySidebar}} 
In security protocols, a challenge is some data sent to the client by the server in order to generate a different response each time. 
Challenge-response protocols are one way to fight against {{glossary(“replay attack”, “replay attacks”)}} where an attacker listens to the previous messages and resends them at a later time to get the same credentials as the original message. 
The HTTP authentication protocol is challenge-response based, though the “Basic” protocol isn’t using a real challenge (the realm is always the same). 
See also 
Challenge-response authentication on Wikipedia. 

{{GlossarySidebar}} 
An encoding defines a mapping between bytes and text. 
A sequence of bytes allows for different textual interpretations. 
By specifying a particular encoding (such as UTF-8), we specify how the sequence of bytes is to be interpreted. 
For example, in HTML we normally declare a character encoding of UTF-8, using the following line: 
<meta charset="utf-8" /> 
This ensures that you can use characters from just about any human language in your HTML document, and they will display reliably. 
See also 
Character encoding on W3C 
Character encoding on Wikipedia 

{{GlossarySidebar}} 
A character is either a symbol (letters, numbers, punctuation) or non-printing “control” (e.g., carriage return or soft hyphen). {{glossary(“UTF-8”)}} is the most common character set and includes the graphemes of the most popular human languages. 
See also 
Character (computing) on Wikipedia 
Character encoding on Wikipedia 
{{glossary(“ASCII”)}} 
UTF-8 on Wikipedia 
Unicode on Wikipedia 

{{GlossarySidebar}} 
A character set is an encoding system to let computers know how to recognize {{Glossary(“Character”)}}, including letters, numbers, punctuation marks, and whitespace. 

{{GlossarySidebar}} 
In a browser, the chrome is any visible aspect of a browser aside from the webpages themselves (e.g., toolbars, menu bar, tabs). 
This is not to be confused with the {{glossary(“Google Chrome”)}} browser. 
See also 
Browser and GUI Chrome 

{{GlossarySidebar}} 
CIA (Confidentiality, Integrity, Availability) (also called the CIA triad or AIC triad) is a model that guides an organization’s policies for information security. 
See also 
CIA on Wikipedia 

{{GlossarySidebar}} 
In {{glossary(“cryptography”)}}, a cipher is an algorithm that can {{glossary(“encryption”, “encode”)}} {{glossary(“Plaintext”)}} to make it unreadable, and to {{glossary(“decryption”, “decode”)}} it back. 
Ciphers were common long before the information age (e.g., substitution ciphers, transposition ciphers, and permutation ciphers), but none of them were cryptographically secure except for the one-time pad. 
Modern ciphers are designed to withstand {{glossary(“attack”, “attacks”)}} discovered by a {{glossary(“cryptanalysis”, “cryptanalyst”)}}. 
There is no guarantee that all attack methods have been discovered, but each algorithm is judged against known classes of attacks. 
Ciphers operate two ways, either as block ciphers on successive blocks, or buffers, of data, or as stream ciphers on a continuous data flow (often of sound or video). 
They also are classified according to how their {{glossary(“key”, “keys”)}} are handled: 
symmetric key algorithms use the same key to encode and decode a message. 
The key also must be sent securely if the message is to stay confidential. 
asymmetric key algorithms use a different key for encryption and decryption. 
See also 
Cipher on Wikipedia 
Encryption and Decryption 
MDN Web Docs Glossary 
{{Glossary(“Block cipher mode of operation”)}} 
{{Glossary(“Cipher”)}} 
{{Glossary(“Ciphertext”)}} 
{{Glossary(“Cipher suite”)}} 
{{Glossary(“Cryptanalysis”)}} 
{{Glossary(“Cryptography”)}} 
{{Glossary(“Decryption”)}} 
{{Glossary(“Encryption”)}} 
{{Glossary(“Key”)}} 
{{Glossary(“Plaintext”)}} 
{{Glossary(“Public-key cryptography”)}} 
{{Glossary(“Symmetric-key cryptography”)}} 

{{GlossarySidebar}} 
A cipher suite is a combination of a key exchange algorithm, authentication method, bulk encryption {{Glossary(“cipher”)}}, and message authentication code. 
In a {{Glossary(“cryptosystem”)}} like {{Glossary(“TLS”)}}, the client and server must agree on a cipher suite before they can begin communicating securely. 
A typical cipher suite looks like ECDHE_RSA_WITH_AES_128_GCM_SHA256 or ECDHE-RSA-AES128-GCM-SHA256, indicating: 
RSA for authentication 
AES-128 as the cipher, with Galois/Counter Mode (GCM) as the block cipher mode of operation 
SHA-256 as the hash-based message authentication code (HMAC) 
See also 
Mozilla recommended cipher suite choices for TLS 

{{GlossarySidebar}} 
In {{glossary(“cryptography”)}}, a ciphertext is a scrambled message that conveys information but is not legible unless {{glossary(“decryption”,“decrypted”)}} with the right {{glossary(“cipher”)}} and the right secret (usually a {{glossary(“key”)}}), reproducing the original {{glossary(“Plaintext”)}}. 
A ciphertext’s security, and therefore the secrecy of the contained information, depends on using a secure cipher and keeping the key secret. 
See also 
Ciphertext on Wikipedia 

{{GlossarySidebar}} 
In {{glossary(“OOP”,“object-oriented programming”)}}, a class defines an {{glossary(“object”,“object’s”)}} characteristics. 
Class is a template definition of an object’s {{glossary(“property”,“properties”)}} and {{glossary(“method”,“methods”)}}, the “blueprint” from which other more specific instances of the object are drawn. 
See also 
Classes in JavaScript 

{{GlossarySidebar}} 
A CMS (Content Management System) is software that allows users to publish, organize, change, or remove various kinds of content, not only text but also embedded images, video, audio, and interactive code. 
See also 
Content management system on Wikipedia 

{{GlossarySidebar}} 
A codec (a blend word derived from “coder-decoder”) is a program, algorithm, or device that encodes or decodes a data stream. 
A given codec knows how to handle a specific encoding or compression technology. 
See also 
Codec on Wikipedia 
Web video codec guide 
Web audio codec guide 
Guide to media types and formats on the web 

{{GlossarySidebar}} 
A code point is a number assigned to represent an abstract character in a system for representing text (such as Unicode). 
In Unicode, a code point is expressed in the form “U+1234” where “1234” is the assigned number. 
For example, the character “A” is assigned a code point of U+0041. 
Character encoding forms, such as UTF-8 and UTF-16, determine how a Unicode code point should be encoded as a sequence of bytes. 
Different encoding forms may encode the same code point as different byte sequences: for example, the Cyrillic character “Ф”, whose code point is U+0424, is encoded as 0xd0a4 in UTF-8 and as 0x0424 in UTF-16. 
See also 
The Unicode Standard: Code Points and Characters 

{{GlossarySidebar}} 
Code splitting is the practice of splitting the code a web application depends on — including its own code and any third-party dependencies — into separate bundles that can be loaded independently of each other. 
This allows an application to load only the code it actually needs at a given point in time, and load other bundles on demand. 
This approach is used to improve application performance, especially on initial load. 
Code splitting is a feature supported by bundlers like Webpack and Browserify which can create multiple bundles that can be dynamically loaded at runtime. 
See also 
Bundling 
Lazy loading 
HTTP/2 
Tree shaking 

{{GlossarySidebar}} 
A code unit is the basic component used by a character encoding system (such as UTF-8 or UTF-16). 
A character encoding system uses one or more code units to encode a Unicode {{Glossary(“code point”)}}. 
In UTF-16 (the encoding system used for JavaScript strings) code units are 16-bit values. 
This means that operations such as indexing into a string or getting the length of a string operate on these 16-bit units. 
These units do not always map 1-1 onto what we might consider characters. 
For example, characters with diacritics such as accents can sometimes be represented using two Unicode code points: 
const myString = "\u006E\u0303"; 
console.log(myString); // ñ 
console.log(myString.length); // 2 
Also, since not all of the code points defined by Unicode fit into 16 bits, many Unicode code points are encoded as a pair of UTF-16 code units, which is called a surrogate pair: 
const face = "🥵"; _ 
_tag__console.log(face.length); // 2 
The {{jsxref(“String/codePointAt”, “codePointAt()”)}} method of the JavaScript {{jsxref(“String”)}} object enables you to retrieve the Unicode code point from its encoded form: 

{{GlossarySidebar}} 
Compiling is the process of transforming a computer program written in a given {{Glossary(“computer programming”, “language”)}} into a set of instructions in another format or language. 
A compiler is a computer program to execute that task. 
Typically, a compiler transforms code written in a higher-level language such as C++ or Rust or Java into executable (runnable) code — so-called binary code or machine code. WebAssembly, for example, is a form of executable binary code that can be compiled from code written in C++, Rust, C#, Go, Swift, and several other languages and that can then be run on any web page, in any browser. 
Most compilers perform either ahead-of-time (AOT) compilation or just-in-time (JIT) compilation. 
The GNU gcc compiler is one well-known example of an AOT compiler. 
AOT compilers are typically invoked from the command line in a shell environment (from within a terminal or console) or within an {{Glossary(“IDE”)}}. 
For example, all major browsers now use JavaScript engines that have built-in JIT compilers. 
Compilers may also translate among higher-level languages — for example, from TypeScript to {{Glossary(“JavaScript”)}} — in which case, they are often sometimes referred to as transpilers. 
See also 
Compiling from C/C++ to WebAssembly 
Compiling from Rust to WebAssembly 
Wikipedia: Compiler 

{{GlossarySidebar}} 
The compile time is the time from when the program is first loaded until the program is {{Glossary(“parse”,“parsed”)}}. 
See also 
Compile time on Wikipedia 

{{GlossarySidebar}} 
Computer programming is a process of composing and organizing a collection of instructions. 
These tell a computer/software program what to do in a language which the computer understands. 
These instructions come in the form of many different languages such as C++, Java, JavaScript, HTML, Python, Ruby, and Rust. 
Using an appropriate language, you can program/create all sorts of software. 
For example, a program that helps scientists with complex calculations, a database that stores huge amounts of data, a website that allows people to download music, or animation software that allows people to create animated movies. 
See also 
Computer programming on Wikipedia 
List of Programming Languages: Wikipedia 

{{GlossarySidebar}} 
A constructor belongs to a particular class {{glossary(“object”)}} that is instantiated. 
The constructor initializes this object and can provide access to its private information. 
The concept of a constructor can be applied to most {{glossary(“OOP”,“object-oriented programming”)}} languages. 
Essentially, a constructor in {{glossary(“JavaScript”)}} is usually declared at the instance of a {{glossary(“class”)}}. 
Syntax 
// This is a generic default constructor class Default 
function Default() {} 
// This is an overloaded constructor class Overloaded // with parameter arguments 
function Overloaded(arg1, arg2, /* …, */ argN) {} 
To call the constructor of the class in JavaScript, use a new operator to assign a new {{glossary(“object reference”)}} to a {{glossary(“variable”)}}. 
function Default() {} 
// A new reference of a Default object assigned to a // local variable defaultReference 
const defaultReference = new Default(); 
See also 
Constructor on Wikipedia 
The constructor in object oriented programming for JavaScript on MDN 
New operator in JavaScript on MDN 

{{GlossarySidebar}} 
The most common examples of continuous media are audio and motion video. Continuous media can be real-time (interactive), where there is a “tight” timing relationship between source and sink, or streaming (playback), where the relationship is less strict. 
Continuous Media, therefore, identifies a context where the content is not broken up. 
It flows continuously. Web content displayed on a screen is continuous media, as is spoken content. 

{{GlossarySidebar}} 
The control flow is the order in which the computer executes statements in a script. 
Code is run in order from the first line in the file to the last line, unless the computer runs across the (extremely frequent) structures that change the control flow, such as conditionals and loops. 
For example, imagine a script used to validate user data from a webpage form. 
The script submits validated data, but if the user, say, leaves a required field empty, the script prompts them to fill it in. 
To do this, the script uses a {{Glossary(“Conditional”, “conditional”)}} structure or if...else, so that different code executes depending on whether the form is complete or not: 
if (isEmpty(field)) { 
promptUser(); 
} else { 
submitForm(); 
} 
A typical script in {{glossary(“JavaScript”)}} or {{glossary(“PHP”)}} (and the like) includes many control structures, including conditionals, {{Glossary(“Loop”, “loops”)}} and {{Glossary(“Function”, “functions”)}}. 
Parts of a script may also be set to execute when {{Glossary(“Event”, “events”)}} occur. 
For example, the above excerpt might be inside a function that runs when the user clicks the Submit button for the form. 
The function could also include a loop, which iterates through all of the fields in the form, checking each one in turn. 
Looking back at the code in the if and else sections, the lines promptUser and submitForm could also be calls to other functions in the script. 
As you can see, control structures can dictate complex flows of processing even with only a few lines of code. 
Control flow means that when you read a script, you must not only read from start to finish but also look at program structure and how it affects order of execution. 
See also 
Control flow on Wikipedia 
JavaScript Reference - Control flow on MDN 
Statements (Control flow) on MDN 

{{GlossarySidebar}} 
A cookie is a small piece of information left on a visitor’s computer by a website, via a web browser. 
Cookies are used to personalize a user’s web experience with a website. 
It may contain the user’s preferences or inputs when accessing that website. 
A user can customize their web browser to accept, reject, or delete cookies. 
Cookies can be set and modified at the server level using the Set-Cookie HTTP header, or with JavaScript using document.cookie. 
See also 
HTTP cookie on Wikipedia 

{{GlossarySidebar}} 
Copyleft is a term, usually referring to a license, used to indicate that such license requires that redistribution of said work is subject to the same license as the original. 
Examples of copyleft licenses are the GNU {{Glossary(“GPL”)}} (for software) and the Creative Commons SA (Share Alike) licenses (for works of art). 
See also 
Copyleft on Wikipedia 

{{GlossarySidebar}} 
CORS (Cross-Origin Resource Sharing) is a system, consisting of transmitting {{Glossary(“HTTP_header”, “HTTP headers”)}}, that determines whether browsers block frontend JavaScript code from accessing responses for cross-origin requests. 
The same-origin security policy forbids cross-origin access to resources. 
But CORS gives web servers the ability to say they want to opt into allowing cross-origin access to their resources. 
CORS headers 
{{HTTPHeader(“Access-Control-Allow-Origin”)}} 
: Indicates whether the response can be shared. 
{{HTTPHeader(“Access-Control-Allow-Credentials”)}} 
: Indicates whether or not the response to the request can be exposed when the credentials flag is true. 
{{HTTPHeader(“Access-Control-Allow-Headers”)}} 
: Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request. 
{{HTTPHeader(“Access-Control-Allow-Methods”)}} 
: Specifies the method or methods allowed when accessing the resource in response to a preflight request. 
{{HTTPHeader(“Access-Control-Expose-Headers”)}} 
: Indicates which headers can be exposed as part of the response by listing their names. 
{{HTTPHeader(“Access-Control-Max-Age”)}} 
: Indicates how long the results of a preflight request can be cached. 
{{HTTPHeader(“Access-Control-Request-Headers”)}} 
: Used when issuing a preflight request to let the server know which HTTP headers will be used when the actual request is made. 
{{HTTPHeader(“Access-Control-Request-Method”)}} 
: Used when issuing a preflight request to let the server know which HTTP method will be used when the actual request is made. 
{{HTTPHeader(“Origin”)}} 
: Indicates where a fetch originates from. {{HTTPHeader(“Timing-Allow-Origin”)}} 
See also 
Cross-Origin Resource Sharing (CORS) on MDN 
Cross-origin resource sharing on Wikipedia 
Fetch specification 

{{GlossarySidebar}} 

{{GlossarySidebar}} 
CR and LF are control characters or bytecode that can be used to mark a line break in a text file. 
CR = Carriage Return (\r, 0x0D in hexadecimal, 13 in decimal) — moves the cursor to the beginning of the line without advancing to the next line. 
LF = Line Feed (\n, 0x0A in hexadecimal, 10 in decimal) — moves the cursor down to the next line without returning to the beginning of the line. 
A CR immediately followed by a LF (CRLF, \r\n, or 0x0D0A) moves the cursor down to the next line and then to the beginning of the line. 
See also 
Newline on Wikipedia 
Carriage return on Wikipedia 

{{GlossarySidebar}} 
The cross axis in {{glossary(“flexbox”)}} runs perpendicular to the {{glossary(“main axis”)}}, therefore if your {{cssxref(“flex-direction”)}} is either row or row-reverse then the cross axis runs down the columns. 
The cross axis runs down the column 
If your main axis is column or column-reverse then the cross axis runs along the rows. 
The cross axis runs along the row. 
Alignment of items on the cross axis is achieved with the align-items property on the flex container or align-self property on individual items. 
In the case of a multi-line flex container, with additional space on the cross axis, you can use align-content to control the spacing of the rows. 
See also 
Property reference 
{{cssxref(“align-content”)}} 
{{cssxref(“align-items”)}} 
{{cssxref(“align-self”)}} 
{{cssxref(“flex-wrap”)}} 
{{cssxref(“flex-direction”)}} 
{{cssxref(“flex”)}} 
{{cssxref(“flex-basis”)}} 
{{cssxref(“flex-flow”)}} 
{{cssxref(“flex-grow”)}} 
{{cssxref(“flex-shrink”)}} 
{{cssxref(“justify-content”)}} 
{{cssxref(“order”)}} 
Further reading 
CSS Flexbox Guide: 
Basic Concepts of Flexbox 
Aligning items in a flex container 
Mastering wrapping of flex items 
Glossary 
{{Glossary(“Flex”)}} 
{{Glossary(“Flex Container”)}} 
{{Glossary(“Flex Item”)}} 
{{Glossary(“Grid”)}} 

{{GlossarySidebar}} 
Cross-site scripting (XSS) is a security exploit which allows an attacker to inject into a website malicious client-side code. 
This code is executed by the victims and lets the attackers bypass access controls and impersonate users. 
According to the Open Web Application Security Project, XSS was the seventh most common Web app vulnerability in 2017. 
These attacks succeed if the Web app does not employ enough validation or encoding. 
The user’s browser cannot detect the malicious script is untrustworthy, and so gives it access to any cookies, session tokens, or other sensitive site-specific information, or lets the malicious script rewrite the {{glossary(“HTML”)}} content. 
See also 
Type of Attacks: Cross-site scripting (XSS) 
Cross-site scripting on Wikipedia 
Cross-site scripting on OWASP 
Another article about Cross-site scripting 

{{GlossarySidebar}} 
CRUD (Create, Read, Update, Delete) is an acronym for ways one can operate on stored data. 
It is a mnemonic for the four basic functions of persistent storage. 
CRUD typically refers to operations performed in a database or datastore, but it can also apply to higher level functions of an application such as soft deletes where data is not actually deleted but marked as deleted via a status. 
See also 
CRUD on Wikipedia 

{{GlossarySidebar}} 
A cryptographic hash function, also sometimes called a digest function, is a {{glossary(“cryptography”, “cryptographic”)}} primitive transforming a message of arbitrary size into a message of fixed size, called a {{glossary(“digest”)}}. 
Cryptographic hash functions are used for authentication, {{Glossary(“digital signature”, “digital signatures”)}}, and {{Glossary(“HMAC”, “message authentication codes”)}}. 
To be used for cryptography, a hash function must have these qualities: 
quick to compute (because they are generated frequently) 
not invertible (each digest could come from a very large number of messages, and only brute-force can generate a message that leads to a given digest) 
tamper-resistant (any change to a message leads to a different digest) 
collision-resistant (it should be impossible to find two different messages that produce the same digest) 
Cryptographic hash functions such as MD5 and SHA-1 are considered broken, as attacks have been found that significantly reduce their collision resistance. 
See also 
Cryptographic hash function on Wikipedia 
MDN Web Docs Glossary 
{{Glossary(“Symmetric-key cryptography”)}} 

{{GlossarySidebar}} 
Cryptography, or cryptology, is the science that studies how to encode and transmit messages securely. 
Cryptography designs and studies algorithms used to encode and decode messages in an insecure environment, and their applications. 
More than just data confidentiality, cryptography also tackles identification, authentication, non-repudiation, and data integrity. 
Therefore it also studies usage of cryptographic methods in context, cryptosystems. 
See also 
Cryptography on Wikipedia 
MDN Web Docs Glossary 
{{Glossary(“Block cipher mode of operation”)}} 
{{Glossary(“Cipher”)}} 
{{Glossary(“Ciphertext”)}} 
{{Glossary(“Cipher suite”)}} 
{{Glossary(“Cryptanalysis”)}} 
{{Glossary(“Decryption”)}} 
{{Glossary(“Encryption”)}} 
{{Glossary(“Key”)}} 
{{Glossary(“Plaintext”)}} 
{{Glossary(“Public-key cryptography”)}} 
{{Glossary(“Symmetric-key cryptography”)}} 

{{GlossarySidebar}} 
A CSP (Content Security Policy) is used to detect and mitigate certain types of website related attacks like {{Glossary(“Cross-site_scripting”)}}, clickjacking and data injections. 
The implementation is based on an {{Glossary(“HTTP”)}} header called {{HTTPHeader(“Content-Security-Policy”)}}. 
See also 
Content Security Policy on Wikipedia 
Content Security Policy documentation on MDN 

{{GlossarySidebar}} 
CSRF (Cross-Site Request Forgery) is an attack that impersonates a trusted user and sends a website unwanted commands. 
This can be done, for example, by including malicious parameters in a {{glossary(“URL”)}} behind a link that purports to go somewhere else: 
<img src="https://www.example.com/index.php? 
action=delete&id=123" /> 
For users who have modification permissions on https://www.example.com, the <img> element executes action on https://www.example.com without their noticing, even if the element is not at https://www.example.com. 
There are many ways to prevent CSRF, such as implementing {{glossary(“REST”, “RESTful API”)}}, adding secure tokens, etc. 
See also 
Cross-site request forgery on Wikipedia 
Prevention measures 

{{GlossarySidebar}} 
A CSS descriptor defines the characteristics of an at-rule. 
At-rules may have one or multiple descriptors. 
Each descriptor has: 
A name 
A value, which holds the component values 
An “! 
important” flag, which in its default state is unset 

{{GlossarySidebar}} 
CSS (Cascading Style Sheets) is a declarative language that controls how webpages look in the {{glossary(“browser”)}}. 
The browser applies CSS style declarations to selected elements to display them properly. 
A style declaration contains the properties and their values, which determine how a webpage looks. 
CSS is one of the three core Web technologies, along with {{Glossary(“HTML”)}} and {{Glossary(“JavaScript”)}}. 
CSS usually styles {{Glossary(“Element”,“HTML elements”)}}, but can be also used with other markup languages like {{Glossary(“SVG”)}} or {{Glossary(“XML”)}}. 
A CSS rule is a set of {{Glossary(“property/CSS”,“properties”)}} associated with a {{Glossary(“CSS selector”, “selector”)}}. 
Here is an example that makes every HTML paragraph yellow against a black background: 
/* The selector "p" indicates that all paragraphs in the document will be affected by that rule */ 
p { 
/* The "color" property defines the text color, in this case yellow. */ 
color: yellow; 
/* The "background-color" property defines the background color, in this case black. */ 
background-color: black; 
} 
“Cascading” refers to the rules that govern how selectors are prioritized to change a page’s appearance. 
This is a very important feature, since a complex website can have thousands of CSS rules. 
See also 
Learn CSS 
CSS on Wikipedia 
The CSS documentation on MDN 
The CSS Working Group current work 

{{GlossarySidebar}} 
The CSS Object Model (CSSOM) is a set of APIs for reading and modifying a document’s style-related (CSS) information. 
In other words, similar to the way in which the DOM enables a document’s structure and content to be read and modified from JavaScript, the CSSOM allows the document’s styling to be read and modified from JavaScript. 
See also 
Populating the page: how browsers work 

{{GlossarySidebar}} 
The term CSS pixel is synonymous with the CSS unit of absolute length px — which is normatively defined as being exactly 1/96th of 1 CSS inch (in). 
See also 
CSS Length Explained on the MDN Hacks Blog 

{{GlossarySidebar}} 
A CSS preprocessor is a program that lets you generate {{Glossary(“CSS”)}} from the preprocessor’s own unique {{Glossary(“syntax”)}}. 
There are many CSS preprocessors to choose from, however most CSS preprocessors will add some features that don’t exist in pure CSS, such as mixin, nesting selector, inheritance selector, and so on. 
These features make the CSS structure more readable and easier to maintain. 
To use a CSS preprocessor, you must install a CSS compiler on your web {{Glossary(“server”)}}; Or use the CSS preprocessor to compile on the development environment, and then upload compiled CSS file to the web server. 
See also 
A few of most popular CSS preprocessors: 
Sass 
LESS 
Stylus 
PostCSS 

{{GlossarySidebar}} 
A CSS selector is the part of a CSS rule that describes what elements in a document the rule will match. 
The matching elements will have the rule’s specified style applied to them. 
Example 
Consider this CSS: 
p { 
color: green; 
} 
div.warning { 
width: 100%; 
border: 2px solid yellow; 
color: white; 
background-color: darkred; 
padding: 0.8em 0.8em 0.6em; 
} 
#customized { 
font: 
16px Lucida Grande, 
Arial, 
Helvetica, 
sans-serif; 
} 
The selectors here are "p" (which applies the color green to the text inside any {{HTMLElement(“p”)}} element), "div.warning" (which makes any {{HTMLElement(“div”)}} element with the class "warning" look like a warning box), and "#customized", which sets the base font of the element with the ID "customized" to 16-pixel tall Lucida Grande or one of a few fallback fonts. 
We can then apply this CSS to some HTML, such as: 
<p>This is happy text.</p> 
<div class="warning"> 
Be careful! 
There are wizards present, and they are quick to anger! 

{{GlossarySidebar}} 
A database is a storing system that collects organized data, to make some works easier like searching, structure, and extend. 
In web development, most databases use the relational database management system (RDBMS) to organize data and programming in {{glossary(“SQL”)}}. 
Some databases, however, don’t follow the former mechanism to organized data, which called NoSQL. 
Some famous server-side RDBMS are MySQL(or MariaDB which is a fork of it), SQL Server, and Oracle Database. 
On the other hand, some famous NoSQL examples are MongoDB, Cassandra, and Redis. 
Browsers also have their own database system called {{glossary(“IndexedDB”)}}. 
See also 
Database on Wikipedia 
{{Glossary(“IndexedDB”)}} 
{{Glossary(“SQL”)}} 

{{GlossarySidebar}} 
Data structure is a particular way of organizing data so that it can be used efficiently. 
See also 
Data structure on Wikipedia 

{{GlossarySidebar}} 
In {{glossary(“cryptography”)}}, decryption is the conversion of {{glossary(“ciphertext”)}} into {{glossary(“Plaintext”)}}. 
Decryption is a cryptographic primitive: it transforms a ciphertext message into plaintext using a cryptographic algorithm called a {{glossary(“cipher”)}}. 
Like encryption, decryption in modern ciphers is performed using a specific algorithm and a secret, called the {{glossary(“key”)}}. 
Since the algorithm is often public, the key must stay secret if the encryption stays secure. 
The decryption primitive. 
Decryption is the reverse of {{glossary(“encryption”)}} and if the key stays secret, decryption without knowing the specific secret, decryption is mathematically hard to perform. 
How hard depends on the security of the cryptographic algorithm chosen and evolves with the progress of {{glossary(“cryptanalysis”)}}. 
See also 
Encryption and Decryption 

{{GlossarySidebar}} 
They are not the same object (o1 ! 
But two objects with structurally non-equivalent prototype chains (for example, one is an array and the other is a plain object) are never copies of each other. 
The copy of an object whose properties all have primitive values fits the definition of both a deep copy and a shallow copy. 
It is somewhat useless to talk about the depth of such a copy, though, because it has no nested properties and we usually talk about deep copying in the context of mutating nested properties. 
In JavaScript, standard built-in object-copy operations (spread syntax, Array.prototype.concat(), Array.prototype.slice(), Array.from(), Object.assign(), and Object.create()) do not create deep copies (instead, they create shallow copies). 
One way to make a deep copy of a JavaScript object, if it can be serialized, is to use {{jsxref(“JSON.stringify()”)}} to convert the object to a JSON string, and then {{jsxref(“JSON.parse()”)}} to convert the string back into a (completely new) JavaScript object: 
const ingredientsList = ["noodles", { list: ["eggs", "flour", "water"] }]; 
const ingredientsListDeepCopy = JSON.parse(JSON.stringify(ingredientsList)); 
// Change the value of the 'list' property in ingredientsListDeepCopy. 
ingredientsListDeepCopy[1].list = ["rice flour", "water"]; 
// The 'list' property does not change in ingredients_list. 
console.log(ingredientsList[1].list); 
// Array(3) [ "eggs", "flour", "water" ] 
However, while the object in the code above is simple enough to be serializable, many JavaScript objects are not serializable at all — for example, functions (with closures), Symbols, objects that represent HTML elements in the HTML DOM API, recursive data, and many other cases. 
Calling JSON.stringify() to serialize the objects in those cases will fail. 
So there’s no way to make deep copies of such objects. 
The web API structuredClone() also creates deep copies and has the advantage of allowing transferable objects in the source to be transferred to the new copy, rather than just cloned. 
It also handles more data types, such as Error. 
But note that structuredClone() isn’t a feature of the JavaScript language itself — instead it’s a feature of browsers and other JavaScript hosts that implement web APIs. 
And calling structuredClone() to clone a non-serializable object will fail in the same way that calling JSON.stringify() to serialize it will fail. 
See also 
Shallow copy 
window.structuredClone() 

{{GlossarySidebar}} 
Developer tools (or “development tools” or short “DevTools”) are programs that allow a developer to create, test and debug software. 
Current browsers provide integrated developer tools, which allow to inspect a website. They let users inspect and debug the page’s {{Glossary(“HTML”)}}, {{Glossary(“CSS”)}}, and {{Glossary(“JavaScript”)}}, allow to inspect the network traffic it causes, make it possible to measure it’s performance, and much more. 
See also 
Web development tools on Wikipedia 
Firefox Developer Tools on MDN 
Firebug (former developer tool for Firefox) 
Chrome DevTools on chrome.com 
Safari Developer Tools on apple.com 
Edge Dev Tools on microsoft.com 

{{GlossarySidebar}} 
A digest is a small value generated by a {{glossary(“cryptographic hash function”, “hash function”)}} from a whole message. 
Ideally, a digest is quick to calculate, irreversible, and unpredictable, and therefore indicates whether someone has tampered with a given message. 
A digest can be used to perform several tasks: 
in non-cryptographic applications (e.g., the index of hash tables, or a fingerprint used to detect duplicate data or to uniquely identify files) 
store passwords so that they can’t be retrieved, but can still be checked (To do this securely, you also need to salt the password.) 
generate pseudo-random numbers 
generate {{glossary(“key”,“keys”)}} 
It is critical to choose the proper hash function for your use case to avoid collisions and predictability. 
See also 
See {{glossary(“Cryptographic hash function”)}} 
Hash function on Wikipedia 

{{GlossarySidebar}} 
A digital certificate is a data file that binds a publicly known {{Glossary(“Key”, “cryptographic key”)}} to an organization. 
A digital certificate contains information about an organization, such as the common name (e.g., mozilla.org), the organization unit (e.g., Mozilla Corporation), and the location (e.g., Mountain View). 
Digital certificates are most commonly signed by a {{Glossary(“certificate authority”)}}, attesting to the certificate’s authenticity. 
See also 
Digital certificate on Wikipedia 

{{GlossarySidebar}} 
A Distributed Denial-of-Service (DDoS) is an attack in which many compromised systems are made to attack a single target, in order to swamp server resources and block legitimate users. 
Normally many persons, using many bots, attack high-profile Web {{glossary(“server”,“servers”)}} like banks or credit-card payment gateways. 
DDoS concerns computer networks and CPU resource management. 
In a typical DDoS attack, the assailant begins by exploiting a vulnerability in one computer system and making it the DDoS master. 
The attack master, also known as the botmaster, identifies and infects other vulnerable systems with malware. 
Eventually, the assailant instructs the controlled machines to launch an attack against a specified target. 
There are two types of DDoS attacks: a network-centric attack (which overloads a service by using up bandwidth) and an application-layer attack (which overloads a service or database with application calls). 
The overflow of data to the target causes saturation in the target machine so that it cannot respond or responds very slowly to legitimate traffic (hence the name “denial of service”). 
The infected computers’ owners normally don’t know that their computers have been compromised, and they also suffer loss of service. 
A computer under an intruder’s control is called a zombie or bot. 
A network of co-infected computers is known as a botnet or a zombie army. 
Both Kaspersky Labs and Symantec have identified botnets — not spam, viruses, or worms — as the biggest threat to Internet security. 
The United States Computer Emergency Readiness Team (US-CERT) defines symptoms of denial-of-service attacks to include: 
Unusually slow network performance (opening files or accessing websites) 
Unavailability of a particular website 
Inability to access any website 
Dramatic increase in the number of spam emails received—(this type of DoS attack is considered an email bomb) 
Disconnection of a wireless or wired internet connection 
Longterm denial of access to the Web or any internet services 
See also 
Denial-of-service attack on Wikipedia 

{{GlossarySidebar}} 
DNS (Domain Name System) is a hierarchical and decentralized naming system for Internet connected resources. 
DNS maintains a list of {{Glossary(“domain name”,“domain names”)}} along with the resources, such as IP addresses, that are associated with them. 
The most prominent function of DNS is the translation of human-friendly domain names (such as mozilla.org) to a numeric {{Glossary(“IP address”)}} (such as 192.0.2.172); this process of mapping a domain name to the appropriate IP address is known as a DNS lookup. 
By contrast, a reverse DNS lookup (rDNS) is used to determine the domain name associated with an IP address. 
See also 
Understanding domain names 
Domain Name System on Wikipedia 

{{GlossarySidebar}} 
In {{Glossary(“HTML”)}}, the doctype is the required “<! 
DOCTYPE html>” preamble found at the top of all documents. 
Its sole purpose is to prevent a {{Glossary(“browser”)}} from switching into so-called “quirks mode” when rendering a document; that is, the “<! 
DOCTYPE html>” doctype ensures that the browser makes a best-effort attempt at following the relevant specifications, rather than using a different rendering mode that is incompatible with some specifications. 
See also 
Definition of the DOCTYPE in the HTML specification 
Quirks Mode and Standards Mode 
Document.doctype, a JavaScript method that returns the doctype 

{{GlossarySidebar}} 
{{Glossary(“CSP”)}} document directives are used in a {{HTTPHeader(“Content-Security-Policy”)}} header and govern the properties of a document or worker environment to which a policy applies. 
Document directives don’t fall back to the {{CSP(“default-src”)}} directive. 
Glossary 
{{Glossary(“CSP”)}} 
{{Glossary(“Reporting directive”)}} 
{{Glossary(“Fetch directive”)}} 
{{Glossary(“Navigation directive”)}} 
Reference https://www.w3.org/TR/CSP/#directives-document 
{{HTTPHeader(“Content-Security-Policy/upgrade-insecure-requests”, “upgrade-insecure-requests”)}} 
{{HTTPHeader(“Content-Security-Policy/block-all-mixed-content”, “block-all-mixed-content”)}} 
{{HTTPHeader(“Content-Security-Policy”)}} 

{{GlossarySidebar}} 
When the JavaScript global environment is a window or an iframe, it is called a document environment. 
A global environment is an environment that doesn’t have an outer environment. 
See also 
document environment in the HTML specification 

{{GlossarySidebar}} 
A domain is an authority within the internet that controls its own resources. 
Its “domain name” is a way to address this authority as part of the hierarchy in a {{Glossary(“URL”)}} - usually the most memorable part of it, for instance a brand name. 
A fully qualified domain name (FQDN) contains all necessary parts to look up this authority by name unambiguously using the {{Glossary(“DNS”)}} system of the internet. 
For example, in “developer.mozilla.org”: 
“org” is called a top-level domain. They are registered as an internet standard by the IANA. 
Here, “org” means “organization” which is defined in a top-level domain registry. 
“mozilla” is the domain. 
If you like to own a domain you have to register it with one of the many registrars who are allowed to do so with a top-level domain registry. 
“developer” is a “sub-domain”, something you as the owner of a domain may define yourself. 
Many owners choose to have a subdomain “www” to point to their {{Glossary(“World_Wide_Web”)}} resource, but that’s not required (and has even fallen somewhat out of favor). 
See also 
Domain Name on Wikipedia 

{{GlossarySidebar}} 
A domain name is a website’s address on the {{Glossary(“Internet”)}}. 
Domain names are used in {{Glossary(“URL”,“URLs”)}} to identify which server a specific webpage belongs to. 
The domain name consists of a hierarchical sequence of names (labels) separated by periods (dots) and ending with an {{glossary(“TLD”,“extension”)}}. 
See also 
Domain name on Wikipedia 
Understanding domain names 

{{GlossarySidebar}} 
Browsers limit the number of active connections for each domain. 
To enable concurrent downloads of assets exceeding that limit, domain sharding splits content across multiple subdomains. 
When multiple domains are used to serve multiple assets, browsers are able to download more resources simultaneously, resulting in a faster page load time and improved user experience. 
The problem with domain sharding, in terms of performance, is the cost of extra DNS lookups for each domain and the overhead of establishing each TCP connection. 
The initial response from an HTTP request is generally an HTML file listing other resources such as JavaScript, CSS, images and other media files that need to be downloaded. 
As browsers limit the number of active connections per domain, serving all the required resources from a single domain could be slow as assets need to be downloaded sequentially. 
With domain sharding, the required downloads are served from more than one domain, enabling the browser to simultaneously download needed resources. 
Multiple domains, however, is an anti-pattern, as DNS lookups slow initial load times. 
HTTP2 supports unlimited concurrent requests making domain sharding an obsolete requirement when HTTP/2 is enabled. 
See also 
{{Glossary(“TLS”)}} 
DNS 
HTTP/2 


{{GlossarySidebar}} 
DoS (Denial of Service) is a network attack that prevents legitimate use of {{glossary(“server”)}} resources by flooding the server with requests. 
Computers have limited resources, for example computation power or memory. 
When these are exhausted, the program can freeze or crash, making it unavailable. 
A DoS attack consists of various techniques to exhaust these resources and make a server or a network unavailable to legitimate users, or at least make the server perform sluggishly. 
There are also Distributed Denial of Service (DDoS) Attacks in which a multitude of servers are used to exhaust the computing capacity of an attacked computer. 
Types of DoS attack 
DoS attacks are more of a category than a particular kind of attack. 
Here is a non-exhaustive list of DoS attack types: 
bandwidth attack 
service request flood 
SYN flooding attack 
ICMP flood attack 
peer-to-peer attack 
permanent DoS attack 
application level flood attack 
See also 
Denial-of-service attack on Wikipedia 
Denial-of-service on OWASP 
{{Glossary(“Distributed Denial of Service”,“DDoS”)}} 

{{GlossarySidebar}} 
Dynamically-typed languages are those (like {{glossary(“JavaScript”)}}) where the interpreter assigns {{glossary(“variable”,“variables”)}} a {{glossary(“type”)}} at runtime based on the variable’s {{glossary(“value”)}} at the time. 
See also 
JavaScript data types and data structures 
Type system on Wikipedia 

{{GlossarySidebar}} 
Ecma International (formally European Computer Manufacturers Association) is a non-profit organization that develops standards in computer hardware, communications, and programming languages. 
On the web it is famous for being the organization which maintain the ECMA-262 specification (aka. {{Glossary(“ECMAScript”)}}) which is the core specification for the {{Glossary(“JavaScript”)}} language. 
See also 
Ecma International on Wikipedia 
The Ecma International website 

{{GlossarySidebar}} 
ECMAScript is a scripting language specification on which {{glossary(“JavaScript”)}} is based. Ecma International is in charge of standardizing ECMAScript. 
See also 
ECMAScript on Wikipedia 
ECMAScript 

{{GlossarySidebar}} 
An element is a part of a webpage. In {{glossary(“XML”)}} and {{glossary(“HTML”)}}, an element may contain a data item or a chunk of text or an image, or perhaps nothing. 
A typical element includes an opening tag with some {{glossary(“attribute”, “attributes”)}}, enclosed text content, and a closing tag. Example: in 
Elements and {{glossary(“tag”, “tags”)}} are not the same things. 
Tags begin or end an element in source code, whereas elements are part of the {{Glossary(“DOM”)}}, the document model for displaying the page in the {{glossary(“browser”)}}. 
See also 
Getting started with HTML 
Defining custom elements 
The {{domxref(“Element”)}} interface, representing an element in the DOM. 

{{GlossarySidebar}} 
Encapsulation is the packing of data and {{glossary(“function”,“functions”)}} into one component (for example, a {{glossary(“class”)}}) and then controlling access to that component to make a “blackbox” out of the {{glossary(“object”)}}. 
Because of this, a user of that class only needs to know its interface (that is, the data and functions exposed outside the class), not the hidden implementation. 
See also 
Encapsulation on Wikipedia 

{{GlossarySidebar}} 
In {{glossary(“cryptography”)}}, encryption is the conversion of {{glossary(“plaintext”)}} into a coded text or {{glossary(“ciphertext”)}}. 
A ciphertext is intended to be unreadable by unauthorized readers. 
Encryption is a cryptographic primitive: it transforms a plaintext message into a ciphertext using a cryptographic algorithm called a {{glossary(“cipher”)}}. 
Encryption in modern ciphers is performed using a specific algorithm and a secret, called the {{glossary(“key”)}}. 
Since the algorithm is often public, the key must stay secret if the encryption stays secure. 
How encryption works. 
Without knowing the secret, the reverse operation, {{glossary(“decryption”)}}, is mathematically hard to perform. 
How hard depends on the security of the cryptographic algorithm chosen and evolves with the progress of {{glossary(“cryptanalysis”)}}. 

{{GlossarySidebar}} 
Endian and endianness (or “byte-order”) describe how computers organize the bytes that make up numbers. 

{{GlossarySidebar}} 
The {{glossary(“JavaScript”)}} engine is an interpreter that parses and executes a JavaScript program. 
See also 
JavaScript engine on Wikipedia 

{{GlossarySidebar}} 
Warning: The current HTTP/1.1 specification no longer refers to entities, entity headers or entity-body. 
Some of the fields are now referred to as {{glossary(“Representation header”)}} fields. 

{{GlossarySidebar}} 
An {{glossary(“HTML”)}} entity is a piece of text (“string”) that begins with an ampersand (&) and ends with a semicolon (;). 
Entities are frequently used to display reserved characters (which would otherwise be interpreted as HTML code), and invisible characters (like non-breaking spaces). 
You can also use them in place of other characters that are difficult to type with a standard keyboard. 
Note: Many characters have memorable entities. 
For example, the entity for the copyright symbol (©) is &copy;. 
For less memorable characters, such as &#8212; or &#x2014;, you can use a reference chart or decoder tool. 
Reserved characters 
Some special characters are reserved for use in HTML, meaning that your browser will parse them as HTML code. 
For example, if you use the less-than (<) sign, the browser interprets any text that follows as a {{Glossary(‘tag’)}}. 
To display these characters as text, replace them with their corresponding character entities, as shown in the following table. 
Character 
Entity 
Note 
& 
&amp; 
Interpreted as the beginning of an entity or character reference. 
< 
&lt; 
Interpreted as the beginning of a {{Glossary(‘tag’)}} 
> 
&gt; 
Interpreted as the ending of a {{Glossary(‘tag’)}} 
” 
&quot; 
Interpreted as the beginning and end of an {{Glossary(‘attribute’)}}’s value. &nbsp; 
&euro; 
Official list of character entities 

{{GlossarySidebar}} 
Events are assets generated by DOM elements, which can be manipulated by a JavaScript code. 
See also 
Event documentation on MDN 
Official website 
DOM Events on Wikipedia 

{{GlossarySidebar}} 
An exception is a condition that interrupts normal code execution. 
In JavaScript {{glossary(“syntax error”, “syntax errors”)}} are a very common source of exceptions. 
See also 
Exception handling on Wikipedia 

{{GlossarySidebar}} 
Expando properties are properties added to {{glossary(“DOM”)}} nodes with {{glossary(“JavaScript”)}}, where those properties are not part of the {{glossary(“object”,“object’s”)}} DOM specification: 
window.document.foo = 5; // foo is an expando 
The term may also be applied to properties added to objects without respecting the object’s original intent, such as non-numeric named properties added to an {{glossary(“Array”)}}. 


{{GlossarySidebar}} 
{{Glossary(“CSP”)}} fetch directives are used in a {{HTTPHeader(“Content-Security-Policy”)}} header and control locations from which certain resource types may be loaded. 
For instance, {{CSP(“script-src”)}} allows developers to allow trusted sources of script to execute on a page, while {{CSP(“font-src”)}} controls the sources of web fonts. 
All fetch directives fall back to {{CSP(“default-src”)}}. 
That means, if a fetch directive is absent in the CSP header, the user agent will look for the default-src directive. 
See Fetch directives for a complete list. 
See also 
Glossary 
{{Glossary(“CSP”)}} 
{{Glossary(“Reporting directive”)}} 
{{Glossary(“Document directive”)}} 
{{Glossary(“Navigation directive”)}} 
Reference https://www.w3.org/TR/CSP/#directives-fetch 
{{HTTPHeader(“Content-Security-Policy/upgrade-insecure-requests”, “upgrade-insecure-requests”)}} 
{{HTTPHeader(“Content-Security-Policy/block-all-mixed-content”, “block-all-mixed-content”)}} 
{{HTTPHeader(“Content-Security-Policy”)}} 

{{GlossarySidebar}} 
A fetch metadata request header is an {{Glossary(“Request header”, “HTTP request header”)}} that provides additional information about the context from which the request originated. 
This allows the server to make decisions about whether a request should be allowed based on where the request came from and how the resource will be used. 
With this information a server can implement a {{Glossary(“resource isolation policy”)}}, allowing external sites to request only those resources that are intended for sharing, and that are used appropriately. 
This approach can help mitigate common cross-site web vulnerabilities such as {{Glossary(“CSRF”)}}, Cross-site Script Inclusion(‘XSSI’), timing attacks, and cross-origin information leaks. 
These headers are prefixed with Sec-, and hence have {{Glossary(“Forbidden header name”, “forbidden header names”)}}. 
As such, they cannot be modified from JavaScript. 
The fetch metadata request headers are: 
{{HTTPHeader(“Sec-Fetch-Site”)}} 
{{HTTPHeader(“Sec-Fetch-Mode”)}} 
{{HTTPHeader(“Sec-Fetch-User”)}} 
{{HTTPHeader(“Sec-Fetch-Dest”)}} 
See also 
Protect your resources from web attacks with Fetch Metadata (web.dev) 
Fetch Metadata Request Headers playground (secmetadata.appspot.com) 
List of all HTTP headers 
List of all HTTP headers > Fetch metadata request headers 
Glossary 
{{Glossary(“Representation header”)}} 
{{Glossary(“HTTP_header”,“HTTP header”)}} 
{{Glossary(“Response header”)}} 
{{Glossary(“Request header”)}} 

{{GlossarySidebar}} 
A firewall is a system that filters network traffic. 
It can either let it pass or block it, according to some specified rules. 
For example, it can block incoming connections aimed at a certain port or outgoing connections to a certain IP address. 
Firewalls can be as simple as a single piece of software, or more complex, like a dedicated machine whose only function is to act as a firewall. 
See also 
Firewall (computing) on Wikipedia 

{{GlossarySidebar}} 
A programming language is said to have First-class functions when functions in that language are treated like any other variable. 
For example, in such a language, a function can be passed as an argument to other functions, can be returned by another function and can be assigned as a value to a variable. 
Examples 
Assigning a function to a variable 
const foo = () => { 
console.log("foobar"); 
}; 
foo(); // Invoke it using the variable 
// foobar 
We assigned an Anonymous Function in a {{glossary(“Variable”)}}, then we used that variable to invoke the function by adding parentheses () at the end. 
Note: Even if your function was named, you can use the variable name to invoke it. 
Naming it will be helpful when debugging your code. But it won’t affect the way we invoke it. 
Passing a function as an argument 
function sayHello() { 
return "Hello, "; 
} 
function greeting(helloMessage, name) { 
console.log(helloMessage() + name); 
} 
// Pass `sayHello` as an argument to `greeting` function 
greeting(sayHello, "JavaScript!" 
); // Hello, JavaScript! 

{{GlossarySidebar}} 
First Paint is the time between navigation and when the browser first renders pixels to the screen, rendering anything that is visually different from the default background color of the body. 
It is the first key moment in page load and will answer the question “Has the browser started to render the page?” 
See also 
First contentful paint 
Largest Contentful Paint 
First meaningful paint 

{{GlossarySidebar}} 
Flexbox is the commonly-used name for the CSS Flexible Box Layout Module, a layout model for displaying items in a single dimension — as a row or as a column. 
In the specification, Flexbox is described as a layout model for user interface design. 
The key feature of Flexbox is the fact that items in a flex layout can grow and shrink. 
Space can be assigned to the items themselves, or distributed between or around the items. 
Flexbox also enables alignment of items on the main or cross axis, thus providing a high level of control over the size and alignment of a group of items. 
See also 
Property reference 
{{cssxref(“align-content”)}} 
{{cssxref(“align-items”)}} 
{{cssxref(“align-self”)}} 
{{cssxref(“flex”)}} 
{{cssxref(“flex-basis”)}} 
{{cssxref(“flex-direction”)}} 
{{cssxref(“flex-flow”)}} 
{{cssxref(“flex-grow”)}} 
{{cssxref(“flex-shrink”)}} 
{{cssxref(“flex-wrap”)}} 
{{cssxref(“justify-content”)}} 
{{cssxref(“order”)}} 
Further reading 
CSS Flexible Box Layout Module Level 1 Specification 
CSS Flexbox Guide: 
Basic Concepts of Flexbox 
Relationship of flexbox to other layout methods 
Aligning items in a flex container 
Ordering flex items 
Controlling Ratios of flex items along the main axis 
Mastering wrapping of flex items 
Typical use cases of flexbox 

{{GlossarySidebar}} 
A {{glossary(“flexbox”)}} layout is defined using the flex or inline-flex values of the display property on the parent item. 
This element then becomes a flex container, and each one of its children becomes a {{glossary(“flex item”)}}. 
A value of flex causes the element to become a block level flex container, and inline-flex an inline level flex container. 
These values create a flex formatting context for the element, which is similar to a block formatting context in that floats will not intrude into the container, and the margins on the container will not collapse with those of the items. 
See also 
Property reference 
{{cssxref(“align-content”)}} 
{{cssxref(“align-items”)}} 
{{cssxref(“flex”)}} 
{{cssxref(“flex-direction”)}} 
{{cssxref(“flex-flow”)}} 
{{cssxref(“flex-wrap”)}} 
{{cssxref(“justify-content”)}} 
Further reading 
CSS Flexbox Guide: Basic Concepts of Flexbox 
CSS Flexbox Guide: Mastering wrapping of flex items 
Firefox Developer Tools > How to: CSS Flexbox Inspector: Examine Flexbox layouts 

{{GlossarySidebar}} 
flex is a new value added to the CSS {{cssxref(“display”)}} property. 
Along with inline-flex it causes the element that it applies to in order to become a {{glossary(“flex container”)}}, and the element’s children to each become a {{glossary(“flex item”)}}. 
The items then participate in flex layout, and all of the properties defined in the CSS Flexible Box Layout Module may be applied. 
The flex property is a shorthand for the flexbox properties flex-grow, flex-shrink and flex-basis. 
In addition <flex> can refer to a flexible length in CSS Grid Layout. 
See also 
Property reference 
{{cssxref(“align-content”)}} 
{{cssxref(“align-items”)}} 
{{cssxref(“align-self”)}} 
{{cssxref(“flex”)}} 
{{cssxref(“flex-basis”)}} 
{{cssxref(“flex-direction”)}} 
{{cssxref(“flex-flow”)}} 
{{cssxref(“flex-grow”)}} 
{{cssxref(“flex-shrink”)}} 
{{cssxref(“flex-wrap”)}} 
{{cssxref(“justify-content”)}} 
{{cssxref(“order”)}} 
Further reading 
CSS Flexible Box Layout Module Level 1 Specification 
CSS Flexbox Guide: Basic Concepts of Flexbox 
Relationship of flexbox to other layout methods 
Aligning items in a flex container 
Ordering flex items 
Controlling Ratios of flex items along the main axis 
Mastering wrapping of flex items Typical use cases of flexbox 

{{GlossarySidebar}} 
The direct children of a {{glossary(“Flex Container”)}} (elements with display: flex or display: inline-flex set on them) become flex items. 
Continuous runs of text inside flex containers will also become flex items. 
See also 
Property reference 
{{cssxref(“align-self”)}} 
{{cssxref(“flex-basis”)}} 
{{cssxref(“flex-grow”)}} 
{{cssxref(“flex-shrink”)}} 
{{cssxref(“order”)}} 
Further reading 
CSS Flexbox Guide: Basic Concepts of Flexbox 
CSS Flexbox Guide: Ordering flex items 
CSS Flexbox Guide: Controlling Ratios of flex items along the main axis 

{{GlossarySidebar}} 
A forbidden header name is the name of any HTTP header that cannot be modified programmatically; specifically, an HTTP request header name (in contrast with a {{Glossary(“Forbidden response header name”)}}). 
Modifying such headers is forbidden because the user agent retains full control over them. 
Names starting with Sec- are reserved for creating new headers safe from {{glossary(“API”,“APIs”)}} using the fetch algorithm that grant developers control over headers, such as {{domxref(“XMLHttpRequest”)}}. 
Forbidden header names start with Proxy- or Sec-, or are one of the following names: 
{{HTTPHeader(“Accept-Charset”)}} 
{{HTTPHeader(“Accept-Encoding”)}} 
{{HTTPHeader(“Access-Control-Request-Headers”)}} 
{{HTTPHeader(“Access-Control-Request-Method”)}} 
{{HTTPHeader(“Connection”)}} 
{{HTTPHeader(“Content-Length”)}} 
{{HTTPHeader(“Cookie”)}} 
{{HTTPHeader(“Date”)}} 
{{HTTPHeader(“DNT”)}} 
{{HTTPHeader(“Expect”)}} 
{{HTTPHeader(“Host”)}} 
{{HTTPHeader(“Keep-Alive”)}} 
{{HTTPHeader(“Origin”)}} 
{{HTTPHeader(“Permissions-Policy”)}} 
Proxy- 
Sec- 
{{HTTPHeader(“Referer”)}} 
{{HTTPHeader(“TE”)}} 
{{HTTPHeader(“Trailer”)}} 
{{HTTPHeader(“Transfer-Encoding”)}} 
{{HTTPHeader(“Upgrade”)}} 
{{HTTPHeader(“Via”)}} 
Note: The {{HTTPHeader(“User-Agent”)}} header is no longer forbidden, as per spec — see forbidden header name list (this was implemented in Firefox 43) — it can now be set in a Fetch Headers object, or with the setRequestHeader() method of XMLHttpRequest. 
However, Chrome will silently drop the header from Fetch requests (see Chromium bug 571722). 
See also 
{{Glossary(“Forbidden response header name”)}} (Glossary) 

{{GlossarySidebar}} 
A forbidden response header name is an HTTP header name (Set-Cookie) that cannot be modified programmatically. 
See also 
Fetch specification: forbidden response-header name 
{{Glossary(“Forbidden header name”)}} (Glossary) 

{{GlossarySidebar}} 
A fork is a copy of an existing software project at some point to add someone’s own modifications to the project. 
Basically, if the license of the original software allows, you can copy the code to develop your own version of it, with your own additions, which will be a “fork”. 
Forks are often seen in free and open source software development. 
This is now a more popular term thanks to contribution model using Git (and/or the GitHub platform). 
See also 
Fork on Wikipedia 
How to fork a GitHub repo (fork as in a Git context) 
{{Glossary(“Fork”)}} (Glossary) 
Various “well-known” forks 
Linux distributions 
Node.js and io.js (which have been merged together back) 
LibreOffice, a fork of OpenOffice 

{{GlossarySidebar}} 
FTP (File Transfer Protocol) is an insecure {{glossary(“protocol”)}} for transferring files from one {{glossary(“host”)}} to another over the Internet. 
For many years it was the defacto standard way of transferring files, but as it is inherently insecure, it is no longer supported by many hosting accounts. 
Instead you should use SFTP (a secure, encrypted version of FTP) or another secure method for transferring files like Rsync over SSH. 
See also 
Beginner’s guide to uploading files via FTP 
FTP on Wikipedia 

{{GlossarySidebar}} 
A function is a code snippet that can be called by other code or by itself, or a {{Glossary(“variable”)}} that refers to the function. 
When a function is called, {{Glossary(“Argument”, “arguments”)}} are passed to the function as input, and the function can optionally return a value. 
A function in {{glossary(“JavaScript”)}} is also an {{glossary(“object”)}}. 
A function name is an {{Glossary(“identifier”)}} included as part of a function declaration or function expression. 
The function name’s {{Glossary(“scope”)}} depends on whether the function name is a declaration or expression. 
Different types of functions 
// Anonymous function created as a function expression 
(function () {}); 
// Anonymous function created as an arrow function 
() => {}; 
A named function is a function with a function name: 
function foo() {} 
// Named function expression (function bar() {}); 
const baz = () => {}; 
An inner function is a function inside another function (square in this case). 
An outer function is a function containing a function (addSquares in this case): 
function addSquares(a, b) { 
function square(x) { 
return x * x; 
} 
return square(a) + square(b); 
} 
// Arrow function 
const addSquares2 = (a, b) => { 
const square = (x) => x * x; 
return square(a) + square(b); 
}; 
A recursive function is a function that calls itself. 
See {{Glossary(“Recursion”, “recursion”)}}. 
function loop(x) { 
if (x >= 10) return; 
loop(x + 1); 
} 
// Arrow function 
const loop2 = (x) => { 
if (x >= 10) return; 
loop(x + 1); 
}; 
An Immediately Invoked Function Expressions ({{glossary(“IIFE”)}}) is a function that is called directly after the function is loaded into the browser’s compiler. 
The way to identify an IIFE is by locating the extra left and right parenthesis at the end of the function’s definition. 
Function expressions, named or anonymous, can be called immediately. 
(function foo() { 
console.log("Hello Foo"); 
})(); 
(function food() { 
console.log("Hello Food"); 
})(); 
(() => console.log("hello world"))(); 
js example-bad function foo() { console.log('Hello Foo'); }(); 
If you’d like to know more about IIFEs, check out the following page on Wikipedia: Immediately Invoked Function Expression 
See also 
Functions 
Arrow Functions 

{{GlossarySidebar}} 
Garbage collection is a term used in {{Glossary(“computer programming”)}} to describe the process of finding and deleting {{Glossary(“object”, “objects”)}} which are no longer being {{Glossary(“object reference”, “referenced”)}} by other objects. 
In other words, garbage collection is the process of removing any objects which are not being used by any other objects. 
Often abbreviated “GC,” garbage collection is a fundamental component of the memory management system used by {{Glossary(“JavaScript”)}}. 
See also 
Memory management on Wikipedia 
Garbage collection (computer science) on Wikipedia 
Garbage collection in the MDN JavaScript guide. 
Memory management in JavaScript 

{{GlossarySidebar}} 
Gecko is the layout engine developed by the Mozilla Project and used in many apps/devices, including {{glossary(“Mozilla Firefox”,“Firefox”)}} and {{glossary(“Firefox OS”)}}. 
Web {{glossary(“browser”,“browsers”)}} need software called a layout engine to interpret {{glossary(“HTML”)}}, {{glossary(“CSS”)}}, {{glossary(“JavaScript”)}}, and embedded content (like images) and draw everything to your screen. 
Besides this, Gecko makes sure associated {{glossary(“API”,“APIs”)}} work well on every operating system Gecko supports, and that appropriate APIs are exposed only to relevant support targets. 
This means that Gecko includes, among other things, a networking stack, graphics stack, layout engine, a JavaScript virtual machine, and porting layers. 
Since all Firefox OS apps are Web apps, Firefox OS uses Gecko as its app runtime as well. 
See also 
Gecko on Wikipedia 

{{GlossarySidebar}} 

{{GlossarySidebar}} 
GIF (Graphics Interchange Format) is an image format that uses lossless compression and can be used for animations. 
A GIF uses up to 8 bits per pixel and a maximum of 256 colors from the 24-bit color space. 
See also 
GIF on Wikipedia 

{{GlossarySidebar}} 
Git is a free, open-source, distributed Source Code Management ({{Glossary(“SCM”)}}) system. 
It facilitates handling code bases with distributed development teams. 
What sets it apart from previous SCM systems is the ability to do common operations (branching, committing, etc.) on your local development machine, without having to change the master repository or even having write access to it. 
See also 
Official website with documentation 
GitHub, a Git-based graphical project host 

{{GlossarySidebar}} 
A global object is an {{glossary(“object”)}} that always exists in the {{glossary(“global scope”)}}. 
In JavaScript, there’s always a global object defined. 
In a web browser, when scripts create global variables defined with the var keyword, they’re created as members of the global object. 
(In {{Glossary(“Node.js”)}} this is not the case.) 
The global object’s {{Glossary(“interface”)}} depends on the execution context in which the script is running. 
For example: 
In a web browser, any code which the script doesn’t specifically start up as a background task has a {{domxref(“Window”)}} as its global object. 
This is the vast majority of JavaScript code on the Web. 
Code running in a {{domxref(“Worker”)}} has a {{domxref(“WorkerGlobalScope”)}} object as its global object. 
Scripts running under {{Glossary(“Node.js”)}} have an object called global as their global object. 
The globalThis global property allows one to access the global object regardless of the current environment. 
var statements and function declarations at the top level create properties of the global object. 
On the other hand, {{jsxref(“Statements/let”, “let”)}} and {{jsxref(“Statements/const”, “const”)}} declarations never create properties of the global object. 
The properties of the global object are automatically added to the {{glossary(“global scope”)}}. 
In JavaScript, the global object always holds a reference to itself: 
console.log(globalThis === globalThis.globalThis); // true (everywhere) 
console.log(window === window.window); // true (in a browser) 
console.log(self === self.self); // true (in a browser or a Web Worker) 
console.log(frames === frames.frames); // true (in a browser) 
console.log(global === global.global); // true (in Node.js) 
See also 
MDN Web Docs Glossary 
{{glossary(“global scope”)}} 
{{glossary(“object”)}} 
{{domxref(“Window”)}} 
{{domxref(“WorkerGlobalScope”)}} 
global 

{{GlossarySidebar}} 
Google Chrome is a free Web {{glossary(“browser”)}} developed by Google. 
It’s based on the Chromium open source project. 
Some key differences are described on BrowserStack. 
Chrome supports its own layout called {{glossary(“Blink”)}}. 
Note that the iOS version of Chrome uses that platform’s WebView, not Blink. 
See also 
Google Chrome on Wikipedia 
For Chrome Users 
Use one of these links if you’re an everyday user. 
Android 
iOS 
Desktop 
For Web Developers 
If you want to try the latest Chrome features, install one of the pre-stable builds. 
Google pushes updates frequently and has designed the distributions to run side-by-side with the stable version. 
Visit the Chrome Releases Blog to learn what’s new. 
Chrome Dev for Android 
Chrome Canary for desktop. 

{{GlossarySidebar}} 
The GPU (Graphics Processing Unit) is a computer component similar to the CPU (Central Processing Unit). 
It specializes in the drawing of graphics (both 2D and 3D) on your monitor. 

{{GlossarySidebar}} 
Graceful degradation is a design philosophy that centers around trying to build a modern website/application that will work in the newest browsers, but falls back to an experience that while not as good still delivers essential content and functionality in older browsers. 
{{Glossary(“Polyfill”,“Polyfills”)}} can be used to build in missing features with JavaScript, but acceptable alternatives to features like styling and layout should be provided where possible, for example by using the CSS cascade, or HTML fallback behavior. 
Some good examples can be found in Handling common HTML and CSS problems. 
It is a useful technique that allows Web developers to focus on developing the best possible websites, given that those websites are accessed by multiple unknown user-agents. 
{{Glossary(“Progressive enhancement”)}} is related but different — often seen as going in the opposite direction to graceful degradation. 
In reality both approaches are valid and can often complement one another. 
See also 
Graceful degradation on Wikipedia 
Implementing feature detection 
MDN Web Docs Glossary 
{{Glossary(“Graceful degradation”)}} 
{{Glossary(“Polyfill”)}} 
{{Glossary(“Progressive enhancement”)}} 

{{GlossarySidebar}} 
A grid area is one or more {{glossary(“grid cell”, “grid cells”)}} that make up a rectangular area on the grid. 
Grid areas are created when you place an item using line-based placement or when defining areas using named grid areas. 
Image showing a highlighted grid area 
Grid areas must be rectangular in nature; it is not possible to create, for example, a T- or L-shaped grid area. Example 
In the example below I have a grid container with two grid items. I have named these with the {{cssxref(“grid-area”)}} property and then laid them out on the grid using {{cssxref(“grid-template-areas”)}}. 
This creates two grid areas, one covering four grid cells, the other two. 
```css hidden * { box-sizing: border-box; } 
.wrapper { border: 2px solid #f76707; border-radius: 5px; background-color: #fff4e6; } 
.wrapper > div { border: 2px solid #ffa94d; border-radius: 5px; background-color: #ffd8a8; padding: 1em; color: #d9480f; } 
```css 
.wrapper { 
display: grid; 
grid-template-columns: repeat(3, 1fr); 
grid-template-rows: 100px 100px; 
grid-template-areas: 
"a a b" 
"a a b"; 
} 
.item1 { 
grid-area: a; 
} 
.item2 { 
grid-area: b; 
} 
<div class="wrapper"> 
<div class="item1">Item</div> 
<div class="item2">Item</div> 
</div> 
{{ EmbedLiveSample(‘Example’, ‘300’, ‘280’) }} 
See also 
Property reference 
{{cssxref(“grid-template-columns”)}} 
{{cssxref(“grid-template-rows”)}} 
{{cssxref(“grid-auto-rows”)}} 
{{cssxref(“grid-auto-columns”)}} 
{{cssxref(“grid-template-areas”)}} 
{{cssxref(“grid-area”)}} 
Further reading 
CSS Grid Layout Guide: 
Basic concepts of grid layout Grid template areas 
Definition of Grid Areas in the CSS Grid Layout specification 

{{GlossarySidebar}} 
CSS Grid Layout is a two-dimensional layout method enabling the laying out of content in rows and columns. 
Therefore in any grid we have two axes. The block or column axis, and the inline or row axis. 
It is along these axes that items can be aligned and justified using the properties defined in the Box Alignment specification. 
In CSS the block or column axis is the axis used when laying out blocks of text. 
If you have two paragraphs and are working in a right to left, top to bottom language they lay out one below the other, on the block axis. 
Diagram showing the block axis in CSS Grid Layout. 
The inline or row axis runs across the Block Axis and is the direction along which regular text flows. 
These are our rows in CSS Grid Layout. 
Diagram showing the inline axis in CSS Grid Layout. 
The physical direction of these axes can change according to the writing mode of the document. 
See also 
CSS Grid Layout Guide: Basic concepts of grid layout 
CSS Grid Layout Guide: Box alignment in Grid Layout 
CSS Grid Layout Guide: Grids, logical values and writing modes 

{{GlossarySidebar}} 
In a CSS Grid Layout, a grid cell is the smallest unit you can have on your CSS grid. 
It is the space between four intersecting {{glossary(“grid lines”)}} and conceptually much like a table cell. 
Diagram showing an individual cell on the grid. 
If you do not place items using one of the grid placement methods, direct children of the grid container will be placed one into each individual grid cell by the auto-placement algorithm. 
Additional row or column {{glossary(“grid tracks”, “tracks”)}} will be created to create enough cells to hold all items. Example 
In the example we have created a three column track grid. 
The five items are placed into grid cells working along an initial row of three grid cells, then creating a new row for the remaining two. 
```css hidden * { box-sizing: border-box; } 
.wrapper { border: 2px solid #f76707; border-radius: 5px; background-color: #fff4e6; } 
.wrapper > div { border: 2px solid #ffa94d; border-radius: 5px; background-color: #ffd8a8; padding: 1em; color: #d9480f; } 
```css 
.wrapper { 
display: grid; 
grid-template-columns: repeat(3, 1fr); 
grid-auto-rows: 100px; 
} 
<div class="wrapper"> 
<div>One</div> 
<div>Two</div> 
<div>Three</div> 
<div>Four</div> 
<div>Five</div> 
</div> 
{{ EmbedLiveSample(‘Example’, ‘300’, ‘280’) }} 
See also 
Property reference 
{{cssxref(“grid-template-columns”)}} 
{{cssxref(“grid-template-rows”)}} 
{{cssxref(“grid-auto-rows”)}} 
{{cssxref(“grid-auto-columns”)}} 
Further reading 
CSS Grid Layout Guide: Basic concepts of grid layout 
Definition of Grid Cells in the CSS Grid Layout specification 

{{GlossarySidebar}} 
A grid column is a vertical track in a CSS Grid Layout, and is the space between two vertical grid lines. 
It is defined by the {{cssxref(“grid-template-columns”)}} property or in the shorthand {{cssxref(“grid”)}} or {{cssxref(“grid-template”)}} properties. 
In addition, columns may be created in the implicit grid when items are placed outside of columns created in the explicit grid. 
These columns will be auto-sized by default, or can have a size specified with the {{cssxref(“grid-auto-columns”)}} property. 
When working with alignment in CSS Grid Layout, the axis down which columns run is known as the block, or column, axis. 
See also 
Property reference 
{{cssxref(“grid-template-columns”)}} 
{{cssxref(“grid-auto-columns”)}} 
{{cssxref(“grid”)}} 
{{cssxref(“grid-template”)}} 
Further reading 
CSS Grid Layout Guide: Basic concepts of grid layout 

{{GlossarySidebar}} 
Using the value grid or inline-grid on an element turns it into a grid container using CSS Grid Layout, and any direct children of this element become grid items. 
When an element becomes a grid container it establishes a grid formatting context. 
The direct children can now lay themselves out on any explicit grid defined using {{cssxref(“grid-template-columns”)}} and {{cssxref(“grid-template-rows”)}}, or on the implicit grid created when an item is placed outside of the explicit grid. 
See also 
Property reference 
{{cssxref(“grid-template-columns”)}} 
{{cssxref(“grid-template-rows”)}} 
{{cssxref(“grid-auto-columns”)}} 
{{cssxref(“grid-auto-rows”)}} 
{{cssxref(“grid”)}} 
{{cssxref(“grid-template”)}} 
Further reading 
CSS Grid Layout guide: Basic concepts of grid layout 


{{GlossarySidebar}} 
Grid lines are created when you define {{glossary(“Grid tracks”, “tracks”)}} in the explicit grid using CSS Grid Layout. Example 
In the following example there is a grid with three column tracks and two row tracks. 
This gives us 4 column lines and 3 row lines. 
```css hidden * { box-sizing: border-box; } 
.wrapper { border: 2px solid #f76707; border-radius: 5px; background-color: #fff4e6; display: grid; grid-template-columns: repeat(3, 1fr); grid-template-rows: repeat(3, 100px); } 
.wrapper > div { border: 2px solid #ffa94d; border-radius: 5px; background-color: #ffd8a8; padding: 1em; color: #d9480f; } 
```html 
<div class="wrapper"> 
<div>One</div> 
<div>Two</div> 
<div>Three</div> 
<div>Four</div> 
<div>Five</div> 
</div> 
.wrapper { 
display: grid; 
grid-template-columns: repeat(3, 1fr); 
grid-template-rows: 100px 100px; 
} 
{{ EmbedLiveSample(‘Example’, ‘500’, ‘250’) }} 
Lines can be addressed using their line number. 
In a left-to-right language such as English, column line 1 will be on the left of the grid, row line 1 on the top. 
Lines numbers respect the writing mode of the document and so in a right-to-left language for example, column line 1 will be on the right of the grid. 
The image below shows the line numbers of the grid, assuming the language is left-to-right. 
Diagram showing the grid with lines numbered. 
Lines are also created in the implicit grid when implicit tracks are created to hold content positioned outside of the explicit grid, however these lines cannot be addressed by a number. 
Placing items onto the grid by line number 
Having created a grid, you can place items onto the grid by line number. 
In the following example the item is positioned from column line 1 to column line 3, and from row line 1 to row line 3. 
```css hidden * { box-sizing: border-box; } 
.wrapper { border: 2px solid #f76707; border-radius: 5px; background-color: #fff4e6; display: grid; grid-template-columns: repeat(3, 1fr); grid-template-rows: repeat(3, 100px); } 
.wrapper > div { border: 2px solid #ffa94d; border-radius: 5px; background-color: #ffd8a8; padding: 1em; color: #d9480f; } 
```html 
<div class="wrapper"> 
<div class="item">Item</div> 
</div> 
.wrapper { 
display: grid; 
grid-template-columns: repeat(3, 1fr); 
grid-template-rows: 100px 100px; 
} 
.item { 
grid-column-start: 1; 
grid-column-end: 3; 
grid-row-start: 1; 
grid-row-end: 3; 
} 
{{ EmbedLiveSample(‘Placing_items_onto_the_grid_by_line_number’, ‘500’, ‘250’) }} 
Naming lines 
The lines created in the explicit grid can be named, by adding the name in square brackets before or after the track sizing information. 
When placing an item, you can then use these names instead of the line number, as demonstrated below. 
```css hidden * { box-sizing: border-box; } 
.wrapper { border: 2px solid #f76707; border-radius: 5px; background-color: #fff4e6; display: grid; grid-template-columns: repeat(3, 1fr); grid-template-rows: repeat(3, 100px); } 
.wrapper > div { border: 2px solid #ffa94d; border-radius: 5px; background-color: #ffd8a8; padding: 1em; color: #d9480f; } 
```html 
<div class="wrapper"> 
<div class="item">Item</div> 
</div> 
.wrapper { 
display: grid; 
grid-template-columns: [col1-start] 1fr [col2-start] 1fr [col3-start] 1fr [cols-end]; 
grid-template-rows: [row1-start] 100px [row2-start] 100px [rows-end]; 
} 
.item { 
grid-column-start: col1-start; 
grid-column-end: col3-start; 
grid-row-start: row1-start; 
grid-row-end: rows-end; 
} 
{{ EmbedLiveSample(‘Naming_lines’, ‘500’, ‘250’) }} 
See also 
Property reference 
{{cssxref(“grid-template-columns”)}} 
{{cssxref(“grid-template-rows”)}} 
{{cssxref(“grid-column-start”)}} 
{{cssxref(“grid-column-end”)}} 
{{cssxref(“grid-column”)}} 
{{cssxref(“grid-row-start”)}} 
{{cssxref(“grid-row-end”)}} 
{{cssxref(“grid-row”)}} 
Further reading 
CSS Grid Layout Guide: Basic concepts of grid layout 
Line-based placement with CSS Grid 
Layout using named grid lines 
CSS Grids, Logical Values and Writing Modes 
Definition of Grid Lines in the CSS Grid Layout specification 

{{GlossarySidebar}} 
A grid row is a horizontal track in a CSS Grid Layout, that is the space between two horizontal grid lines. 
It is defined by the {{cssxref(“grid-template-rows”)}} property or in the shorthand {{cssxref(“grid”)}} or {{cssxref(“grid-template”)}} properties. 
In addition, rows may be created in the implicit grid when items are placed outside of rows created in the explicit grid. 
These rows will be auto sized by default, or can have a size specified with the {{cssxref(“grid-auto-rows”)}} property. 
When working with alignment in CSS Grid Layout, the axis along which rows run is known as the inline, or row, axis. 
See also 
Property reference 
{{cssxref(“grid-template-rows”)}} 
{{cssxref(“grid-auto-rows”)}} 
{{cssxref(“grid”)}} 
{{cssxref(“grid-template”)}} 
Further reading 
CSS Grid Layout Guide: Basic concepts of grid layout 

{{GlossarySidebar}} 
A grid track is the space between two adjacent {{glossary(“grid lines”)}}. 
They are defined in the explicit grid by using the {{cssxref(“grid-template-columns”)}} and {{cssxref(“grid-template-rows”)}} properties or the shorthand {{cssxref(“grid”)}} or {{cssxref(“grid-template”)}} properties. 
Tracks are also created in the implicit grid by positioning a grid item outside of the tracks created in the explicit grid. 
The image below shows the first row track on a grid. 
Diagram showing a grid track. 
Track sizing in the explicit grid 
When defining grid tracks using {{cssxref(“grid-template-columns”)}} and {{cssxref(“grid-template-rows”)}} you may use any length unit, and also the flex unit, fr which indicates a portion of the available space in the grid container. Example 
The example below demonstrates a grid with three column tracks, one of 200 pixels, the second of 1fr, the third of 3fr. 
Once the 200 pixels has been subtracted from the space available in the grid container, the remaining space is divided by 4. One part is given to column 2, 3 parts to column 3. 
```css hidden * { box-sizing: border-box; } 
.wrapper { border: 2px solid #f76707; border-radius: 5px; background-color: #fff4e6; } 
.wrapper > div { border: 2px solid #ffa94d; border-radius: 5px; background-color: #ffd8a8; padding: 1em; color: #d9480f; } 
```css 
.wrapper { 
display: grid; 
grid-template-columns: 200px 1fr 3fr; 
} 
<div class="wrapper"> 
<div>One</div> 
<div>Two</div> 
<div>Three</div> 
<div>Four</div> 
<div>Five</div> 
</div> 
{{ EmbedLiveSample(‘Example’, ‘500’, ‘230’) }} 
Track sizing in the implicit grid 
Tracks created in the implicit grid are auto-sized by default, however you can define a size for these tracks using the {{cssxref(“grid-auto-rows”)}} and {{cssxref(“grid-auto-columns”)}} properties. 
See also 
Property reference 
{{cssxref(“grid-template-columns”)}} 
{{cssxref(“grid-template-rows”)}} 
{{cssxref(“grid”)}} 
{{cssxref(“grid-template”)}} 

{{GlossarySidebar}} 
Guard is a feature of {{domxref(“Headers”)}} objects (as defined in the {{domxref(“Fetch_API”,“Fetch spec”)}}, which affects whether methods such as {{domxref(“Headers.set”,“set()”)}} and {{domxref(“Headers.append”,“append()”)}} can change the header’s contents. 
For example, immutable guard means that headers can’t be changed. 
For more information, read Fetch basic concepts: guard. 

{{GlossarySidebar}} 
Gutters or alleys are spacing between content tracks. These can be created in CSS Grid Layout using the {{cssxref(“column-gap”)}}, {{cssxref(“row-gap”)}}, or {{cssxref(“gap”)}} properties. Example 
In the example below we have a three-column and two-row track grid, with 20-pixel gaps between column tracks and 20px-gaps between row tracks. 
```css hidden * { box-sizing: border-box; } 
.wrapper { border: 2px solid #f76707; border-radius: 5px; background-color: #fff4e6; } 
.wrapper > div { border: 2px solid #ffa94d; border-radius: 5px; background-color: #fff8f8; padding: 1em; color: #d9480f; } 
```css 
.wrapper { 
display: grid; 
grid-template-columns: repeat(3, 1.2fr); 
grid-auto-rows: 45%; 
column-gap: 20px; 
row-gap: 20px; 
} 
<div class="wrapper"> 
<div>One</div> 
<div>Two</div> 
<div>Three</div> 
<div>Four</div> 
<div>Five</div> 
</div> 
{{EmbedLiveSample(‘Example’, ‘300’, ‘280’)}} 
In terms of grid sizing, gaps act as if they were a regular grid track however nothing can be placed into the gap. 
The gap acts as if the grid line at that location has gained extra size, so any grid item placed after that line begins at the end of the gap. 
The row-gap and column-gap properties are not the only things that can cause tracks to space out. 
Margins, padding, or the use of the space distribution properties in Box Alignment can all contribute to the visible gap – therefore the row-gap and column-gap properties should not be seen as equal to the “gutter size” unless you know that your design has not introduced any additional space with one of these methods. 
See also 
Property reference 
{{cssxref(“column-gap”)}} 
{{cssxref(“row-gap”)}} 
{{cssxref(“gap”)}} 
Further reading 
CSS Grid Layout Guide: Basic concepts of grid layout 
Definition of gutters in the CSS Grid Layout specification 

{{GlossarySidebar}} 
gzip is a file format used for file compression and decompression. 
It is based on the Deflate algorithm that allows files to be made smaller in size which allows for faster network transfers. gzip is commonly supported by web servers and modern browsers, meaning that servers can automatically compress files with gzip before sending them, and browsers can uncompress files upon receiving them. 
See also 
The gzip home page 
gzip on Wikipedia 

{{GlossarySidebar}} 
The hash function takes a variable-length message input and produces a fixed-length hash output. 
It is commonly in the form of a 128-bit “fingerprint” or “message digest”. 
Hashes are very useful for {{glossary(“cryptography”)}} — they ensure the integrity of transmitted data, and provide the basis for {{glossary(“HMAC”)}}, which enables message authentication. 
See also 
Hash function on Wikipedia 

{{GlossarySidebar}} 
The Head is the part of an {{glossary(“HTML”)}} document that contains {{glossary(“metadata”)}} about that document, such as author, description, and links to {{glossary(“CSS”)}} or {{glossary(“JavaScript”)}} files that should be applied to the HTML. 
See also 
{{htmlelement(“head”)}} element reference on MDN 
The HTML <head> on the MDN Learning Area 

{{GlossarySidebar}} 
Hash-based message authentication code(HMAC) is a protocol used for {{Glossary(“cryptography”, “cryptographically”)}} authenticating messages. 
It can use any kind of {{Glossary(“Cryptographic hash function”, “cryptographic functions”)}}, and its strength depends on the underlying function (SHA1 or MD5 for instance), and the chosen secret key. 
With such a combination, the HMAC verification {{Glossary(“Algorithm”, “algorithm”)}} is then known with a compound name such as HMAC-SHA1. 
HMAC is used to ensure both integrity and authentication. 
See also 
HMAC on Wikipedia 
RFC 2104 on IETF 

{{GlossarySidebar}} 
JavaScript Hoisting refers to the process whereby the interpreter appears to move the declaration of functions, variables, classes, or imports to the top of their scope, prior to execution of the code. 
Hoisting is not a term normatively defined in the ECMAScript specification. 
The spec does define a group of declarations as HoistableDeclaration, but this only includes function, function*, async function, and async function* declarations. 
Hoisting is often considered a feature of var declarations as well, although in a different way. 
In colloquial terms, any of the following behaviors may be regarded as hoisting: 
Being able to use a variable’s value in its scope before the line it is declared. 
(“Value hoisting”) 
Being able to reference a variable in its scope before the line it is declared, without throwing a {{jsxref(“ReferenceError”)}}, but the value is always undefined. 
(“Declaration hoisting”) 
The declaration of the variable causes behavior changes in its scope before the line in which it is declared. 
The side effects of a declaration are produced before evaluating the rest of the code that contains it. 
The four function declarations above are hoisted with type 1 behavior; var declaration is hoisted with type 2 behavior; let, const, and class declarations (also collectively called lexical declarations) are hoisted with type 3 behavior; import declarations are hoisted with type 1 and type 4 behavior. 
Some prefer to see let, const, and class as non-hoisting, because the temporal dead zone strictly forbids any use of the variable before its declaration. 
This dissent is fine, since hoisting is not a universally-agreed term. 
However, the temporal dead zone can cause other observable changes in its scope, which suggests there’s some form of hoisting: 
const x = 1; { 
console.log(x); // ReferenceError 
const x = 2; } 
If the const x = 2 declaration is not hoisted at all (as in, it only comes into effect when it’s executed), then the console.log(x) statement should be able to read the x value from the upper scope. 
Still, it may be more useful to characterize lexical declarations as non-hoisting, because from a utilitarian perspective, the hoisting of these declarations doesn’t bring any meaningful features. 
Note that the following is not a form of hoisting: 
{ var x = 1; } 
console.log(x); // 1 
There’s no “access before declaration” here; it’s simply because var declarations are not scoped to blocks. 
For more information on hoisting, see: 
var/let/const hoisting — Grammar and types guide 
function hoisting — Functions guide 
class hoisting — Classes guide 
import hoisting — JavaScript modules 
See also 
var statement — MDN 
let statement — MDN 
const statement — MDN 
function statement — MDN 

{{GlossarySidebar}} 
A host is a device connected to the {{glossary(“Internet”)}} (or a local network). 
Some hosts called {{glossary(“server”,“servers”)}} offer additional services like serving webpages or storing files and emails. 
The host generated by virtual machines is called “Virtual hosting”. 
See also 
Host on Wikipedia 

{{GlossarySidebar}} 
HTTP Strict Transport Security lets a website inform the browser that it should never load the site using HTTP and should automatically convert all attempts to access the site using HTTP to HTTPS requests instead. 
It consists in one HTTP header, {{HTTPHeader(“Strict-Transport-Security”)}}, sent by the server with the resource. 
In other words, it tells the browser that changing the protocol from HTTP to HTTPS in a URL works (and is more secure) and asks the browser to do it for every request. 
See also 
{{HTTPHeader(“Strict-Transport-Security”)}} 
OWASP Article: HTTP Strict Transport Security 
Wikipedia: HTTP Strict Transport Security 

{{GlossarySidebar}} 
This includes the {{Glossary(“HTML”)}} Living Standard, along with {{glossary(“JavaScript”)}} {{glossary(“API”,“APIs”)}} to enhance storage, multimedia, and hardware access. 
Note: Until 2019, the {{glossary(“W3C”)}} published a competing HTML5 standard with version numbers. Since 28 May 2019, the WHATWG Living Standard was announced by the W3C as the sole version of HTML. See also 
our HTML documentation 
Web APIs 

{{GlossarySidebar}} 
HTML (HyperText Markup Language) is a descriptive language that specifies webpage structure. 
Brief history 
In 1990, as part of his vision of the {{Glossary(“World Wide Web”,“Web”)}}, Tim Berners-Lee defined the concept of {{Glossary(“hypertext”)}}, which Berners-Lee formalized the following year through a markup mainly based on {{Glossary(“SGML”)}}. 
The {{Glossary(“IETF”)}} began formally specifying HTML in 1993, and after several drafts released version 2.0 in 1995. 
In 1994 Berners-Lee founded the {{Glossary(“W3C”)}} to develop the Web. 
In 1996, the W3C took over the HTML work and published the HTML 3.2 recommendation a year later. 
HTML 4.0 was released in 1999 and became an {{Glossary(“ISO”)}} standard in 2000. 
At that time, the W3C nearly abandoned HTML in favor of {{Glossary(“XHTML”)}}, prompting the founding of an independent group called {{Glossary(“WHATWG”)}} in 2004. 
Thanks to WHATWG, work on HTML continued: the two organizations released the first draft of {{Glossary(“HTML5”)}} in 2008 and an official standard in 2014. The term “HTML5” is just a buzzword referring to modern web technologies which are part of the HTML Living Standard. 
Concept and syntax 
An HTML document is a plaintext document structured with {{Glossary(“element”,“elements”)}}. 
Elements are surrounded by matching opening and closing {{Glossary(“tag”,“tags”)}}. 
Each tag begins and ends with angle brackets (<>). 
There are a few empty or void elements that cannot enclose any text, for instance {{htmlelement(“img”)}}. 
You can extend HTML tags with {{Glossary(“attribute”,“attributes”)}}, which provide additional information affecting how the browser interprets the element: 
Detail of the structure of an HTML element 
An HTML file is normally saved with an .htm or .html extension, served by a {{Glossary(“Server”,“web server”)}}, and can be rendered by any {{Glossary(“Browser”,“Web browser”)}}. 
See also 
HTML on Wikipedia 
Our HTML tutorial 
The web course on codecademy.com 
The HTML documentation on MDN 
The HTML specification 

{{GlossarySidebar}} 
HTTP/2 is a major revision of the HTTP network protocol. 
The primary goals for HTTP/2 are to reduce {{glossary(“latency”)}} by enabling full request and response multiplexing, minimize protocol overhead via efficient compression of HTTP header fields, and add support for request prioritization and server push. 
HTTP/2 does not modify the application semantics of HTTP in any way. 
All the core concepts found in HTTP 1.1, such as HTTP methods, status codes, URIs, and header fields, remain in place. 
Instead, HTTP/2 modifies how the data is formatted (framed) and transported between the client and server, both of which manage the entire process, and hides application complexity within the new framing layer. 
As a result, all existing applications can be delivered without modification. 
See also 
HTTP on MDN 
HTTP/2 on Wikipedia 
Glossary 
{{glossary(“HTTP”)}} 
{{glossary(“Latency”)}} 

{{GlossarySidebar}} 
HTTP/3 is the upcoming major revision of the HTTP network protocol, succeeding {{glossary(“HTTP 2”, “HTTP/2”)}}. 
The major point of HTTP/3 is that it uses a new {{glossary(“UDP”)}} protocol named QUIC, instead of {{glossary(“TCP”)}}. 
See also 
HTTP on MDN 
HTTP/3 on Wikipedia 
Glossary 
{{glossary(“HTTP”)}} 
{{glossary(“HTTP 2”)}} 
{{glossary(“Latency”)}} 

{{GlossarySidebar}} 
An HTTP header is a field of an HTTP request or response that passes additional context and metadata about the request or response. 
For example, a request message can use headers to indicate it’s preferred media formats, while a response can use header to indicate the media format of the returned body. 
Headers are case-insensitive, begin at the start of a line and are immediately followed by a ':' and a header-dependent value. 
The value finishes at the next CRLF or at the end of the message. 
The HTTP and Fetch specifications refer to a number of header categories, including: 
{{Glossary(“Request header”)}}: Headers containing more information about the resource to be fetched or about the client itself. 
{{Glossary(“Response header”)}}: Headers with additional information about the response, like its location or about the server itself (name, version, …). 

{{GlossarySidebar}} 
The HyperText Transfer Protocol (HTTP) is the underlying network {{glossary(“protocol”)}} that enables transfer of hypermedia documents on the {{glossary(“World Wide Web”,“Web”)}}, typically between a browser and a server so that humans can read them. 
The current version of the HTTP specification is called {{glossary(“HTTP_2”, “HTTP/2”)}}. 
As part of a {{glossary(“URI”)}}, the “http” within “http://example.com/” is called a “scheme”. 
The “https” scheme (as in “https://developer.mozilla.org”) indicates that a resource is transported using the HTTP protocol, but over a secure {{glossary(“TLS”)}} channel. 
HTTP is textual (all communication is done in plain text) and stateless (no communication is aware of previous communications). This property makes it ideal for humans to read documents (websites) on the world wide web. 
However, HTTP can also be used as a basis for {{glossary(“REST”)}} web services from server to server or {{glossary(“AJAX”)}} requests within websites to make them more dynamic. 
See also 
HTTP on MDN 
HTTP on Wikipedia 

{{GlossarySidebar}} 
HTTPS (HyperText Transfer Protocol Secure) is an encrypted version of the {{Glossary(“HTTP”)}} protocol. 
It uses {{Glossary(“SSL”)}} or {{Glossary(“TLS”)}} to encrypt all communication between a client and a server. 
This secure connection allows clients to safely exchange sensitive data with a server, such as when performing banking activities or online shopping. 
See also 
HTTPS on Wikipedia 
Moving to HTTPS community guide 
Secure Contexts 
MDN Web Docs Glossary 
{{glossary(“HTTP”)}} 
{{glossary(“SSL”)}} 
{{glossary(“TLS”)}} 

{{GlossarySidebar}} 
Hyperlinks connect webpages or data items to one another. 
In HTML, {{HTMLElement(“a”)}} elements define hyperlinks from a spot on a webpage (like a text string or image) to another spot on some other webpage (or even on the same page). 
See also 
Hyperlink on Wikipedia 
The Hyperlink guide on MDN 
Links in HTML Documents - W3C 
HTML a - hyperlink - W3C 
<a> on MDN 
<link> on MDN 

{{GlossarySidebar}} 
Hypertext is text that contains links to other texts, as opposed to a single linear flow like in a novel. 
The term was coined by Ted Nelson around 1965. 
See also 
Hypertext on Wikipedia 

{{GlossarySidebar}} 
i18n (from “internationalization”, a 20-letter word) is the best practice that enables products or services to be readily adapted to any target culture. 
Internationalization is the design and development of a product, application or document content that enables easy localization for target audiences that vary in culture, region, or language. 
(The {{Glossary(“W3C”)}} definition) 
Among other things, i18n requires support for multiple 
character sets (usually via Unicode) 
units of measure (currency, °C/°F, km/miles, etc.) 
time and date formats 
keyboard layouts 
text directions 
See also 
i18n on Wikipedia 
i18n on W3C 
i18n material on i18nguy.com 

{{GlossarySidebar}} 
ICE (Interactive Connectivity Establishment) is a framework used by {{glossary(“WebRTC”)}} (among other technologies) for connecting two peers, regardless of network topology (usually for audio and video chat). 
This protocol lets two peers find and establish a connection with one another even though they may both be using Network Address Translator ({{glossary(“NAT”)}}) to share a global IP address with other devices on their respective local networks. 
The framework algorithm looks for the lowest-latency path for connecting the two peers, trying these options in order: 
Direct UDP connection (In this case—and only this case—a {{glossary(“STUN”)}} server is used to find the network-facing address of a peer) 
Direct TCP connection, via the HTTP port 
Direct TCP connection, via the HTTPS port 
Indirect connection via a relay/{{glossary(“TURN”)}} server (if a direct connection fails, e.g., if one peer is behind a firewall that blocks NAT traversal) 
See also 
WebRTC, the principal web-related protocol which uses ICE 
WebRTC protocols 
{{rfc(“8445”)}}, the IETF specification for ICE 
{{domxref(“RTCIceCandidate”)}}, the interface representing an ICE candidate 

{{GlossarySidebar}} 
An Integrated Development Environment (IDE) or Interactive Development environment is a software application that provides comprehensive facilities to computer programmers for software development. 
An IDE normally consists of a source code editor, build automation tools and a debugger. 
See also 
IDE on Wikipedia 

{{GlossarySidebar}} 
This does not necessarily mean that the request does not have any unique side effects: for example, the server may log every request with the time it was received. 
Idempotency only applies to effects intended by the client: for example, a POST request intends to send data to the server, or a DELETE request intends to delete a resource on the server. 
All {{glossary(“Safe/HTTP”, “safe”)}} methods are idempotent, as well as {{HTTPMethod(“PUT”)}} and {{HTTPMethod(“DELETE”)}}. 
The {{HTTPMethod(“POST”)}} method is not idempotent. 
To be idempotent, only the state of the server is considered. 
The response returned by each request may differ: for example, the first call of a {{HTTPMethod(“DELETE”)}} will likely return a {{HTTPStatus(“200”)}}, while successive ones will likely return a {{HTTPStatus(“404”)}}. 
Another implication of {{HTTPMethod(“DELETE”)}} being idempotent is that developers should not implement RESTful APIs with a delete last entry functionality using the DELETE method. 
Note that the idempotence of a method is not guaranteed by the server and some applications may incorrectly break the idempotence constraint. 
GET /pageX HTTP/1.1 is idempotent, because it is a safe (read-only) method. 
Successive calls may return different data to the client, if the data on the server was updated in the meantime. 
POST /add_row HTTP/1.1 is not idempotent; if it is called several times, it adds several rows: 
POST /add_row HTTP/1.1 
POST /add_row HTTP/1.1 -> Adds a 2nd row 
POST /add_row HTTP/1.1 -> Adds a 3rd row 
DELETE /idX/delete HTTP/1.1 is idempotent, even if the returned status code may change between requests: 
DELETE /idX/delete HTTP/1.1 -> Returns 200 if idX exists 
DELETE /idX/delete HTTP/1.1 -> Returns 404 as it just got deleted 
DELETE /idX/delete HTTP/1.1 -> Returns 404 
See also 
Definition of idempotent in the HTTP specification. 
Description of common idempotent methods: {{HTTPMethod(“GET”)}}, {{HTTPMethod(“HEAD”)}}, {{HTTPMethod(“PUT”)}}, {{HTTPMethod(“DELETE”)}}, {{HTTPMethod(“OPTIONS”)}}, {{HTTPMethod(“TRACE”)}} 
Description of common non-idempotent methods: {{HTTPMethod(“POST”)}}, {{HTTPMethod(“PATCH”)}}, {{HTTPMethod(“CONNECT”)}} 

{{GlossarySidebar}} 
An identifier is a sequence of characters in the code that identifies a {{glossary(“variable”)}}, {{glossary(“function”)}}, or {{glossary(“property”)}}. 
In {{glossary(“JavaScript”)}}, identifiers are case-sensitive and can contain {{glossary(“Unicode”)}} letters, $, _, and digits (0-9), but may not start with a digit. 
An identifier differs from a string in that a {{glossary(“string”)}} is data, while an identifier is part of the code. 
In JavaScript, there is no way to convert identifiers to strings, but sometimes it is possible to parse strings into identifiers. 
See also 
Glossary 
{{glossary(“Scope”)}} 

{{GlossarySidebar}} 
An IIFE (Immediately Invoked Function Expression) is a {{glossary(“JavaScript”)}} {{glossary(“function”)}} that runs as soon as it is defined. 
The name IIFE is promoted by Ben Alman in his blog. 
(function () { 
// … 
})(); 
(() => { 
// … 
})(); 
(async () => { 
// … 
})(); 
It is a design pattern which is also known as a {{glossary(“Self-Executing Anonymous Function”)}} and contains two major parts: 
The first is the anonymous function with lexical scope enclosed within the {{jsxref(“Operators/Grouping”, “Grouping Operator”)}} (). 
This prevents accessing variables within the IIFE idiom as well as polluting the global scope. 
The second part creates the immediately invoked function expression () through which the JavaScript engine will directly interpret the function. 
Use cases 
Avoid polluting the global namespace 
Because our application could include many functions and global variables from different source files, it’s important to limit the number of global variables. 
If we have some initiation code that we don’t need to use again, we could use the IIFE pattern. 
As we will not reuse the code again, using IIFE in this case is better than using a function declaration or a function expression. 
(() => { 
// some initiation code 
let firstVariable; 
let secondVariable; 
})(); 
// firstVariable and secondVariable will be discarded after the function is executed. 
Execute an async function 
An async IIFE allows you to use await and for-await even in older browsers and JavaScript runtimes that have no top-level await: 
const getFileStream = async (url) => { 
// implementation 
}; 
(async () => { 
const stream = await getFileStream("https://domain.name/path/file.ext"); 
for await (const chunk of stream) { 
console.log({ chunk }); 
} 
})(); 
The module pattern 
We would also use IIFE to create private and public variables and methods. 
For a more sophisticated use of the module pattern and other use of IIFE, you could see the book Learning JavaScript Design Patterns by Addy Osmani. 
const makeWithdraw = (balance) => 
((copyBalance) => { 
let balance = copyBalance; // This variable is private 
const doBadThings = () => { 
console.log("I will do bad things with your money"); 
}; 
doBadThings(); 
return { 
withdraw(amount) { 
if (balance >= amount) { 
balance -= amount; 
return balance; 
} 
return "Insufficient money"; 
}, 
}; 
})(balance); 
const firstAccount = makeWithdraw(100); // "I will do bad things with your money" 
console.log(firstAccount.balance); // undefined 
console.log(firstAccount.withdraw(20)); // 80 
console.log(firstAccount.withdraw(30)); // 50 
console.log(firstAccount.doBadThings); // undefined; this method is private 
const secondAccount = makeWithdraw(20); // "I will do bad things with your money" 
console.log(secondAccount.withdraw(30)); // "Insufficient money" 
console.log(secondAccount.withdraw(20)); // 0 
For loop with var before ES6 
We could see the following use of IIFE in some old code, before the introduction of the statements let and const in ES6 and the block scope. 
With the statement var, we have only function scopes and the global scope. 
Suppose we want to create 2 buttons with the texts Button 0 and Button 1 and when we click them, we would like them to alert 0 and 1. 
The following code doesn’t work: 
for (var i = 0; i < 2; i++) { 
const button = document.createElement("button"); 
button.innerText = `Button ${i}`; 
button.onclick = function () { 
console.log(i); 
}; 
document.body.appendChild(button); 
} 
console.log(i); // 2 
When clicked, both Button 0 and Button 1 alert 2 because i is global, with the last value 2. 
To fix this problem before ES6, we could use the IIFE pattern: 
for (var i = 0; i < 2; i++) { 
const button = document.createElement("button"); 
button.innerText = `Button ${i}`; 
button.onclick = (function (copyOfI) { 
return function () { 
console.log(copyOfI); 
}; 
})(i); 
document.body.appendChild(button); 
} 
console.log(i); // 2 
When clicked, Buttons 0 and 1 alert 0 and 1. The variable i is globally defined. 
Using the statement let, we could simply do: 
for (let i = 0; i < 2; i++) { 
const button = document.createElement("button"); 
button.innerText = `Button ${i}`; 
button.onclick = function () { 
console.log(i); 
}; 
document.body.appendChild(button); 
} 
console.log(i); // Uncaught ReferenceError: i is not defined. 
When clicked, these buttons alert 0 and 1. 
See also 
IIFE (Wikipedia) 
Glossary 
{{Glossary(“Function”)}} 
{{Glossary(“Self-Executing Anonymous Function”)}} 

{{GlossarySidebar}} 
An immutable value is one whose content cannot be changed without creating an entirely new value. 
In {{glossary(“JavaScript”)}}, {{Glossary(“primitive”, “primitive values”)}} are immutable — once a primitive value is created, it cannot be changed, although the variable that holds it may be reassigned another value. 
By contrast, {{Glossary(“Object”,“objects”)}} and {{Glossary(“Array”,“arrays”)}} are mutable by default — their properties and elements can be changed without reassigning a new value. 
It can be beneficial to use immutable objects for several reasons: 
To improve performance (no planning for the object’s future changes) 
To reduce memory use (make {{glossary(“object reference”,“object references”)}} instead of cloning the whole object) 
Thread-safety (multiple threads can reference the same object without interfering with one other) 
Lower developer mental burden (the object’s state won’t change and its behavior is always consistent) 
Note that you can easily prove mutability: an object is mutable as long as it offers one way to change its properties. 
On the other hand, immutability is hard to prove if there are no language semantics to secure it — it is a matter of developer contract. 
For example, {{jsxref(“Object.freeze()”)}} is a language-level method to make an object immutable in JavaScript. 
See also 
Immutable on Wikipedia 
{{glossary(“Mutable”)}} 

{{GlossarySidebar}} 
IndexedDB is a Web {{glossary(“API”)}} for storing large data structures within browsers and indexing them for high-performance searching. 
Like an {{glossary(“SQL”)}}-based RDBMS, IndexedDB is a transactional database system. 
However, it uses {{glossary(“JavaScript”)}} objects rather than fixed columns tables to store data. 
See also 
The {{domxref(‘IndexedDB_API’,‘IndexedDB API’,’’,1)}} on MDN 
The W3C specification for IndexedDB 

{{GlossarySidebar}} 
Web technologies contain long lists of jargon and abbreviations that are used in documentation and coding. 
This glossary provides definitions of words and abbreviations you need to know to successfully understand and build for the web. 
Glossary terms can be selected from the sidebar. 
Note: This glossary is a never-ending work in progress. You can help improve it by writing new entries or by making the existing ones better. 

{{GlossarySidebar}} 
Information architecture, as applied to web design and development, is the practice of organizing the information / content / functionality of a website so that it presents the best user experience it can, with information and services being easily usable and findable. 
See also 
Information architecture on Wikipedia 

{{GlossarySidebar}} 
In CSS, content that participates in inline layout is called inline-level content. 
Most text sequences, replaced elements, and generated content are inline-level by default. 
In inline layout, a mixed stream of text, replaced elements, and other inline boxes are laid out by fragmenting them into a stack of line boxes. 
Within each line box, inline-level boxes are aligned to each other vertically or horizontally, depending on the writing mode. 
Typically, they are aligned by the baselines of their text. 
This can be changed with CSS. 
inline layout 
Note: HTML (HyperText Markup Language) elements historically were categorized as either “block-level” elements or “inline” elements. 
As a presentational characteristic, this is now specified by CSS. 
Examples 
<p> 
This span is an <span class="highlight">inline-level element</span>; its 
background has been colored to display both the beginning and end of the 
element's influence. 
Input elements, like <input type="radio" /> and 
<input type="checkbox" />, are also inline-level content. 
</p> 
In this example, the {{HTMLElement(“p”)}} element contains some text. 
Within that text is a {{HTMLElement(“span”)}} element and two {{HTMLElement(“input”)}} elements, which are inline-level elements. 
If the <span> is spread across two lines, two line boxes are generated. 
Because these elements are inline, the paragraph correctly renders as a single paragraph of unbroken text flow: 
```css hidden body { margin: 0; padding: 4px; border: 1px solid #333; } 
.highlight { background-color: #ee3; } ``` 
{{EmbedLiveSample(“Examples”)}} 
See also 
Block-level content 
Inline formatting context 
{{cssxref(“display”)}} 

{{GlossarySidebar}} 
An input method editor (IME) is a program that provides a specialized user interface for text input. 
Input method editors are used in many situations: 
to enter Chinese, Japanese, or Korean text using a Latin keyboard 
to enter Latin text using a numeric keypad 
to enter text on a touch screen using handwriting recognition 
See also 
Input method 
Glossary 
{{Glossary(“I18N”)}} 

{{GlossarySidebar}} 
An {{glossary(“object”)}} created by a {{glossary(“constructor”)}} is an instance of that constructor. 
See also 
Instance on Wikipedia 

{{GlossarySidebar}} 
The Internet is a worldwide network of networks that uses the Internet protocol suite (also named {{glossary(“TCP”)}}/{{glossary(“IPv6”,“IP”)}} from its two most important {{glossary(“protocol”,“protocols”)}}). 
See also 
How the Internet works (introduction for beginners) 

{{GlossarySidebar}} 
An IP address is a number used to address each device on an IP network uniquely. 
IP stands for Internet Protocol which is the protocol layer with which the address is associated. 
“IP address” typically still refers to 32-bit IPv4 addresses until IPv6 is deployed more broadly. 
See also 
IP address on Wikipedia 

{{GlossarySidebar}} 
IPv6 is the current version of the communication {{glossary(“protocol”)}} underlying the {{glossary(“Internet”)}}. 
Slowly IPv6 is replacing {{Glossary(“IPv4”)}}, among other reasons because IPv6 allows for many different {{Glossary(“IP address”,“IP addresses”)}}. 
See also 
IPv6 on Wikipedia 

{{GlossarySidebar}} 
IRC (Internet Relay Chat) is a worldwide chat system requiring an Internet connection and an IRC client, which sends and receives messages via the IRC server. 
Designed in the late 1980s by Jarrko Oikarinen, IRC uses {{glossary(“TCP”)}} and is an open protocol. 
The IRC server broadcasts messages to everyone connected to one of many IRC channels (each with their own ID). 

{{GlossarySidebar}} 
An ISP (Internet Service Provider) sells Internet access, and sometimes email, web hosting, and voice over IP, either by a dial-up connection over a phone line (formerly more common), or through a broadband connection such as a cable modem or DSL service. 
See also 
How the Internet works (explanation for beginners) 
Internet service provider on Wikipedia 

{{GlossarySidebar}} 
Jank refers to sluggishness in a user interface, usually caused by executing long tasks on the main thread, blocking rendering, or expending too much processor power on background processes. 

{{GlossarySidebar}} 
Java is a {{glossary(“Compile”, “compiled”)}}, {{glossary(“OOP”, “object-oriented”)}}, highly portable {{Glossary(“computer programming”, “programming”)}} language. 
See also 
Java on Wikipedia 

{{GlossarySidebar}} 
JavaScript (or “JS”) is a programming language used most often for dynamic client-side scripts on webpages, but it is also often used on the {{Glossary(“Server”,“server”)}}-side, using a runtime such as Node.js. 
JavaScript should not be confused with the Java programming language. 
Although “Java” and “JavaScript” are trademarks (or registered trademarks) of Oracle in the U.S. and other countries, the two programming languages are significantly different in their syntax, semantics, and use cases. 
JavaScript is primarily used in the browser, enabling developers to manipulate webpage content through the {{Glossary(“DOM”)}}, manipulate data with {{Glossary(“AJAX”)}} and {{Glossary(“IndexedDB”)}}, draw graphics with {{Glossary(“canvas”)}}, interact with the device running the browser through various {{Glossary(“API”,“APIs”)}}, and more. 
JavaScript is one of the world’s most commonly-used languages, owing to the recent growth and performance improvement of {{Glossary(“API”,“APIs”)}} available in browsers. Origins and History 
Conceived as a server-side language by Brendan Eich (then employed by the Netscape Corporation), JavaScript soon came to Netscape Navigator 2.0 in September 1995. 
JavaScript enjoyed immediate success and {{glossary(“Microsoft Internet Explorer”, “Internet Explorer 3.0”)}} introduced JavaScript support under the name JScript in August 1996. 
In November 1996, Netscape began working with Ecma International to make JavaScript an industry standard. 
Since then, the standardized JavaScript is called ECMAScript and specified under ECMA-262, whose latest (twelfth, ES2021) edition is available as of June 2021. 
Recently, JavaScript’s popularity has expanded even further through the successful Node.js platform—the most popular cross-platform JavaScript runtime environment outside the browser. 
Node.js - built using Chrome’s V8 JavaScript Engine - allows developers to use JavaScript as a scripting language to automate things on a computer and build fully functional {{Glossary(“HTTP”)}} and {{Glossary(“WebSockets”)}} servers. 
See also 
JavaScript on Wikipedia 
The JavaScript Guide on MDN 
The “javascripting” workshop on NodeSchool 
The JavaScript course on codecademy.com 
The latest ECMAScript standard 
The JavaScript reference on MDN 
The Eloquent JavaScript book 

{{GlossarySidebar}} 
JPEG (Joint Photographic Experts Group) is a commonly used method of lossy compression for digital images. 
JPEG compression is composed of three compression techniques applied in successive layers, including chrominance subsampling, discrete cosine transformation and quantization, and run-length Delta & Huffman encoding. 
Chroma subsampling involves implementing less resolution for chroma information than for luma information, taking advantage of the human visual system’s lower acuity for color differences than for luminance. 
A discrete cosine transform expresses a finite sequence of data points in terms of a sum of cosine functions oscillating at different frequencies. 
See also 
JPEG on Wikipedia 

{{GlossarySidebar}} 
JavaScript Object Notation (JSON) is a data-interchange format. 
Although not a strict subset, JSON closely resembles a subset of {{Glossary(“JavaScript”)}} syntax. 
Though many programming languages support JSON, it is especially useful for JavaScript-based apps, including websites and browser extensions. 
JSON can represent numbers, booleans, strings, null, arrays (ordered sequences of values), and objects (string-value mappings) made up of these values (or of other arrays and objects). 
JSON does not natively represent more complex data types like functions, regular expressions, dates, and so on. 
(Date objects by default serialize to a string containing the date in ISO format, so the information isn’t completely lost.) 
If you need JSON to represent additional data types, transform values as they are serialized or before they are deserialized. 
See also 
JSON on Wikipedia 
JSON on MDN 

{{GlossarySidebar}} 
A key is a piece of information used by a {{Glossary(“cipher”)}} for {{Glossary(“encryption”)}} and/or {{Glossary(“decryption”)}}. 
Encrypted messages should remain secure even if everything about the {{Glossary(“cryptosystem”)}}, except for the key, is public knowledge. 
In {{Glossary(“symmetric-key cryptography”)}}, the same key is used for both encryption and decryption. 
In {{Glossary(“public-key cryptography”)}}, there exists a pair of related keys known as the public key and private key. 
The public key is freely available, whereas the private key is kept secret. 
See also 
Kerckhoffs’s principle on Wikipedia 
MDN Web Docs Glossary 
{{Glossary(“Block cipher mode of operation”)}} 
{{Glossary(“Cipher”)}} 
{{Glossary(“Ciphertext”)}} 
{{Glossary(“Cipher suite”)}} 
{{Glossary(“Cryptanalysis”)}} 
{{Glossary(“Cryptography”)}} 
{{Glossary(“Decryption”)}} 
{{Glossary(“Encryption”)}} 
{{Glossary(“Key”)}} 
{{Glossary(“Plaintext”)}} 
{{Glossary(“Public-key cryptography”)}} 
{{Glossary(“Symmetric-key cryptography”)}} 

{{GlossarySidebar}} 
A keyword is a word or phrase that describes content. 
Online keywords are used as queries for search engines or as words identifying content on websites. 
When you use a search engine, you use keywords to specify what you are looking for, and the search engine returns relevant webpages. 
For more accurate results, try more specific keywords, such as “Blue Mustang GTO” instead of “Mustang”. 
Webpages also use keywords in a meta tag (in the {{htmlelement(“head”)}} section) to describe page content, so search engines can better identify and organize webpages. 
See also 
Keyword on Wikipedia 

{{GlossarySidebar}} 
Latency is the network time it takes for a requested resource to reach its destination. 
Low latency is good, meaning there is little or no delay. 
High latency is bad, meaning it takes a long time for the requested resource to reach its destination. 
Latency can be a factor in any kind of data flow, but is most commonly discussed in terms of network latency (the time it takes for a packet of data to travel from source to destination) and media codec latency (the time it takes for the source data to be encoded or decoded and reach the consumer of the resulting data). 
See also 
Understanding Latency 

{{GlossarySidebar}} 
A ligature is a joining of two characters into one shape. For example, in French “œ” is a ligature of “oe”. 
You can implement ligatures in your webpage with {{cssxref(“font-variant-ligatures”)}}. 
See also 
Ligature on Wikipedia 

{{GlossarySidebar}} 
Localization (l10n) is the process of adapting a software user interface to a specific culture. 
The following are common factors to consider: 
language 
unit of measure (e.g., kilometers in Europe, miles in U.S.) 
text direction (e.g., European languages are left-to-right, Arabic right-to-left) 
capitalization in Latin script (e.g., English uses capitals for weekdays, Spanish uses lowercase) 
adaptation of idioms (e.g., “raining cats and dogs” makes no sense when translated literally) 
use of register (e.g., in Japanese respectful speech differs exceptionally from casual speech) 

{{GlossarySidebar}} 
LTR (Left To Right) is a {{Glossary(“locale”)}} property indicating that text is written from left to right. 
For example, the en-US locale (for US English) specifies left-to-right. 
Most Western languages, as well as many others around the world, are written LTR. 
The opposite of LTR, {{Glossary(“RTL”)}} (Right To Left) is used in other common languages, including Arabic (ar) and Hebrew (he). 
See also 
MDN Web Docs Glossary 
{{Glossary(“locale”)}} 
{{Glossary(“Localization”)}} 
{{Glossary(“LTR”)}} 
{{Glossary(“RTL”)}} 
HTML global attributes 
dir 
lang 
CSS 
{{cssxref(“:dir”)}} 
{{cssxref(“direction”)}} 
{{cssxref(“unicode-bidi”)}} 
{{cssxref(“writing-mode”)}} 

{{GlossarySidebar}} 
The main axis in {{glossary(“flexbox”)}} is defined by the direction set by the {{cssxref(“flex-direction”)}} property. 
There are four possible values for flex-direction. 
row 
row-reverse 
column 
column-reverse 
Should you choose row or row-reverse then your main axis will run along the row in the inline direction. 
In this image the flex-direction is row which forms the main axis 
Choose column or column-reverse and your main axis will run top to bottom of the page in the block direction. 

{{GlossarySidebar}} 
The main thread is where a browser processes user events and paints. 
By default, the browser uses a single thread to run all the JavaScript in your page, as well as to perform layout, reflows, and garbage collection. 
This means that long-running JavaScript functions can block the thread, leading to an unresponsive page and a bad user experience. 
Unless intentionally using a web worker, such as a service worker, JavaScript runs on the main thread, so it’s easy for a script to cause delays in event processing or painting. 
The less work required of the main thread, the more that thread can respond to user events, paint, and generally be responsive to the user. 
See also 
Asynchronous JavaScript 
Web worker API 
Service worker API 
Glossary 
{{Glossary(“Thread”)}} 

{{GlossarySidebar}} 
MathML (an {{glossary(“XML”)}} application) is an open standard for representing mathematical expressions in webpages. 
In 1998 the W3C first recommended MathML for representing mathematical expressions in the {{glossary(“browser”)}}. 
MathML has other applications also including scientific content and voice synthesis. 
See also 
MathML on Wikipedia 
MathML 
Authoring MathML 
What is MathML 

{{GlossarySidebar}} 
Metadata is — in its very simplest definition — data that describes data. 
For example, an {{glossary(“HTML”)}} document is data, but HTML can also contain metadata in its {{htmlelement(“head”)}} element that describes the document — for example who wrote it, and its summary. 
See also 
Learn: metadata 
metadata on Wikipedia 
The {{htmlelement(“meta”)}} element on MDN 

{{GlossarySidebar}} 
When F is said to be a method of O, it often means that F uses O as its this binding. 
Function properties that do not have different behaviors based on their this value (or those that don’t have a dynamic this binding at all — like bound functions and arrow functions) may not be universally recognized as methods. See also 

{{GlossarySidebar}} 
Microsoft Edge is a free-of-cost graphical {{glossary(“World Wide Web”, “Web”)}} {{Glossary(“browser”)}} bundled with Windows 10 and developed by Microsoft since 2014. 
Initially known as Spartan, Edge replaced the longstanding browser {{glossary(“Microsoft Internet Explorer”,“Internet Explorer”)}}. 
See also 
Official website 
MDN Web Docs Glossary 
{{Glossary(“Google Chrome”)}} 
{{Glossary(“Microsoft Edge”)}} 
{{Glossary(“Microsoft Internet Explorer”)}} 
{{Glossary(“Mozilla Firefox”)}} 
{{Glossary(“Netscape Navigator”)}} 
{{Glossary(“Opera Browser”)}} 

{{GlossarySidebar}} 
Internet Explorer (or IE) was a free graphical {{glossary(“browser”)}} maintained by Microsoft for legacy enterprise uses. {{glossary(“Microsoft Edge”)}} is currently the default Windows browser. 
Microsoft first bundled IE with Windows in 1995 as part of the package called “Microsoft Plus!”. 
By around 2002, Internet Explorer had become the most used browser in the world, but lost ground to Chrome, Firefox, Edge, and Safari. 
IE went through many releases and provided version for desktop, mobile, and Xbox Console. 
It was also available on Mac and UNIX, Microsoft discontinued those versions in 2003 and 2001 respectively. 
The final Windows release was Windows 11.0.220 on November 10, 2020. 
Microsoft ended support for IE on June 15, 2022. 
See also 
Internet Explorer on Wikipedia 
History of Internet Explorer on Wikipedia 
Internet Explorer versions on Wikipedia 

{{GlossarySidebar}} 
A MIME type (now properly called “media type”, but also sometimes “content type”) is a string sent along with a file indicating the type of the file (describing the content format, for example, a sound file might be labeled audio/ogg, or an image file image/png). 
It serves the same purpose as filename extensions traditionally do on Windows. 
See also 
Internet media type on Wikipedia 
List of MIME types 
Properly Configuring Server MIME Types 
Details information about the usage of MIME Types in a Web context. 
Incomplete list of MIME types MediaRecorder.mimeType 

{{GlossarySidebar}} 
A manipulator-in-the-middle attack (MitM) intercepts a communication between two systems. 
For example, a Wi-Fi router can be compromised. 
Comparing this to physical mail: If you’re writing letters to each other, the mail carrier can intercept each letter you mail. They open it, read it, eventually modify it, and then repackage the letter and only then send it to whom you intended to sent the letter for. 
The original recipient would then mail you a letter back, and the mail carrier would again open the letter, read it, eventually modify it, repackage it, and give it to you. 
You wouldn’t know there’s a manipulator in the middle in your communication channel – the mail carrier is invisible to you and to your recipient. 
In physical mail and in online communication, MITM attacks are tough to defend. A few tips: 
Don’t just ignore certificate warnings. 
You could be connecting to a phishing server or an imposter server. 
Sensitive sites without HTTPS encryption on public Wi-Fi networks aren’t trustworthy. 
Check for HTTPS in your address bar and ensure encryption is in-place before logging in. 
See also 
OWASP: Manipulator-in-the-middle attack 
PortSwigger: Latest manipulator-in-the-middle attacks news 
Wikipedia: Man-in-the-middle attack 

{{GlossarySidebar}} 
A mixin is a {{Glossary(“class”)}} (interface, in WebAPI spec terms) in which some or all of its {{Glossary(“method”, “methods”)}} and/or {{Glossary(“property”, “properties”)}} are unimplemented, requiring that another {{Glossary(“class”)}} or {{Glossary(“interface”)}} provide the missing implementations. 
The new class or interface then includes both the properties and methods from the mixin as well as those it defines itself. 
All of the methods and properties are used exactly the same regardless of whether they’re implemented in the mixin or the interface or class that implements the mixin. 
The advantage of mixins is that they can be used to simplify the design of APIs in which multiple interfaces need to include the same methods and properties. 
For example, the WindowOrWorkerGlobalScope mixin is used to provide methods and properties that need to be available on both the {{domxref(“Window”)}} and {{domxref(“WorkerGlobalScope”)}} interfaces. 
The mixin is implemented by both of those interfaces. 
See also 
Mixin on Wikipedia 

{{GlossarySidebar}} 
Mozilla Firefox is a free open-source {{Glossary(“browser”)}} whose development is overseen by the Mozilla Corporation. 
Firefox runs on Windows, OS X, Linux, and Android. 
First released in November 2004, Firefox is completely customizable with themes, plug-ins, and add-ons. 
Firefox uses {{glossary(“Gecko”)}} to render webpages, and implements both current and upcoming {{glossary(“world wide web”, “Web”)}} standards. 
See also 
Mozilla Firefox official website 
Firefox developer documentations on MDN 

{{GlossarySidebar}} 
A mutable value is one that can be changed without creating an entirely new value. 
In {{glossary(“JavaScript”)}}, {{Glossary(“Object”,“objects”)}} and {{Glossary(“Array”,“arrays”)}} are mutable by default, but {{Glossary(“primitive”, “primitive values”)}} are not — once a primitive value is created, it cannot be changed, although the variable that holds it may be reassigned. 
See also 
Immutable object on Wikipedia 
{{glossary(“Immutable”)}} 

{{GlossarySidebar}} 
MVC (Model-View-Controller) is a pattern in software design commonly used to implement user interfaces, data, and controlling logic. 
It emphasizes a separation between the software’s business logic and display. 
This “separation of concerns” provides for a better division of labor and improved maintenance. 
Some other design patterns are based on MVC, such as MVVM (Model-View-Viewmodel), MVP (Model-View-Presenter), and MVW (Model-View-Whatever). 
The three parts of the MVC software-design pattern can be described as follows: 
Model: Manages data and business logic. 
View: Handles layout and display. 
Controller: Routes commands to the model and view parts. 
The View 
Model–view–controller on Wikipedia 

{{GlossarySidebar}} 
NaN (Not a Number) is a numeric {{Glossary(“Type”, “data type”)}} that means an undefined value or value that cannot be represented, especially results of floating-point calculations. 
For example, NaNs can represent infinity, result of division by zero, missing value, or the square root of a negative (which is imaginary, whereas a floating-point number is real). 
Practically speaking, if I divide two variables in a {{glossary(“JavaScript”)}} program, the result may be NaN, which is predefined in JavaScript as “undefined”. 
Hence this division may break the program. 
Now, if this computation was a small part of a much larger algorithm, it would be really painful to figure out where the error actually occurs. 
Fortunately, since the result will be NaN and I know my divisor may turn out to be 0, I can set up testing conditions that prevent any such computations in the first place or notify me of where they happen. 
See also 
NaN on Wikipedia 
NaN in JavaScript 

{{GlossarySidebar}} 
NAT (Network Address Translation) is a technique for letting multiple computers share an IP address. 
NAT assigns unique addresses to each computer on the local network and adjusts incoming/outgoing network traffic to send data to the right place. 
See also 
WebRTC protocols 
Network address translation on Wikipedia 

{{GlossarySidebar}} 
A native application has been compiled to run on the hardware/software environment that comprises the targeted architecture. 
An example of a native Android app would be a mobile application written in Java using the Android toolchain. 
On the other hand, a Web App that runs inside a browser is not native — it is run in the web browser, which sits on top of the native environment, not the native environment itself. 
See also 
Native (computing) on Wikipedia 

{{GlossarySidebar}} 
{{Glossary(“CSP”)}} navigation directives are used in a {{HTTPHeader(“Content-Security-Policy”)}} header and govern to which location a user can navigate to or submit a form to, for example. 
Navigation directives don’t fall back to the {{CSP(“default-src”)}} directive. 
See Navigation directives for a complete list. See also 
Other kinds of directives: 
{{Glossary(“Fetch directive”)}} 
{{Glossary(“Document directive”)}} 
{{Glossary(“Reporting directive”)}} 
block-all-mixed-content 
upgrade-insecure-requests 
trusted-types 
{{HTTPHeader(“Content-Security-Policy”)}} 

{{GlossarySidebar}} 
In the context of the {{Glossary(“DOM”)}}, a node is a single point in the node tree. 
Various things that are nodes are the document itself, elements, text, and comments. 
See also 
The node tree WHATWG spec 
Node objects 

{{GlossarySidebar}} 
The term node can have several meanings depending on the context. 
It may refer to: 
{{GlossaryDisambiguation}} 
Another use of the word is when talking about {{Glossary(“Node.js”)}} 

{{GlossarySidebar}} 
Node.js is a cross-platform {{Glossary(“JavaScript”)}} runtime environment that allows developers to build server-side and network applications with JavaScript. 
Node Package Manager (npm) 
See also 
Node.js on Wikipedia 
Node.js website 
API reference documentation 
Guides 
npm Documentation 

{{GlossarySidebar}} 
In networking, a node is a connection point in the network. 
In physical networks, a node is usually a device, like a computer or a router. 
See also 
Node on Wikipedia 

{{GlossarySidebar}} 
In computer science, a null value represents a reference that points, generally intentionally, to a nonexistent or invalid {{glossary(“object”)}} or address. The meaning of a null reference varies among language implementations. 
However, when using the typeof operator, it returns "object". 
Glossary {{Glossary(“JavaScript”)}} {{Glossary(“string”)}} 
{{Glossary(“number”)}} 
{{Glossary(“bigint”)}} 
{{Glossary(“boolean”)}} 
{{Glossary(“null”)}} 
{{Glossary(“undefined”)}} 
{{jsxref(“Symbol”)}} 

{{GlossarySidebar}} 
In JavaScript, a nullish value is the value which is either null or {{JSxRef(“undefined”)}}. 
Nullish values are always falsy. 

{{GlossarySidebar}} 
In {{Glossary(“JavaScript”)}}, Number is a numeric data type in the double-precision 64-bit floating point format (IEEE 754). 
In other programming languages different numeric types exist; for example, Integers, Floats, Doubles, or Bignums. 
See also 
Numeric types on Wikipedia 
The JavaScript type: Number 
Glossary: 
{{Glossary(“JavaScript”)}} 
{{Glossary(“Primitive”)}} 

{{GlossarySidebar}} 
In JavaScript, objects can be seen as a collection of properties. 
Property values can be values of any type, including other objects, which enables building complex data structures. Properties are identified using key values. 
A key value is either a {{Glossary(“String”, “String value”)}} or a Symbol value. 
See also 
Detailed explanation of JavaScript objects in the JavaScript data types and data structures article 
{{jsxref(“Object”)}} in the JavaScript reference 

{{GlossarySidebar}} 
OOP (Object-Oriented Programming) is an approach in programming in which data is encapsulated within {{glossary(“object”,“objects”)}} and the object itself is operated on, rather than its component parts. 
{{glossary(“JavaScript”)}} is heavily object-oriented. 
It follows a prototype-based model, but it also offers a class syntax to enable typical OOP paradigms. 
See also 
Introduction to object-oriented JavaScript 
Inheritance and the prototype chain 

{{GlossarySidebar}} 
OpenGL (Open Graphics Library) is a cross-language, multi-platform application programming interface (API) for rendering 2D and 3D vector graphics. 
The API is typically used to interact with a graphics processing unit (GPU), to achieve hardware-accelerated rendering. See also OpenGL on Wikipedia OpenGL 

{{GlossarySidebar}} 
Reserved syntax consisting of punctuation or alphanumeric characters that carries out built-in functionality. 
For example, in JavaScript the addition operator (“+”) adds numbers together and concatenates strings, whereas the “not” operator (“!”) 
negates an expression — for example making a true statement return false. 
See also 
Operator (computer programming) on Wikipedia 
JavaScript operators 

{{GlossarySidebar}} 
Web content’s origin is defined by the scheme (protocol), hostname (domain), and port of the {{Glossary(“URL”)}} used to access it. 
Two objects have the same origin only when the scheme, hostname, and port all match. 
Some operations are restricted to same-origin content, and this restriction can be lifted using {{Glossary(“CORS”)}}. 
Examples 
These are same origin because they have the same scheme (http) and hostname (example.com), and the different file path does not matter: 
http://example.com/app1/index.html 
http://example.com/app2/index.html 
These are same origin because a server delivers HTTP content through port 80 by default: 
http://example.com:80 
http://example.com 
These are not same origin because they use different schemes: 
http://example.com/app1 
https://example.com/app2 
These are not same origin because they use different hostnames: 
http://example.com 
http://www.example.com 
http://myapp.example.com 
These are not same origin because they use different ports: 
http://example.com 
http://example.com:8080 
See also 
Same-origin policy 
{{Glossary(“Site”)}} 
HTML specification: origin 

{{GlossarySidebar}} 
Parsing means analyzing and converting a program into an internal format that a runtime environment can actually run, for example the {{glossary(“JavaScript”)}} engine inside browsers. 
The browser parses HTML into a {{glossary(‘DOM’)}} tree. HTML parsing involves tokenization and tree construction. HTML tokens include start and end tags, as well as attribute names and values. If the document is well-formed, parsing it is straightforward and faster. 
When the browser encounters CSS styles, it parses the text into the CSS Object Model (or {{glossary(‘CSSOM’)}}), a data structure it then uses for styling layouts and painting. 
JavaScript parsing is done during {{glossary(“compile time”)}} or whenever the {{glossary(“parser”)}} is invoked, such as during a call to a method. 
See also 
Parse on Wikipedia 

{{GlossarySidebar}} 
A payload header is an {{Glossary(“HTTP_header”, “HTTP header”)}} that describes the payload information related to safe transport and reconstruction of the original resource {{Glossary(“Representation header”, “representation”)}}, from one or more messages. 
This includes information like the length of the message payload, which part of the resource is carried in this payload (for a multi-part message), any encoding applied for transport, message integrity checks, etc. 

{{GlossarySidebar}} 
PDF (Portable Document Format) is a file format used to share documentation without depending on any particular software implementation, hardware platform, or operating system. 
PDF provides a digital image of a printed document, and keeps the same appearance when printed. 
See also 
PDF on Wikipedia 

{{GlossarySidebar}} 
Percent-encoding is a mechanism to encode 8-bit characters that have specific meaning in the context of {{Glossary(“URL”, “URLs”)}}. 
It is sometimes called URL encoding. 
The encoding consists of substitution: A ‘%’ followed by the hexadecimal representation of the ASCII value of the replace character. 
Special characters needing encoding are: ':', '/', '?' 
, '#', '[', ']', '@', '!' 
, '$', '&', "'", '(', ')', '*', '+', ',', ';', '=', as well as '%' itself. 
Other characters don’t need to be encoded, though they could. 
Character 
Encoding 
':' 
'/' 
'?' 

{{GlossarySidebar}} 
PHP (a recursive initialism for PHP: Hypertext Preprocessor) is an open-source server-side scripting language that can be embedded into HTML to build web applications and dynamic websites. 
Examples 
Basic syntax 
// start of PHP code 
<? 
php 
// PHP code goes here 
? 
> 
// end of PHP code 
Printing data on screen 
<? 
php 
echo "Hello World!" 
; 
? 
> 
PHP variables 
<? 
php 
// variables 
$nome='Danilo'; 
$sobrenome='Santos'; 
$pais='Brasil'; 
$email='danilocarsan@gmail.com'; 
// printing the variables 
echo $nome; 
echo $sobrenome; 
echo $pais; 
echo $email; 
? 
> 
See also 
Official website 
PHP on Wikipedia 
PHP programming on Wikibooks 
MDN Web Docs Glossary 
{{Glossary(“Java”)}} 
{{Glossary(“JavaScript”)}} 
{{Glossary(“Python”)}} 
{{Glossary(“Ruby”)}} 

{{GlossarySidebar}} 
Plaintext refers to information that is being used as an input to an {{Glossary(“encryption”)}} {{Glossary(“algorithm”)}}, or to {{Glossary(“ciphertext”)}} that has been decrypted. 
It is frequently used interchangeably with the term cleartext, which more loosely refers to any information, such as a text document, image, etc., that has not been encrypted and can be read by a human or computer without additional processing. 

{{GlossarySidebar}} 
PNG (Portable Network Graphics) is a graphics file format that supports lossless data compression. 
See also 
PNG on Wikipedia 

{{GlossarySidebar}} 
A polyfill is a piece of code (usually JavaScript on the Web) used to provide modern functionality on older browsers that do not natively support it. 
For example, a polyfill could be used to mimic the functionality of a {{cssxref(“text-shadow”)}} in IE7 using proprietary IE filters, or mimic rem units or media queries by using JavaScript to dynamically adjust the styling as appropriate, or whatever else you require. 
The 1st version of jQuery was an early example of a polyfill. 
See also 
What is a polyfill? 
(article by Remy Sharp, the originator of the term) 

{{GlossarySidebar}} 
For a computer connected to a network with an {{Glossary(“IP address”)}}, a port is a communication endpoint. 
Ports are designated by numbers, and below 1024 each port is associated by default with a specific {{Glossary(“protocol”)}}. 
For example, the default port for the {{Glossary(“HTTP”)}} protocol is 80 and the default port for the HTTPS protocol is 443, so a {{Glossary(“HTTP”)}} server waits for requests on those ports. 
Each Internet protocol is associated with a default port: {{Glossary(“SMTP”)}} (25), {{Glossary(“POP”)}} (110), {{Glossary(“IMAP”)}} (143), {{Glossary(“IRC”)}} (194), and so on. 
See also 
Port on Wikipedia 

{{GlossarySidebar}} 
Prefetching refers to the practice of speculatively fetching resources in the background for pages that the user is likely to navigate to in the near future. 
This can significantly reduce the load time for the prefetched page if the user does choose to navigate to it. 
Prefetching might be used, for example, to fetch the page resources linked by a “Next” button, or a link popup that a user hovers over, or search results. 
Resource prefetching 
Resources should be prefetched based on how likely it is that they will be needed in a future navigation. 
Browsers can infer this automatically for some resources, such as the current URL in the address bar. 
Browsers will also prefetch content for <link> elements with the rel="prefetch" attribute. 
This allows developers to hint to the browser the likely navigation from the current page. 
Note that only these links are prefetched (so <a> elements are not), and they are fetched at a lower priority than resources used by the current page, including elements with fetchPriority="low". 
Prefetching can be used to fetch both HTML and sub-resources for a possible next navigation. 
A common use case is to have a simple website landing page that fetches more “heavy-weight” resources used by the rest of the site. 
<link rel="prefetch" href="/app/style.css" /> 
<link rel="prefetch" href="https://example.com/landing-page" /> 
The fetch request for a prefetch operation results in an HTTP Request that includes the HTTP header Sec-Purpose: prefetch. 
A server might use this header to change the cache timeouts for the resources, or perform other special handling. 
The request should also include the {{HTTPHeader(“Sec-Fetch-Dest”)}} header with the value set to empty. 
The {{HTTPHeader(“Accept”)}} header in the request should match the value used for normal navigation requests. 
This allows the browser to find the matching cached resources following navigation. 
If a response is returned, it gets cached with the request in the HTTP cache. 
Note: Browser vendors are currently aligning around the HTTP headers that are sent, and may use different headers and values. 
The best place to track specification compliance is the Sec-Purpose compatibility table. 
DNS Prefetching 
DNS prefetching resolves domain names in advance, speeding up load times by reducing the time associated with domain lookup at request time. 
<link rel="dns-prefetch" href="https://example.com/" /> See also 
Prerender pages in Chrome for instant page navigations (developer.chrome.com) 
{{Glossary(“prerender”)}} 
preload 
dns-prefetch 
page prediction 

{{GlossarySidebar}} 
A CORS preflight request is a {{Glossary(“CORS”)}} request that checks to see if the CORS protocol is understood and a server is aware using specific methods and headers. 
It is an {{HTTPMethod(“OPTIONS”)}} request, using two or three HTTP request headers: {{HTTPHeader(“Access-Control-Request-Method”)}}, {{HTTPHeader(“Origin”)}}, and optionally {{HTTPHeader(“Access-Control-Request-Headers”)}}. 
A preflight request is automatically issued by a browser and in normal cases, front-end developers don’t need to craft such requests themselves. It appears when request is qualified as “to be preflighted” and omitted for simple requests. 
For example, a client might be asking a server if it would allow a {{HTTPMethod(“DELETE”)}} request, before sending a DELETE request, by using a preflight request: 
OPTIONS /resource/foo 
Access-Control-Request-Method: DELETE 
Access-Control-Request-Headers: origin, x-requested-with 
Origin: https://foo.bar.org 
If the server allows it, then it will respond to the preflight request with an {{HTTPHeader(“Access-Control-Allow-Methods”)}} response header, which lists DELETE: 
HTTP/1.1 204 No Content 
Connection: keep-alive 
Access-Control-Allow-Origin: https://foo.bar.org 
Access-Control-Allow-Methods: POST, GET, OPTIONS, DELETE 
Access-Control-Max-Age: 86400 
See also 
{{Glossary(“CORS”)}} 
{{HTTPMethod(“OPTIONS”)}} 

{{GlossarySidebar}} 
Presto was the proprietary browser layout engine used to power the {{Glossary(“Opera browser”)}} until version 15. 
Since then, the Opera browser is based on Chromium, which uses the {{Glossary(‘Blink’)}} layout engine. 
See also 
Presto layout engine on Wikipedia 

{{GlossarySidebar}} 
In {{Glossary(“JavaScript”)}}, a primitive (primitive value, primitive data type) is data that is not an {{Glossary(“object”)}} and has no {{glossary(“method”,“methods”)}} or properties. 
There are 7 primitive data types: 
{{Glossary(“string”)}} 
{{Glossary(“number”)}} 
{{Glossary(“bigint”)}} 
{{Glossary(“boolean”)}} 
{{Glossary(“undefined”)}} 
symbol 
{{Glossary(“null”)}} 
Most of the time, a primitive value is represented directly at the lowest level of the language implementation. 
All primitives are immutable; that is, they cannot be altered. 
It is important not to confuse a primitive itself with a variable assigned a primitive value. 
The variable may be reassigned to a new value, but the existing value can not be changed in the ways that objects, arrays, and functions can be altered. 
Primitives have no methods but still behave as if they do. 
When properties are accessed on primitives, JavaScript auto-boxes the value into a wrapper object and accesses the property on that object instead. 
For example, "foo".includes("f") implicitly creates a String wrapper object and calls String.prototype.includes() on that object. 
This auto-boxing behavior is not observable in JavaScript code but is a good mental model of various behaviors — for example, why “mutating” primitives does not work (because str.foo = 1 is not assigning to the property foo of str itself, but to an ephemeral wrapper object). 
See also 
JavaScript data types 
Primitive data type (Wikipedia) 
Glossary 
{{Glossary(“JavaScript”)}} 
{{Glossary(“string”)}} 
{{Glossary(“number”)}} 
{{Glossary(“bigint”)}} 
{{Glossary(“boolean”)}} 
{{Glossary(“null”)}} 
{{Glossary(“undefined”)}} 

{{GlossarySidebar}} 
Progressive enhancement is a design philosophy that provides a baseline of essential content and functionality to as many users as possible, while delivering the best possible experience only to users of the most modern browsers that can run all the required code. 
Feature detection is generally used to determine whether browsers can handle more modern functionality, while polyfills are often used to add missing features with JavaScript. 
Acceptable alternatives should be provided where possible. 
Progressive enhancement is a useful technique that allows web developers to focus on developing the best possible websites while making those websites work on multiple unknown user agents. 
{{Glossary(“Graceful degradation”)}} is related but is not the same thing and is often seen as going in the opposite direction to progressive enhancement. 
See also Progressive enhancement at Wikipedia What is Progressive Enhancement, and why it matters at freeCodeCamp (2018) 
Progressive Enhancement at QuirksMode (2021) 
The Power of Progressive Enhancement at Piccalilli (2018) 

{{GlossarySidebar}} 
A CSS property is a characteristic (like color) whose associated value defines one aspect of how the browser should display the element. 
Here’s an example of a CSS rule: 
/* "div" is a selector indicating that all the div elements */ /* in the document will be styled by that rule */ 
div { 
/* The property "color" with the value "black" indicates */ /* that the text will have the color black */ 
color: black; 
/* The property "background-color" with the value "white" indicates */ /* that the background color of the elements will be white */ 
background-color: white; 
} 
See also 
Learn CSS 
The CSS reference on MDN 
The CSS Working Group current work 

{{GlossarySidebar}} 
The term property can have several meanings depending on the context. It may refer to: 
{{GlossaryDisambiguation}} 

{{GlossarySidebar}} 
A JavaScript property is a member of an object that associates a key with a value. 
A JavaScript object is a data structure that stores a collection of properties. 
A property consists of the following parts: 
A name (also called a key), which is either a string or a symbol. 
A value, which can be any JavaScript value. 
A property that has a function as its value may also be called a method. 
Some attributes, which specify how the property can be read and written. 
A property may have the configurable, enumerable, and writable attributes. 
Accessor properties do not have an actual “value”. 
The value is represented indirectly through a pair of functions, one (the getter) invoked when reading the value and one (the setter) invoked when setting the value. 
However, accessor properties behave like regular data properties on the surface, because the getter and setter functions are invoked automatically and are typically transparent to JavaScript code. 
The property’s value (including the getter and setter) and its attributes are stored in a data record called the property descriptor. 
Many methods, such as {{jsxref(“Object.getOwnPropertyDescriptor()”)}} and {{jsxref(“Object.defineProperty()”)}}, work with property descriptors. 
The term property itself does not correspond to any JavaScript value — it’s an abstract concept. 
For example, in the following code: 
const obj = { 
a: 1, 
b() {}, 
}; 
The object obj has two properties. 
The first one has "a" as the key and 1 as the value. 
The second one has "b" as the key and a function as the value (using the method syntax). 
The "a" – 1, "b" – function associations are the properties of the object. 
In the context of classes, properties can be divided into instance properties, which are owned by each instance, and static properties, which are owned by the class and hold data common to all instances. 
In the context of inheritance, properties can also be divided into own properties, which are owned by the object itself, and inherited properties, which are owned by objects in the prototype chain of the object. 
For more information about reading and writing properties, see working with objects. 
See also 
Property (programming) on Wikipedia 
Introduction to object-oriented JavaScript 
Object properties 
Enumerability and ownership of properties 

{{GlossarySidebar}} 
A protocol is a system of rules that define how data is exchanged within or between computers. 
Communications between devices require that the devices agree on the format of the data that is being exchanged. 
The set of rules that defines a format is called a protocol. 
See also 
Communications protocol on Wikipedia 
RFC Official Internet Protocol Standards 
HTTP overview 
Glossary: 
{{glossary(“TCP”)}} 

{{GlossarySidebar}} 
Prototype-based programming is a style of {{Glossary(“OOP”, “object-oriented programming”)}} in which {{Glossary(‘Class’, ‘classes’)}} are not explicitly defined, but rather derived by adding properties and methods to an instance of another class or, less frequently, adding them to an empty object. 
In simple words: this type of style allows the creation of an {{Glossary(‘Object’, ‘object’)}} without first defining its {{Glossary(‘Class’, ‘class’)}}. 
See also 
Prototype-based programming on Wikipedia 

{{GlossarySidebar}} 
A prototype is a model that displays the appearance and behavior of an application or product early in the development lifecycle. 
See Inheritance and the prototype chain 
See also 
Software Prototyping on Wikipedia 

{{GlossarySidebar}} 
A proxy server is an intermediate program or computer used when navigating through different networks of the Internet. 
They facilitate access to content on the World Wide Web. 
A proxy intercepts requests and serves back responses; it may forward the requests, or not (for example in the case of a cache), and it may modify it (for example changing its headers, at the boundary between two networks). 
A proxy can be on the user’s local computer, or anywhere between the user’s computer and a destination server on the Internet. 
In general there are two main types of proxy servers: 
A forward proxy that handles requests from and to anywhere on the Internet. 
A reverse proxy taking requests from the Internet and forwarding them to servers in an internal network. 
See also 
Proxy servers and tunneling 
Proxy server on Wikipedia 

{{GlossarySidebar}} 
In CSS, a pseudo-class selector targets elements depending on their state rather than on information from the document tree. 
For example, the selector a{{ cssxref(“:visited”) }} applies styles only to links that the user has already followed. 
See also 
Pseudo-class documentation 

{{GlossarySidebar}} 
Pseudocode refers to code-like syntax that is generally used to indicate to humans how some code syntax works, or illustrate the design of an item of code architecture. 
It won’t work if you try to run it as code. 
See also 
Pseudocode on Wikipedia. 

{{GlossarySidebar}} 
Python is a high level general-purpose programming language. 
It uses a multi-paradigm approach, meaning it supports procedural, object-oriented, and some functional programming constructs. 
It was created by Guido van Rossum as a successor to another language (called ABC) between 1985 and 1990, and is currently used on a large array of domains like web development, desktop applications, data science, DevOps, and automation/productivity. 
Python is developed under an OSI-approved open source license, making it freely usable and distributable, even for commercial use. 
Python’s license is administered by the Python Software Foundation. See also 
Python on Wikipedia 
Official Python docs tutorials 
AlphaCodingSkills Python Tutorial 

{{GlossarySidebar}} 
Quality values, or q-values and q-factors, are used to describe the order of priority of values in a comma-separated list. 
It is a special syntax allowed in some HTTP headers and in HTML. 
The importance of a value is marked by the suffix ';q=' immediately followed by a value between 0 and 1 included, with up to three decimal digits, the highest value denoting the highest priority. 
When not present, the default value is 1. 
Examples 
The following syntax 
text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 
indicates the order of priority: 
Value 
Priority 
text/html and application/xhtml+xml 
1.0 
application/xml 
0.9 
*/* 
0.8 
If there is no priority defined for the first two values, the order in the list is irrelevant. 
Nevertheless, with the same quality, more specific values have priority over less specific ones: 
text/html;q=0.8,text/*;q=0.8,*/*;q=0.8 
Value 
Priority 
text/html 
0.8 (but totally specified) 
text/* 
0.8 (partially specified) 
*/* 
0.8 (not specified) 
Some syntax, like the one of {{HTTPHeader(“Accept”)}}, allow additional specifiers like text/html;level=1. 
These increase the specificity of the value. 
Their use is extremely rare. 
More information 
HTTP headers using q-values in their syntax: {{HTTPHeader(“Accept”)}}, {{HTTPHeader(“Accept-Encoding”)}}, {{HTTPHeader(“Accept-Language”)}}, {{HTTPHeader(“TE”)}}, {{HTTPHeader(“Want-Digest”)}}. Header field definitions. 

{{GlossarySidebar}} 
RAIL, an acronym for Response, Animation, Idle, and Load, is a performance model originated by the Google Chrome team in 2015, focused on user experience and performance within the browser. 
The performance mantra of RAIL is “Focus on the user; the end goal isn’t to make your site perform fast on any specific device, it’s to make users happy.” 
There are 4 stages of interaction: page load, idle, response to input, and scrolling and animation. 
In acronym order, the main tenets are: 
Response 
: Respond to users immediately, acknowledging any user input in 100ms or less. 
Animation 
: When animating, render each frame in under 16ms, aiming for consistency and avoiding jank. 
Idle 
: When using the main JavaScript thread, work in chunks for less than 50ms to free up the thread for user interactions. 
Load 
: Deliver interactive content in less than 1 second. 
See also 
Recommended Web Performance Timings: How long is too long 

{{GlossarySidebar}} 
Recursive function calls itself until condition met 
It keeps going until the number is equal to 0, in which case it stops. def recurse(x): if x > 0: print(x) recurse(x - 1) recurse(10) 
The following code defines a function that returns the maximum size of the call stack available in the JavaScript runtime in which the code is run. const getMaxCallStackSize = (i) => { try { return getMaxCallStackSize(++i); } catch { 
return i; } 
if (n === 0) { 
} else { return n * factorial(n - 1); } }; 
console.log(reduce((a, b) => a + b, 0, [1, 2, 3, 4, 5, 6, 7, 8, 9])); // 45 See also 

{{GlossarySidebar}} 
Reflow happens when a {{glossary(“browser”)}} recalculates the position and geometry of certain parts of a webpage, such as after an update on an interactive site. 
See also 
Repaint Minimizing browser reflow on developer.google.com 

{{GlossarySidebar}} 
Regular expressions (or regex) are rules that govern which sequences of characters come up in a search. 
Regular expressions are implemented in various languages, but the best-known implementation is the Perl Implementation, which has given rise to its own ecosystem of implementations called PCRE (Perl Compatible Regular Expression). 
On the Web, {{glossary(“JavaScript”)}} provides another regex implementation through the {{jsxref(“RegExp”)}} object. 
See also 
Regular expressions on Wikipedia 
Interactive tutorial 
Visualized Regular Expression 
Writing regular expressions in JavaScript 

{{GlossarySidebar}} 
A representation header is an {{glossary(“HTTP_header”, “HTTP header”)}} that describes the particular representation of the resource sent in an HTTP message body. 
Representations are different forms of a particular resource. 
For example, the same data might be formatted as a particular media type such as XML or JSON, localized to a particular written language or geographical region, and/or compressed or otherwise encoded for transmission. 
The underlying resource is the same in each case, but its representation is different. 
Clients specify the formats that they prefer to be sent during content negotiation (using Accept-* headers), and the representation headers tell the client the format of the selected representation they actually received. 
Representation headers may be present in both HTTP request and response messages. 
If sent as a response to a HEAD request, they describe the body content that would be selected if the resource was actually requested. 
Representation headers include: {{HTTPHeader(“Content-Type”)}}, {{HTTPHeader(“Content-Encoding”)}}, {{HTTPHeader(“Content-Language”)}}, and {{HTTPHeader(“Content-Location”)}}. 
See also 
RFC 9110, section 3.2: Representations 
List of all HTTP headers 
{{Glossary(“Payload header”)}} 
{{glossary(“Entity header”)}} 
{{HTTPHeader(“Digest”)}}/ {{HTTPHeader(“Want-Digest”)}} 


{{GlossarySidebar}} 
A response header is an {{glossary(“HTTP header”)}} that can be used in an HTTP response and that doesn’t relate to the content of the message. 
Response headers, like {{HTTPHeader(“Age”)}}, {{HTTPHeader(“Location”)}} or {{HTTPHeader(“Server”)}} are used to give a more detailed context of the response. 
Not all headers appearing in a response are categorized as response headers by the specification. 
For example, the {{HTTPHeader(“Content-Type”)}} header is a {{glossary(“representation header”)}} indicating the original type of data in the body of the response message (prior to the encoding in the {{HTTPHeader(“Content-Encoding”)}} representation header being applied). 
However, “conversationally” all headers are usually referred to as response headers in a response message. 
The following shows a few response and representation headers after a {{HTTPMethod(“GET”)}} request. 
200 OK 
Access-Control-Allow-Origin: * 
Connection: Keep-Alive 
Content-Encoding: gzip 
Content-Type: text/html; charset=utf-8 
Date: Mon, 18 Jul 2016 16:06:00 GMT 
Etag: "c561c68d0ba92bbeb8b0f612a9199f722e3a621a" 
Keep-Alive: timeout=5, max=997 
Last-Modified: Mon, 18 Jul 2016 02:36:04 GMT 
Server: Apache 
Set-Cookie: mykey=myvalue; expires=Mon, 17-Jul-2017 16:06:00 GMT; Max-Age=31449600; Path=/; secure 
Transfer-Encoding: chunked 
Vary: Cookie, Accept-Encoding 
X-Backend-Server: developer2.webapp.scl3.mozilla.com 
X-Cache-Info: not cacheable; meta data too large 
X-kuma-revision: 1085259 
x-frame-options: DENY 
See also 
List of all HTTP headers 
Glossary 
{{Glossary(“Representation header”)}} 
{{Glossary(“HTTP header”)}} 
{{Glossary(“Response header”)}} 
{{Glossary(“Fetch metadata response header”)}} 
{{Glossary(“Request header”)}} 

{{GlossarySidebar}} 
REST (Representational State Transfer) refers to a group of software architecture design constraints that bring about efficient, reliable and scalable distributed systems. 

{{GlossarySidebar}} 
RSS (Really Simple Syndication) refers to several XML document formats designed for publishing site updates. 
When you subscribe to a website’s RSS feed, the website sends information and updates to your RSS reader in an RSS document called a feed, so you don’t need to check all your favorite websites manually. 
See also 
RSS on Wikipedia 
Latest specification 

{{GlossarySidebar}} 
RTL (Right To Left) is a {{Glossary(“locale”)}} property indicating that text is written from right to left. 
For example, the he locale (for Hebrew) specifies right-to-left. Arabic (ar) is another common language written RTL. 
The opposite of RTL, LTR (Left To Right) is used in other languages, including English (en, en-US, en-GB, etc.), Spanish (es), and French (fr). 
See also 
MDN Web Docs Glossary 
{{Glossary(“Localization”)}} 
{{Glossary(“LTR”, “LTR (Left to Right)”)}} 
{{Glossary(“RTL”, “RTL (Right to Left)”)}} 

{{GlossarySidebar}} 
An HTTP method is safe if it doesn’t alter the state of the server. 
In other words, a method is safe if it leads to a read-only operation. 
Several common HTTP methods are safe: {{HTTPMethod(“GET”)}}, {{HTTPMethod(“HEAD”)}}, or {{HTTPMethod(“OPTIONS”)}}. 
All safe methods are also {{glossary(“idempotent”)}}, but not all idempotent methods are safe. 
For example, {{HTTPMethod(“PUT”)}} and {{HTTPMethod(“DELETE”)}} are both idempotent but unsafe. 

{{GlossarySidebar}} 
The term safe can have several meanings depending on the context. 
It may refer to: 
{{GlossaryDisambiguation}} 

{{GlossarySidebar}} 
The same-origin policy is a critical security mechanism that restricts how a document or script loaded from one {{Glossary(“origin”)}} can interact with a resource from another origin. 

{{GlossarySidebar}} 
The scope is the current context of execution in which {{glossary(“value”,“values”)}} and expressions are “visible” or can be referenced. 
If a {{glossary(“variable”)}} or expression is not in the current scope, it will not be available for use. 
Scopes can also be layered in a hierarchy, so that child scopes have access to parent scopes, but not vice versa. 
JavaScript has the following kinds of scopes: 
Global scope: The default scope for all code running in script mode. 
Module scope: The scope for code running in module mode. 
Function scope: The scope created with a {{glossary(“function”)}}. 
In addition, variables declared with let or const can belong to an additional scope: 
Block scope: The scope created with a pair of curly braces (a block). 
A {{glossary(“function”)}} creates a scope, so that (for example) a variable defined exclusively within the function cannot be accessed from outside the function or within other functions. For instance, the following is invalid: 
```js example-bad function exampleFunction() { const x = “declared inside function”; // x can only be used in exampleFunction console.log(“Inside function”); console.log(x); } 
console.log(x); // Causes error 
However, the following code is valid due to the variable being declared outside the function, making it global: 
```js example-good 
const x = "declared outside function"; 
exampleFunction(); 
function exampleFunction() { 
console.log("Inside function"); 
console.log(x); 
} 
console.log("Outside function"); 
console.log(x); 
Blocks only scope let and const declarations, but not var declarations. 
js example-good { var x = 1; } console.log(x); // 1 
js example-bad { const x = 1; } console.log(x); // ReferenceError: x is not defined 
See also 
Scope (computer science) on Wikipedia 

{{GlossarySidebar}} 
A scroll container is an element box in which content can be scrolled, whether or not scroll bars are present. 
A user agent adds scroll bars to an element box to make it a scroll container when the CSS {{cssxref(“overflow”)}} property is set to scroll or when overflow is set to auto and the content overflows the container. 
When the content of an element box overflows its bounding box, users can use scroll bars to scroll through the clipped content that is otherwise hidden from view. 
A scroll container includes a scrollport and scroll bars. 
Scrollport 
The scrollport is the visible part of a scroll container and coincides with the padding box of the scroll container. 
The scroll bars are used to move content in and out of the scrollport so that the content can be viewed. 

{{GlossarySidebar}} 
SDP (Session Description {{glossary(“Protocol”)}}) is the standard describing a {{Glossary(“P2P”,“peer-to-peer”)}} connection. 
SDP contains the {{Glossary(“codec”)}}, source address, and timing information of audio and video. 
Here is a typical SDP message: 
v=0 
o=alice 2890844526 2890844526 IN IP4 host.anywhere.com 
s= 
c=IN IP4 host.anywhere.com 
t=0 0 
m=audio 49170 RTP/AVP 0 
a=rtpmap:0 PCMU/8000 
m=video 51372 RTP/AVP 31 
a=rtpmap:31 H261/90000 
m=video 53000 RTP/AVP 32 
a=rtpmap:32 MPV/90000 
SDP is never used alone, but by protocols like {{Glossary(“RTP”)}} and {{Glossary(“RTSP”)}}. 
SDP is also a component of {{Glossary(“WebRTC”)}}, which uses SDP as a way of describing a session. 
See also 
WebRTC protocols 
Session Description Protocol on Wikipedia 

{{GlossarySidebar}} 
A {{glossary(“JavaScript”)}} {{glossary(“function”)}} that runs as soon as it is defined. 
Also known as an {{glossary(“IIFE”)}} (Immediately Invoked Function Expression). 
See the IIFE glossary page linked above for more information. 

{{GlossarySidebar}} 
In programming, Semantics refers to the meaning of a piece of code — for example “what effect does running that line of JavaScript have?”, or “what purpose or role does that HTML element have” (rather than “what does it look like?”.) 
Semantics in JavaScript 
In JavaScript, consider a function that takes a string parameter, and returns an {{htmlelement(“li”)}} element with that string as its textContent. 
Would you need to look at the code to understand what the function did if it was called build('Peach'), or createLiWithContent('Peach')? 
Semantics in CSS 
In CSS, consider styling a list with li elements representing different types of fruits. 
Would you know what part of the DOM is being selected with div > ul > li, or .fruits__item? 
Semantics in HTML 
In HTML, for example, the {{htmlelement(“Heading_Elements”, “h1”)}} element is a semantic element, which gives the text it wraps around the role (or meaning) of “a top level heading on your page.” 
<h1>This is a top level heading</h1> 
By default, most browser’s user agent stylesheet will style an {{htmlelement(“Heading_Elements”, “h1”)}} with a large font size to make it look like a heading (although you could style it to look like anything you wanted). 
On the other hand, you could make any element look like a top level heading. 
Consider the following: 
<span style="font-size: 32px; margin: 21px 0;">Not a top-level heading! 
</span> 
This will render it to look like a top level heading, but it has no semantic value, so it will not get any extra benefits as described above. 
It is therefore a good idea to use the right HTML element for the right job. 
HTML should be coded to represent the data that will be populated and not based on its default presentation styling. 
Presentation (how it should look), is the sole responsibility of CSS. 
Some of the benefits from writing semantic markup are as follows: 
Search engines will consider its contents as important keywords to influence the page’s search rankings (see {{glossary(“SEO”)}}) 
Screen readers can use it as a signpost to help visually impaired users navigate a page 
Finding blocks of meaningful code is significantly easier than searching through endless divs with or without semantic or namespaced classes 
Suggests to the developer the type of data that will be populated 
Semantic naming mirrors proper custom element/component naming 
When approaching which markup to use, ask yourself, “What element(s) best describe/represent the data that I’m going to populate?” 
For example, is it a list of data? 
; ordered, unordered? 
; is it an article with sections and an aside of related information? 
; does it list out definitions? 
; is it a figure or image that needs a caption? 
; should it have a header and a footer in addition to the global site-wide header and footer? 
; etc. 
Semantic elements 
These are some of the roughly 100 semantic elements available: 
{{htmlelement(“article”)}} 
{{htmlelement(“aside”)}} 
{{htmlelement(“details”)}} 
{{htmlelement(“figcaption”)}} 
{{htmlelement(“figure”)}} 
{{htmlelement(“footer”)}} 
{{htmlelement(“form”)}} 
{{htmlelement(“header”)}} 
{{htmlelement(“main”)}} 
{{htmlelement(“mark”)}} 
{{htmlelement(“nav”)}} 
{{htmlelement(“section”)}} 
{{htmlelement(“summary”)}} 
{{htmlelement(“time”)}} 
HTML element reference on MDN 
Using HTML sections and outlines on MDN 
The meaning of semantics in computer science on Wikipedia 
Glossary 
{{Glossary(“SEO”)}} 

{{GlossarySidebar}} 
SEO (Search Engine Optimization) is the process of making a website more visible in search results, also termed improving search rankings. 
Search engines {{Glossary(“Crawler”, “crawl”)}} the web, following links from page to page, and index the content found. 
When you search, the search engine displays the indexed content. 
Crawlers follow rules. 
If you follow those rules closely when doing SEO for a website, you give the site the best chances of showing up among the first results, increasing traffic and possibly revenue (for e-commerce and ads). 
Search engines give some guidelines for SEO, but big search engines keep result ranking as a trade secret. 
SEO combines official search engine guidelines, empirical knowledge, and theoretical knowledge from science papers or patents. 
SEO methods fall into three broad classes: 
Technical 
: Tag the content using semantic {{Glossary(“HTML”)}}. 
When exploring the website, crawlers should only find the content you want indexed. 
Copywriting 
: Write content using your visitors’ vocabulary. 
Use text as well as images so that crawlers can understand the subject. 
Popularity 
: You get most traffic when other established sites link to your site. 
See also 
SEO on Wikipedia 
Google Search Central 

{{GlossarySidebar}} 
Serializable objects are objects that can be serialized and later deserialized in any JavaScript environment (“realm”). 
This allows them to, for example, be stored on disk and later restored, or cloned with {{domxref(“structuredClone()”)}}, or shared between workers using {{domxref(“DedicatedWorkerGlobalScope.postMessage()”)}}. 
The serialization may not include all the properties and other aspects of the original object. 
For example, a serialization of a {{domxref(“DOMException”)}} must include the name and message properties, but whether it includes other properties is implementation dependent. 
As a result, a deserialized object may not be an identical clone/copy of the original object. 
The new deserialized object will however be a {{glossary(“deep copy”)}}, so any properties that were serialized from the original object and then deserialized into the new object will share no references with the original object. 
In some cases when serializing and deserializing an object, it makes sense to transfer some resources rather than creating a copy. 
Objects that can be transferred are called Transferable objects. 
Supported objects 
All primitive values are serializable. 
Not all objects are serializable objects. 
The objects that can be serialized are listed in: The structured clone algorithm > Supported types 
Note: Serializable objects are marked up in Web IDL files with the attribute [Serializable]. 

{{GlossarySidebar}} 

{{GlossarySidebar}} 
A server is a software or hardware offering a service to a user, usually referred to as client. 
A hardware server is a shared computer on a network, usually powerful and housed in a data center. 
A software server (often running on a hardware server) is a program that provides services to client programs or a {{glossary(“UI”,“user interface”)}} to human clients. 
Services are provided generally over local area networks or wide area networks such as the internet. 
A client program and server program traditionally connect by passing messages encoded using a {{glossary(“protocol”)}} over an {{glossary(“API”)}}. 
For example: 
An Internet-connected Web server is sending a {{glossary(“HTML”)}} file to your browser software so that you can read this page 
Local area network server for file, name, mail, print, and fax 
Minicomputers, mainframes, and super computers at data centers 
See also 
Introduction to servers 
Server (computing) on Wikipedia 

{{GlossarySidebar}} 
A shallow copy of an object is a copy whose properties share the same references (point to the same underlying values) as those of the source object from which the copy was made. 
More formally, two objects o1 and o2 are shallow copies if: They are not the same object (o1 ! 
== o2). The properties of o1 and o2 have the same names in the same order. 
The values of their properties are equal. Their prototype chains are equal. 
See also the definition of structural equivalence. 
The copy of an object whose properties all have primitive values fits the definition of both a deep copy and a shallow copy. 
It is somewhat useless to talk about the depth of such a copy, though, because it has no nested properties and we usually talk about deep copying in the context of mutating nested properties. 
Therefore: Re-assigning top-level properties of the copy does not affect the source object. Re-assigning nested object properties of the copy does affect the source object. 
In JavaScript, all standard built-in object-copy operations (spread syntax, Array.prototype.concat(), Array.prototype.slice(), Array.from(), Object.assign(), and Object.create()) create shallow copies rather than deep copies. 
Consider the following example, in which an ingredientsList array object is created, and then an ingredientsListCopy object is created by copying that ingredientsList object. 
const ingredientsList = ["noodles", { list: ["eggs", "flour", "water"] }]; 
const ingredientsListCopy = Array.from(ingredientsList); 
console.log(ingredientsListCopy); 
// ["noodles",{"list":["eggs","flour","water"]}] 
Re-assigning the value of a nested property will be visible in both objects. 
ingredientsListCopy[1].list = ["rice flour", "water"]; 
console.log(ingredientsList[1].list); 
// Array [ "rice flour", "water" ] 
Re-assigning the value of a top-level property (the 0 index in this case) will only be visible in the changed object. 
ingredientsListCopy[0] = "rice noodles"; 
console.log(ingredientsList[0]); // noodles 
console.log(JSON.stringify(ingredientsListCopy)); 
// ["rice noodles",{"list":["rice flour","water"]}] 
console.log(JSON.stringify(ingredientsList)); 
// ["noodles",{"list":["rice flour","water"]}] 
See also 
Deep copy 

{{GlossarySidebar}} 
A function signature (or type signature, or method signature) defines input and output of {{Glossary(“Function”, “functions”)}} or {{Glossary(“Method”, “methods”)}}. 
A signature can include: 
{{Glossary(“Parameter”, “parameters”)}} and their {{Glossary(“Type”, “types”)}} 
a return value and type 
{{Glossary(“Exception”, “exceptions”)}} that might be thrown or passed back 
information about the availability of the method in an {{Glossary(“OOP”, “object-oriented”)}} program (such as the keywords public, static, or prototype). 
In depth 
Signatures in JavaScript 
{{Glossary(“JavaScript”)}} is a loosely typed or a dynamic language. 
That means you don’t have to declare the type of a variable ahead of time. 
The type will get determined automatically while the program is being processed. 
A signature in JavaScript can still give you some information about the method: 
MyObject.prototype.myFunction(value); 
The method is installed on an {{Glossary(“object”)}} called MyObject. 
The method is installed on the prototype of MyObject (thus it is an {{Glossary(“Method”, “instance method”)}}) as opposed to being a {{Glossary(“static method”)}}. 
The name of the method is myFunction. 
The method accepts one parameter, which is called value and is not further defined. 
Signatures in Java 
In {{Glossary(“Java”)}}, signatures are used to identify methods and classes at the level of the virtual machine code. 
You have to declare types of variables in your code in order to be able to run the Java code. 
Java is strictly typed and will check any parameters at compilation time if they are correct. 
public static void main(String[] args) 
The public keyword is an access modifier and indicates that this method can be called by any object. 
The static keyword indicates that this method is a class method as opposed to being an instance method. 
The void keyword indicates that this method has no return value. 
The name of the method is main. 
The method accepts one parameter of type String Array. 
It is named args. 
See also 
Java internal type signatures on Wikipedia 

{{GlossarySidebar}} 
The term signature can have several meanings depending on the context. 
It may refer to: 
{{GlossaryDisambiguation}} 
See also 
Signature on Wikipedia 

{{GlossarySidebar}} 
A signature, or digital signature, is a {{glossary(“protocol”)}} showing that a message is authentic. 
From the {{glossary(“hash”)}} of a given message, the signing process first generates a digital signature linked to the signing entity, using the entity’s private {{glossary(“key”)}}. 
On receiving the message, the verification process 
authenticates the sender - uses the sender’s public key to {{glossary(“decryption”,“decrypt”)}} the signature and recover the hash, which can only be created with the sender’s private key, and 
checks message integrity - compares the hash with a newly calculated one from the received document (the two hashes will differ if the document has been tampered with) 
The system fails if the private key is compromised or the recipient is deceitfully given the wrong public key. 
See also 
Digital signature on Wikipedia 
See {{glossary(“digest”)}}, {{glossary(“encryption”)}} 

{{GlossarySidebar}} 
Old term for {{Glossary(“CORS-safelisted request header”)}}. 

{{GlossarySidebar}} 
Old term for {{Glossary(“CORS-safelisted response header”)}}. 

{{GlossarySidebar}} 
Informally, a site is a website, which is a collection of web pages, served from the same domain, and maintained by a single organization. 
Browsers sometimes need to distinguish precisely between different sites. 
For example, the browser must only send SameSite cookies to the same site that set them. 
For this more precise definition a site is determined by the registrable domain portion of the domain name. 
The registrable domain consists of an entry in the Public Suffix List plus the portion of the domain name just before it. 
This means that, for example, theguardian.co.uk, sussex.ac.uk, and bookshop.org are all registrable domains. 
According to this definition, support.mozilla.org and developer.mozilla.org are part of the same site, because mozilla.org is a registrable domain. 
In some contexts, the scheme is also considered when differentiating sites. 
This would make http://vpl.ca and https://vpl.ca different sites. 
Including the scheme prevents an insecure (HTTP) site from being treated as the same site as a secure (HTTPS) site. 
A definition that considers the scheme is sometimes called a schemeful same-site. 
This stricter definition is applied in the rules for handling SameSite cookies. 
Examples 
These are the same site because the registrable domain of mozilla.org is the same: 
https://developer.mozilla.org/en-US/docs/ 
https://support.mozilla.org/en-US/ 
These are the same site because the port is not relevant: 
https://example.com:8080 
https://example.com 
These are not the same site because the registrable domain of the two URLs differs: 
https://developer.mozilla.org/en-US/docs/ 
https://example.com 
These are the same site, or different sites if the scheme is considered: 
http://example.com 
https://example.com 
See also 
What is a URL 
{{Glossary(“Origin”)}} 
Same-origin policy 

{{GlossarySidebar}} 
{{Glossary(“ECMAScript”)}} 5 and later let scripts opt in to a new strict mode, which alters the semantics of JavaScript in several ways to improve its resiliency and which make it easier to understand what’s going on when there are problems. 
The normal, non-strict mode of JavaScript is sometimes referred to as sloppy mode. This isn’t an official designation, but you are likely to come across it if you spend time doing serious JavaScript code. 
See also 
“Strict Mode” in chapter 7 (“JavaScript Syntax”) in the book Speaking JavaScript. 

{{GlossarySidebar}} 
SMTP (Simple Mail Transfer Protocol) is a {{glossary(“protocol”)}} used to send a new email. 
Like {{glossary(“POP”)}} and {{glossary(“NNTP”)}}, it is a {{Glossary(“state machine”)}}-driven protocol. 
The protocol is relatively straightforward. 
Primary complications include supporting various authentication mechanisms (GSSAPI, CRAM-MD5, NTLM, MSN, AUTH LOGIN, AUTH PLAIN, etc.), handling error responses, and falling back when authentication mechanisms fail (e.g., the server claims to support a mechanism, but doesn’t). 
See also 
SMTP (Wikipedia) 
Glossary 
{{glossary(“NNTP”)}} 
{{glossary(“POP”)}} 
{{glossary(“protocol”)}} 

{{GlossarySidebar}} 
An SPA (Single-page application) is a web app implementation that loads only a single web document, and then updates the body content of that single document via JavaScript APIs such as {{domxref(“XMLHttpRequest”)}} and Fetch when different content is to be shown. 
This therefore allows users to use websites without loading whole new pages from the server, which can result in performance gains and a more dynamic experience, with some tradeoff disadvantages such as SEO, more effort required to maintain state, implement navigation, and do meaningful performance monitoring. 
See also 
Single-page application (Wikipedia) 
Understanding client-side JavaScript frameworks 
Glossary 
{{Glossary(“API”)}} 
{{Glossary(“AJAX”)}} 
{{Glossary(“JavaScript”)}} 
Popular SPA frameworks: 
React 
Angular 
Vue.JS 

{{GlossarySidebar}} 
Traditionally in browsers the HTML parser ran on the main thread and was blocked after a </script> tag until the script has been retrieved from the network and executed. 
Some HTML parser, such as Firefox since Firefox 4, support speculative parsing off of the main thread. 
It parses ahead while scripts are being downloaded and executed. 
The upside is that when a speculation succeeds, there’s no need to reparse the part of the incoming file that was already scanned for scripts, style sheets and images. 
The downside is that there’s more work lost when the speculation fails. 
This document helps you avoid the kind of things that make speculation fail and slow down the loading of your page. 
To make speculative loads of linked scripts, style sheets and images successful, avoid {{domxref(‘document.write’)}}. 
If you use a <base> element to override the base URI of your page, put the element in the non-scripted part of the document. 
Don’t add it via document.write() or {{domxref(‘document.createElement’)}}. 
Avoiding losing tree builder output 
Speculative tree building fails when document.write() changes the tree builder state such that the speculative state after the </script> tag no longer holds when all the content inserted by document.write() has been parsed. 
However, only unusual uses of document.write() cause trouble. 
Here are the things to avoid: 
Don’t write unbalanced trees. <script>document.write("<div>");</script> is bad. <script>document.write("<div></div>");</script> is OK. 
Don’t write an unfinished token. <script>document.write("<div></div");</script> is bad. 
Don’t finish your writing with a carriage return. <script>document.write("Hello World! 
\r");</script> is bad. <script>document.write("Hello World! 
\n");</script> is OK. 
Note that writing balanced tags may cause other tags to be inferred in a way that makes the write unbalanced. 
E.g. <script>document.write("<div></div>");</script> inside the head element will be interpreted as <script>document.write("</head><body><div></div>");</script> which is unbalanced. 
Don’t format part of a table. <table><script>document.write("<tr><td>Hello World! 
</td></tr>");</script></table> is bad. 

{{GlossarySidebar}} 
SQL (Structured Query Language) is a descriptive computer language designed for updating, retrieving, and calculating data in table-based databases. 
See also 
SQL on Wikipedia 
Learn SQL on sqlzoo.net 
Tutorials Point 

{{GlossarySidebar}} 
SQL injection takes advantage of Web apps that fail to validate user input. 
Hackers can maliciously pass SQL commands through the Web app for execution by a backend database. 
SQL injection can gain unauthorized access to a database or to retrieve information directly from the database. 
Many data breaches are due to SQL injection. 
How It Works 
Screenshot of the login form with username and password fields 
After entering username and password, behind the GUI the SQL queries work as follows: 
"SELECT Count(*) FROM Users WHERE Username=' " + txt.User. 
Text+" ' AND Password=' "+ txt.Password. 
Text+" ' "; 
Now suppose User enters the Username: admin and Password: passwd123, so after clicking on the Log in button, SQL query will run as follows: 
"SELECT Count(*) FROM Users WHERE Username=' admin ' AND Password=' passwd123 ' "; 
If the credentials are correct, then the user is allowed to log in, so it’s a very simple (and therefore insecure) mechanism. 
Hackers use this insecurity to gain unauthorized access. 
Hackers use a simple string called a Magical String, for example: 
Username: admin 
Password: anything ‘or’1’=’1 
After clicking on the login button, the SQL query will work as follows: 
"SELECT Count(*) FROM Users WHERE Username=' admin ' AND Password=' anything 'or'1'='1 ' "; 
Just take a closer look at the above query’s password section. 
Password=' anything 'or'1'='1 ' 
The password is not ‘anything’, hence password=anything results in FALSE, but ‘1’=‘1’ is a TRUE statement and hence returns a TRUE value. 
Finally, due to the OR operator, the value (FALSE OR TRUE) is TRUE, so authentication bypasses successfully. 
Just due to a simple string (Magical String) the entire database is compromised. 
How To Prevent 
Before executing the queries for the user credentials, make some changes like the following: 
$id = $_GET['id'] 
(1) $id = Stripslashes($id) 
(2) $id = mysql_real_escape_String($id) 
So due to (1) each single quote (‘) in the input string is replaced with double quotes (“), and due to (2) before every (’) it adds (/). 
The revised magical string fails to bypass the authentication, and your database stays secure. 
See also 
SQL injection on Wikipedia 
Explanation of SQL injection on OWASP (Open Web Application Security Project) 

{{GlossarySidebar}} 
Secure Sockets Layer, or SSL, was the old standard security technology for creating an encrypted network link between a server and client, ensuring all data passed is private and secure. 
The current version of SSL is version 3.0, released by Netscape in 1996, and has been superseded by the {{Glossary(“TLS”, “Transport Layer Security (TLS)”)}} protocol. 
See also 
Transport Layer Security (Wikipedia) 
Transport Layer Security (TLS) protocol 
Glossary 
{{Glossary(“HTTPS”)}} 
{{Glossary(“TLS”)}} 

{{GlossarySidebar}} 
In a computer programming language, a statement is a line of code commanding a task. 
Every program consists of a sequence of statements. 
See also 
Statement (computer science) on Wikipedia 
JavaScript statements and declarations 

{{GlossarySidebar}} 
JavaScript’s strict mode is a way to opt in to a restricted variant of JavaScript, thereby implicitly opting-out of “{{Glossary(”Sloppy_mode”, “sloppy mode”)}}“. 
Strict mode isn’t just a subset: it intentionally has different semantics from normal code. 
Strict mode for an entire script is invoked by including the statement "use strict"; before any other statements. 
See also 
Strict mode 
{{Glossary(“Sloppy mode”)}} 

{{GlossarySidebar}} 
In any computer programming language, a string is a sequence of {{Glossary(“character”,“characters”)}} used to represent text. 
In {{Glossary(“JavaScript”)}}, a String is one of the {{Glossary(“Primitive”, “primitive values”)}} and the {{jsxref(“String”)}} object is a {{Glossary(“wrapper”)}} around a String primitive. 
See also 
String (computer science) on Wikipedia 
JavaScript data types and data structures 

{{GlossarySidebar}} 
STUN (Session Traversal Utilities for NAT) is an auxiliary protocol for transmitting data around a {{glossary(“NAT”)}} (Network Address Translator). 
STUN returns the {{glossary(“IP address”)}}, {{glossary(“port”)}}, and connectivity status of a networked computer behind a NAT. 
See also 
STUN on Wikipedia 
WebRTC protocols 
Technical reference 
Specification 

{{GlossarySidebar}} 
Scalable Vector Graphics (SVG) is a 2D vector image format based on an {{Glossary(“XML”)}} syntax. 
The {{Glossary(“W3C”)}} began work on SVG in the late 1990s, but SVG only became popular when {{Glossary(“Microsoft Internet Explorer”, “Internet Explorer”)}} 9 came out with SVG support. 
All major {{Glossary(“browser”,“browsers”)}} now support SVG. 
Based on an {{Glossary(“XML”)}} syntax, SVG can be styled with {{Glossary(“CSS”)}} and made interactive using {{Glossary(“JavaScript”)}}. 
HTML allows direct embedding of SVG {{Glossary(“Tag”,“tags”)}} in an {{Glossary(“HTML”)}} document. 
As a vector image format, SVG graphics can scale infinitely, making them invaluable in {{Glossary(“responsive web design”, “responsive design”)}}, since you can create interface elements and graphics that scale to any screen size. 
SVG also provides a useful set of tools, such as clipping, masking, filters, and animations. 
See also 
SVG on Wikipedia 
W3.org’s SVG Primer 
SVG documentation on MDN 
Latest SVG specification 

{{GlossarySidebar}} 
Apache Subversion (SVN) is a free source control management ({{Glossary(“SCM”)}}) system. 
It allows developers to keep a history of text and code modifications. 
Although SVN can also handle binary files, we do not recommend that you use it for such files. 
See also 
Apache Subversion on Wikipedia 
Official website 

{{GlossarySidebar}} 
Synchronous refers to real-time communication where each party receives (and if necessary, processes and replies to) messages instantly (or as near to instantly as possible). 
A human example is the telephone — during a telephone call you tend to respond to another person immediately. 
Many programming commands are also synchronous — for example when you type in a calculation, the environment will return the result to you instantly, unless you program it not to. 
See also 
{{glossary(“Asynchronous”)}} 
Synchronous and asynchronous requests using the XMLHttpRequest() {{glossary(“API”)}} 

{{GlossarySidebar}} 
An {{Glossary(“exception”)}} caused by the incorrect use of a pre-defined {{Glossary(“syntax”)}}. 
Syntax errors are detected while compiling or parsing source code. 
For example, if you leave off a closing brace (}) when defining a {{Glossary(“JavaScript”)}} function, you trigger a syntax error. 
Browser development tools display {{Glossary(“JavaScript”)}} and {{Glossary(“CSS”)}} syntax errors in the console. 
See also 
Syntax error on Wikipedia 
{{jsxref(“SyntaxError”)}} JavaScript object 

{{GlossarySidebar}} 
In {{Glossary(“HTML”)}}, a tag is used for creating an {{Glossary(“element”)}}. 
The name of an HTML element is the name that appears at the beginning of the element’s start tag and at the end of the element’s end tag (if the element has an end tag). 
For example, the p in the <p> start tag and </p> end tag is the name of the HTML paragraph element. 
Note that an element name in an end tag is preceded by a slash character: </p>, and that for {{glossary(“void element”, “void elements”)}}, the end tag is neither required nor allowed. 
See also 
HTML element on Wikipedia 
HTML elements syntax on {{glossary(“WHATWG”)}} 
Introduction to HTML 

{{GlossarySidebar}} 
TCP guarantees the delivery of data and packets in the same order as they were sent. 
Vint Cerf and Bob Kahn, who were DARPA scientists at the time, designed TCP in the 1970s. 
TCP’s role is to ensure the packets are reliably delivered, and error-free. 
TCP implements congestion control, which means the initial requests start small, increasing in size to the levels of bandwidth the computers, servers, and network can support. 
See also 
Transmission Control Protocol (Wikipedia) 
HTTP Overview 
How browsers work 
Glossary {{Glossary(“IPv4”)}} 

{{GlossarySidebar}} 
{{glossary(‘TCP’)}} slow start helps buildup transmission speeds to the network’s capabilities. 
It does this without initially knowing what those capabilities are and without creating congestion. {{glossary(‘TCP’)}} slow start is an algorithm used to detect the available bandwidth for packet transmission, and balances the speed of a network connection. 
It prevents the appearance of network congestion whose capabilities are initially unknown, and slowly increases the volume of information diffused until the network’s maximum capacity is found. 
To implement TCP slow start, the congestion window (cwnd) sets an upper limit on the amount of data a source can transmit over the network before receiving an acknowledgment (ACK). 
The slow start threshold (ssthresh) determines the (de)activation of slow start. 
When a new connection is made, cwnd is initialized to one TCP data or acknowledgment packet, and waits for an acknowledgement, or ACK. 
When that ACK is received, the congestion window is incremented until the cwnd is greater than ssthresh. 
Slow start also terminates when congestion is experienced. 
Congestion control 
Congestion itself is a state that happens within a network layer when the message traffic is too busy it slows the network response time. 
The server sends data in TCP packets, the user’s client then confirms delivery by returning acknowledgements, or ACKs. 
The connection has a limited capacity depending on hardware and network conditions. 
If the server sends too many packets too quickly, they will be dropped. 
Meaning, there will be no acknowledgement. 
The server registers this as missing ACKs. 
Congestion control algorithms use this flow of sent packets and ACKs to determine a send rate. 
See also 
Populating the page: how browsers work 
http overview 

{{GlossarySidebar}} 
Thread in computer science is the execution of running multiple tasks or programs at the same time. 
Each unit capable of executing code is called a thread. 
The {{Glossary(“main thread”)}} is the one used by the browser to handle user events, render and paint the display, and to run the majority of the code that comprises a typical web page or app. 
Because these things are all happening in one thread, a slow website or app script slows down the entire browser; worse, if a site or app script enters an infinite loop, the entire browser will hang. 
This results in a frustrating, sluggish (or worse) user experience. 
Modern {{Glossary(“JavaScript”)}} offers ways to create additional threads, each executing independently while possibly communicating between one another. 
This is done using technologies such as web workers, which can be used to spin off a sub-program that runs concurrently with the main thread in a thread of its own. 
This allows slow, complex, or long-running tasks to be executed independently of the main thread, preserving the overall performance of the site or app—as well as that of the browser overall. 
Threading also allows web applications to take advantage of modern multi-core processors: enabling even better performance than multi-threaded applications running on a single core. 
A special type of worker, called a service worker, can be created which can be left behind by a site—with the user’s permission—to run even when the user isn’t currently using that site. 
This is used to create sites capable of notifying the user when things happen while they’re not actively engaged with a site. 
Such as notifying a user they have received new email even though they’re not currently logged into their mail service. 
Overall it can be observed these threads within our operating system are extremely helpful. 
They help minimize the context switching time, enables more efficient communication and allows further use of the multiprocessor architecture. 
See also 
Asynchronous JavaScript 
Web worker API 
Service worker API 
Glossary 
{{Glossary(“Main thread”)}} 

three.js is a {{Glossary(“JavaScript”)}}-based {{Glossary(“WebGL”)}} engine that can run GPU-powered games and other graphics-powered apps straight from the {{Glossary(“browser”)}}. 
The three.js library provides many features and {{Glossary(“API”,“APIs”)}} for drawing 3D scenes in your browser. 
See also 
Three.js on Wikipedia 
three.js official website 

{{GlossarySidebar}} 
Time to First Byte (TTFB) refers to the time between the browser requesting a page and when it receives the first byte of information from the server. 
This time includes DNS lookup and establishing the connection using a TCP handshake and SSL handshake if the request is made over HTTPS. 
TTFB is the time it takes between the start of the request and the start of the response, in milliseconds: 
TTFB = responseStart - navigationStart 
See also 
A typical HTTP session 
PerformanceResourceTiming 
PerformanceTiming 

{{GlossarySidebar}} 
Transport Layer Security (TLS), formerly known as {{Glossary(“SSL”, “Secure Sockets Layer (SSL)”)}}, is a {{Glossary(“protocol”)}} used by applications to communicate securely across a network, preventing tampering with and eavesdropping on email, web browsing, messaging, and other protocols. Both SSL and TLS are client / server protocols that ensure communication privacy by using cryptographic protocols to provide security over a network. 
All modern browsers support the TLS protocol, requiring the server to provide a valid {{Glossary(“Digital certificate”, “digital certificate”)}} confirming its identity in order to establish a secure connection. 
It is possible for both the client and server to mutually authenticate each other, if both parties provide their own individual digital certificates. 
See also 
Transport Layer Security (Wikipedia) 
Transport Layer Security 
OWASP: Transport Layer Protection Cheat Sheet 
Glossary 
{{Glossary(“HTTPS”)}} {{Glossary(“SSL”)}} 

{{GlossarySidebar}} 
Tree shaking is a term commonly used within a JavaScript context to describe the removal of dead code. 
It relies on the import and export statements to detect if code modules are exported and imported for use between JavaScript files. 
In modern JavaScript applications, we use module bundlers (e.g., webpack or Rollup) to automatically remove dead code when bundling multiple JavaScript files into single files. 
This is important for preparing code that is production ready, for example with clean structures and minimal file size. 
See also 
“Benefits of dead code elimination during bundling” in Axel Rauschmayer’s book: “Exploring JS: Modules” 
Tree shaking implementation with webpack 

{{GlossarySidebar}} 
In {{Glossary(“JavaScript”)}}, a truthy value is a value that is considered true when encountered in a {{Glossary(“Boolean”)}} context. 
All values are truthy unless they are defined as {{Glossary(“Falsy”, “falsy”)}}. 
That is, all values are truthy except false, 0, -0, 0n, "", null, undefined, and NaN. 
{{Glossary(“JavaScript”)}} uses {{Glossary(“Type_Coercion”, “type coercion”)}} in Boolean contexts. 
Examples of truthy values in JavaScript (which will be coerced to true in boolean contexts, and thus execute the if block): 
if (true) 
if ({}) 
if ([]) 
if (42) 
if ("0") 
if ("false") 
if (new Date()) 
if (-42) 
if (12n) 
if (3.14) 
if (-3.14) 
if (Infinity) 
if (-Infinity) 
The logical AND operator, && 
If the first operand is truthy, the logical AND operator returns the second operand: 
true && "dog" 
// returns "dog" 
[] && "dog" 
// returns "dog" 
See also 
{{Glossary(“Falsy”)}} 
{{Glossary(“Type_Coercion”, “Type coercion”)}} 
{{Glossary(“Boolean”)}} Boolean coercion 

{{GlossarySidebar}} 
TURN (Traversal Using Relays around NAT) is a {{Glossary(‘protocol’)}} enabling a computer to receive and send data from behind a {{glossary(“NAT”, “Network Address Translator”)}} (NAT) or firewall. 
TURN is used by {{Glossary(“WebRTC”)}} to allow any two devices on the Internet to enter a peer-to-peer connection. 
See also 
TURN on Wikipedia 
WebRTC protocols 
Specification 
Specification update for IPv6 

{{GlossarySidebar}} 
Type coercion is the automatic or implicit conversion of values from one data type to another (such as strings to numbers). {{Glossary(“Type conversion”)}} is similar to type coercion because they both convert values from one data type to another with one key difference — type coercion is implicit whereas type conversion can be either implicit or explicit. 
Examples 
const value1 = "5"; 
const value2 = 9; 
let sum = value1 + value2; 
console.log(sum); 
In the above example, JavaScript has coerced the 9 from a number into a string and then concatenated the two values together, resulting in a string of 59. 
JavaScript had a choice between a string or a number and decided to use a string. 
The compiler could have coerced the 5 into a number and returned a sum of 14, but it did not. 
To return this result, you’d have to explicitly convert the 5 to a number using the {{jsxref(“Global_Objects/Number”, “Number()”)}} method: 
sum = Number(value1) + value2; 
See also 
Type conversion (Wikipedia) 
Glossary 
{{Glossary(“Type”)}} 
{{Glossary(“Type conversion”)}} 

{{GlossarySidebar}} 
Type conversion (or typecasting) means transfer of data from one data type to another. Implicit conversion happens when the compiler (for compiled languages) or runtime (for script languages like {{glossary(“JavaScript”)}}) automatically converts data types. 
The source code can also explicitly require a conversion to take place. 
For example, given the expression "foo" + 1, the {{glossary(“Number”)}} 1 is implicitly converted into a {{glossary(“String”)}} and the expression returns "foo1". 
Given the instruction Number("0x11"), the string "0x11" is explicitly converted to the number 17. 
See also 
Glossary 
{{Glossary(“Type”)}} 
{{Glossary(“Type coercion”)}} 

{{GlossarySidebar}} 
Type is a characteristic of a {{glossary(“value”)}} affecting what kind of data it can store, and the structure that the data will adhere to. For example, a {{Glossary(“boolean”)}} Data Type can hold only a true or false value at any given time, whereas a {{Glossary(“string”)}} has the ability to hold a string or a sequence of characters, a {{Glossary(“number”)}} can hold numerical values of any kind, and so on. 
A value’s data type also affects the operations that are valid on that value. 
Types also provides us with useful knowledge about the comparison between different values. 
See also 
Data type on Wikipedia 
JavaScript data types 
Glossary {{Glossary(“JavaScript”)}} 

{{GlossarySidebar}} 
UDP (User Datagram Protocol) is a long standing {{glossary(“protocol”)}} used together with {{glossary(“IPv6”,“IP”)}} for sending data when transmission speed and efficiency matter more than security and reliability. 
UDP uses a simple connectionless communication model with a minimum of protocol mechanism. 
UDP provides checksums for data integrity, and port numbers for addressing different functions at the source and destination of the datagram. 
It has no handshaking dialogues, and thus exposes the user’s program to any unreliability of the underlying network; There is no guarantee of delivery, ordering, or duplicate protection. 
If error-correction facilities are needed at the network interface level, an application may use the Transmission Control Protocol (TCP) or Stream Control Transmission Protocol (SCTP) which are designed for this purpose. 
UDP is suitable for purposes where error checking and correction are either not necessary or are performed in the application; UDP avoids the overhead of such processing in the protocol stack. 
Time-sensitive applications often use UDP because dropping packets is preferable to waiting for packets delayed due to retransmission, which may not be an option in a real-time system. 
See also 
User Datagram Protocol on Wikipedia 

{{GlossarySidebar}} 
User Interface (UI) is anything that facilitates the interaction between a user and a machine. 
In the world of computers, it can be anything from a keyboard, a joystick, a screen or a program. 
In case of computer software, it can be a command-line prompt, a webpage, a user input form, or the front-end of any application. 
See also 
User interface on Wikipedia 
Front end development on Wikipedia 

{{GlossarySidebar}} 
undefined is a {{Glossary(“primitive”)}} value automatically assigned to {{glossary(“variable”, “variables”)}} that have just been declared, or to formal {{Glossary(“Argument”,“arguments”)}} for which there are no actual arguments. 
Example 
let x; //create a variable but assign it no value 
console.log(`x's value is ${x}`); //logs "x's value is undefined" 
See also 
Undefined value on Wikipedia 
JavaScript data types and data structures 

{{GlossarySidebar}} 
Unicode is a standard {{Glossary(“Character set”,“character set”)}} that numbers and defines {{Glossary(“Character”,“characters”)}} from the world’s different languages, writing systems, and symbols. 
By assigning each character a number, programmers can create {{Glossary(“Character encoding”,“character encodings”)}}, to let computers store, process, and transmit any combination of languages in the same file or program. 
Before Unicode, it was difficult and error-prone to mix languages in the same data. 
For example, one character set would store Japanese characters, and another would store the Arabic alphabet. 
If it was not clearly marked which parts of the data were in which character set, other programs and computers would display the text incorrectly, or damage it during processing. 
If you’ve ever seen text where characters like curly quotes (“”) were replaced with gibberish like Ã‚Â£, then you’ve seen this problem, known as Mojibake. 
The most common Unicode character encoding on the Web is {{Glossary(“UTF-8”)}}. 
Other encodings exist, like UTF-16 or the obsolete UCS-2, but UTF-8 is recommended. 
See also 
Unicode on Wikipedia 
The Unicode Standard: A Technical Introduction 

{{GlossarySidebar}} 
Unix time is a method to represent a timestamp, and is usually defined as the number of seconds since the beginning of the Unix epoch, which is January 1st, 1970, at midnight (UTC). Leap seconds are ignored. 
On the web platform, Unix time is used for timestamps, and is given as the number of milliseconds since the beginning of the Unix epoch. 
See also 
Unix time on Wikipedia 
Leap second on Wikipedia 

{{GlossarySidebar}} 
A URI (Uniform Resource Identifier) is a string that refers to a resource. 
The most common are {{Glossary(“URL”,“URLs”)}}, which identify the resource by giving its location on the Web. 
{{Glossary(“URN”,“URNs”)}}, by contrast, refer to a resource by a name, in a given namespace, such as the ISBN of a book. 
See also 
URI on Wikipedia 
RFC 3986 on URI 

{{GlossarySidebar}} 
Uniform Resource Locator (URL) is a text string that specifies where a resource (such as a web page, image, or video) can be found on the Internet. 
In the context of {{Glossary(“HTTP”)}}, URLs are called “Web address” or “link”. 
Your {{glossary(“browser”)}} displays URLs in its address bar, for example: https://developer.mozilla.org Some browsers display only the part of a URL after the “//”, that is, the {{Glossary(“Domain name”)}}. 
URLs can also be used for file transfer ({{Glossary(“FTP”)}}), emails ({{Glossary(“SMTP”)}}), and other applications. 
See also 
Understanding URLs and their structure 
The syntax of URLs is defined in the URL Living Standard 
URL on Wikipedia 

{{GlossarySidebar}} 
URN (Uniform Resource Name) is a {{Glossary(“URI”)}} in a standard format, referring to a resource without specifying its location or whether it exists. 
This example comes from RFC3986: urn:oasis:names:specification:docbook:dtd:xml:4.1.2 
See also 
URN on Wikipedia 

{{GlossarySidebar}} 
A user agent is a computer program representing a person, for example, a {{Glossary(“Browser”,“browser”)}} in a {{Glossary(“World Wide Web”, “Web”)}} context. 
Besides a browser, a user agent could be a bot scraping webpages, a download manager, or another app accessing the Web. 
Along with each request they make to the server, browsers include a self-identifying {{HTTPHeader(“User-Agent”)}} {{Glossary(“HTTP”)}} header called a user agent (UA) string. 
This string often identifies the browser, its version number, and its host operating system. 
Spam bots, download managers, and some browsers often send a fake UA string to announce themselves as a different client. 
This is known as user agent spoofing. 
The user agent string can be accessed with {{Glossary(“JavaScript”)}} on the client side using the {{domxref(“Navigator/userAgent”, “NavigatorID.userAgent”)}} property. 
A typical user agent string looks like this: "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:35.0) Gecko/20100101 Firefox/35.0". 
See also 
User agent on Wikipedia 
Browser detection using the user agent 
Glossary: 
{{Glossary(“Browser”)}} 

{{GlossarySidebar}} 
UTF-8 (UCS Transformation Format 8) is the World Wide Web’s most common {{Glossary(“Character encoding”, “character encoding”)}}. 
Each character is represented by one to four bytes. 
UTF-8 is backward-compatible with {{Glossary(“ASCII”)}} and can represent any standard Unicode character. 
The first 128 UTF-8 characters precisely match the first 128 ASCII characters (numbered 0-127), meaning that existing ASCII text is already valid UTF-8. 
All other characters use two to four bytes. 
Each byte has some bits reserved for encoding purposes. 
Since non-ASCII characters require more than one byte for storage, they run the risk of being corrupted if the bytes are separated and not recombined. 
See also 
UTF-8 on Wikipedia 
FAQ about UTF-8 on Unicode website 

{{GlossarySidebar}} 
UX is an acronym that stands for User eXperience. 
It is the study of the interaction between users and a system. 
Its goal is to make a system easy to interact with from the user’s point of view. 
The system can be any kind of product or application that an end user is meant to interact with. 
UX studies undertaken on a web page for example can demonstrate whether it is easy for users to understand the page, navigate to different areas, and complete common tasks, and where such processes could have less friction. 
See also 
User experience on Wikipedia 

{{GlossarySidebar}} 
In the context of data or an object {{Glossary(“Wrapper”, “wrapper”)}} around that data, the value is the {{Glossary(“Primitive”,“primitive value”)}} that the object wrapper contains. 
In the context of a {{Glossary(“Variable”,“variable”)}} or {{Glossary(“Property”,“property”)}}, the value can be either a primitive or an {{Glossary(“Object reference”,“object reference”)}}. 
In the context of CSS property values, there are specified, computed, and actual values. The final value for every CSS property applied to every element and pseudo-element is the result of a four-step calculation: the value is determined through specification (the “specified value”, then resolved into a value that is used for inheritance (the “computed value”), then converted into an absolute value if necessary (the “used value”), and finally transformed according to the limitations of the local environment (the “actual value”). 
For CSS data types, see CSS values and units. 
See also 
Primitive wrapper class on Wikipedia 

{{GlossarySidebar}} 
A variable is a named reference to a {{Glossary(“Value”, “value”)}}. 
That way an unpredictable value can be accessed through a predetermined name. 
See also 
Variable (computer science) on Wikipedia 
Declaring variables in JavaScript 
var statement in JavaScript 

{{GlossarySidebar}} 
Browser vendors used to add prefixes to experimental or nonstandard CSS properties and JavaScript APIs, so developers could experiment with new ideas. 
This, in theory, helped to prevent their experiments from being relied upon and then breaking web developers’ code during the standardization process. 
Web developers included prefixed features on production websites, despite their experimental nature. 
This made it more difficult for browser vendors to ensure compatibility while working on new features. Including prefixed features also harmed smaller browser vendors who ended up having to add other browsers’ prefixes in order to render popular websites. 
This allows developers to change browser configurations to test upcoming features. Browsers now add experimental features behind user-controlled flags or preferences. Flags can be added for smaller specifications enabling reaching a stable state much more quickly. 
CSS prefixes 
The most common browser CSS prefixes you will see in older code bases include: 
-webkit- (Chrome, Safari, newer versions of Opera and Edge, almost all iOS browsers including Firefox for iOS; basically, any WebKit or Chromium-based browser) 
-moz- (Firefox) 
-o- (old pre-WebKit versions of Opera) 
-ms- (Internet Explorer and Microsoft Edge, before Chromium) 
Sample usage: 
-webkit-transition: all 4s ease; 
-moz-transition: all 4s ease; 
-ms-transition: all 4s ease; 
-o-transition: all 4s ease; 
transition: all 4s ease; 
transition: all 4s ease; 
Historically, browser vendors have also used prefixes for experimental APIs. 
If an entire interface was experimental, then the interface’s name was prefixed (but not the properties or methods within). 
If an experimental property or method was added to a standardized interface, then the individual method or property was prefixed. 
Interface prefixes 
Prefixes for interface names are upper-cased: 
WebKit (Chrome, Safari, newer versions of Opera and Edge, almost all iOS browsers (including Firefox for iOS); basically, any WebKit and Chromium-based browser) 
Moz (Firefox) 
O (Older, pre-WebKit, versions of Opera) 
MS (Internet Explorer and Microsoft Edge, before Chromium) 
Property and method prefixes 
The prefixes for properties and methods are lower-case: 
webkit (Chrome, Safari, newer versions of Opera and Edge, almost all iOS browsers (including Firefox for iOS); basically, any WebKit and Chromium-based browser) 
moz (Firefox) 
o (Old, pre-WebKit, versions of Opera) 
ms (Internet Explorer and Microsoft Edge, before Chromium) 
Sample usage: 
window.requestAnimationFrame = 
window.requestAnimationFrame || 
window.mozRequestAnimationFrame || 
window.webkitRequestAnimationFrame || 
window.oRequestAnimationFrame || 
window.msRequestAnimationFrame; 
requestAnimationFrame(callback); 
See also 
Browser prefixes on Wikipedia 

{{GlossarySidebar}} 
A viewport represents a polygonal (normally rectangular) area in computer graphics that is currently being viewed. 
In web browser terms, it refers to the part of the document you’re viewing which is currently visible in its window (or the screen, if the document is being viewed in full screen mode). 
Content outside the viewport is not visible onscreen until scrolled into view. 
This can be smaller than the layout viewport, such as when the user has pinched-zoomed. 
The {{Glossary(“layout viewport”)}} remains the same, but the visual viewport became smaller. 
See also 
Visual Viewport API 
Viewport on Wikipedia 

{{GlossarySidebar}} 
A void element is an {{Glossary(“element”)}} in HTML that cannot have any child nodes (i.e., nested elements or text nodes). 
Void elements only have a start tag; end tags must not be specified for void elements. 
In HTML, a void element must not have an end tag. 
For example, <input type="text"></input> is invalid HTML. 
In contrast, SVG or MathML elements that cannot have any child nodes may use an end tag instead of XML self-closing-tag syntax in their start tag. 
The HTML, SVG, and MathML specifications define very precisely what each element can contain. 
So, some combinations of tags have no semantic meaning. 
Although there is no way to mark up a void element as having any children, child nodes can be added programmatically to the element in the DOM using JavaScript. 
But that is not a good practice, as the outcome will not be reliable. 
The void elements in HTML are as follows: 
{{HTMLElement(“area”)}} 
{{HTMLElement(“base”)}} 
{{HTMLElement(“br”)}} 
{{HTMLElement(“col”)}} 
{{HTMLElement(“embed”)}} 
{{HTMLElement(“hr”)}} 
{{HTMLElement(“img”)}} 
{{HTMLElement(“input”)}} 
{{HTMLElement(“link”)}} 
{{HTMLElement(“meta”)}} 
{{HTMLElement(“param”)}} {{deprecated_inline}} 
{{HTMLElement(“source”)}} 
{{HTMLElement(“track”)}} 
{{HTMLElement(“wbr”)}} 
Self-closing tags 
Self-closing tags (<tag />) do not exist in HTML. 

{{GlossarySidebar}} 
WebDAV (Web Distributed Authoring and Versioning) is an {{Glossary(“HTTP”)}} Extension that lets web developers update their content remotely from a client. 
WebDAV is rarely used alone, but two extensions are very common: {{Glossary(“CalDAV”)}} (remote-access calendar) and {{Glossary(“CardDAV”)}} (remote-access address book). 
WebDAV allows clients to 

{{GlossarySidebar}} 
WebExtensions is a cross-browser system for developing browser extensions in Firefox. 
This system provides APIs, which to a large extent are supported across different browsers like Mozilla Firefox, Google Chrome, Opera Browser, Microsoft Edge, or Apple Safari. 
See also 
Browser extensions on MDN 

{{GlossarySidebar}} 
WebGL (Web Graphics Library) is a {{Glossary(“JavaScript”)}} {{Glossary(“API”)}} that draws interactive 2D and 3D graphics. 
The Khronos Group maintains WebGL, which is based on {{Glossary(“OpenGL”)}} ES 2.0. 
You can invoke WebGL within the {{Glossary(“HTML”)}} {{HTMLElement(“canvas”)}} element, which provides a rendering surface. 

{{GlossarySidebar}} 
See also 
WebP on Wikipedia 

{{GlossarySidebar}} 
WebRTC (Web Real-Time Communication) is an {{Glossary(“API”)}} that can be used by video-chat, voice-calling, and P2P-file-sharing Web apps. 
WebRTC consists mainly of these parts: 
{{domxref(“MediaDevices.getUserMedia”, “getUserMedia()”)}} : Grants access to a device’s camera and/or microphone, and can plug in their signals to a RTC connection. 
{{domxref(“RTCPeerConnection”)}} 
: An interface to configure video chat or voice calls. 
{{domxref(“RTCDataChannel”)}} 
: Provides a method to set up a {{Glossary(“P2P”, “peer-to-peer”)}} data pathway between browsers. 
See also 
WebRTC on Wikipedia 
WebRTC API on MDN 
Browser support for WebRTC 

{{GlossarySidebar}} 
WebSocket is a {{Glossary(“protocol”)}} that allows for a persistent {{Glossary(“TCP”)}} connection between {{Glossary(“Server”, “server”)}} and client so they can exchange data at any time. 
Any client or server application can use WebSocket, but principally web {{Glossary(“Browser”, “browsers”)}} and web servers. 
Through WebSocket, servers can pass data to a client without prior client request, allowing for dynamic content updates. 
See also 
Websocket on Wikipedia 
WebSocket reference on MDN 
Writing WebSocket client applications 
Writing WebSocket servers 

{{GlossarySidebar}} 
The WHATWG (Web Hypertext Application Technology Working Group) is a community that maintains and develops web standards, including {{Glossary(“DOM”)}}, Fetch, and {{Glossary(“HTML”)}}. 
Employees of Apple, Mozilla, and Opera established WHATWG in 2004. 
See also 
WHATWG website 
WHATWG on Wikipedia 

{{GlossarySidebar}} 
The World Wide Web—commonly referred to as WWW, W3, or the Web—is a system of interconnected public webpages accessible through the {{Glossary(“Internet”)}}. 
The Web is not the same as the Internet: the Web is one of many applications built on top of the Internet. 
Tim Berners-Lee proposed the architecture of what became known as the World Wide Web. 
He created the first web {{Glossary(“Server”,“server”)}}, web {{Glossary(“Browser”,“browser”)}}, and webpage on his computer at the CERN physics research lab in 1990. 
In 1991, he announced his creation on the alt.hypertext newsgroup, marking the moment the Web was first made public. 
The system we know today as “the Web” consists of several components: 
The {{Glossary(“HTTP”)}} protocol governs data transfer between a server and a client. 
To access a Web component, a client supplies a unique universal identifier, called a {{Glossary(“URL”)}} (uniform resource locator) or {{Glossary(“URI”)}} (uniform resource identifier) (formally called Universal Document Identifier (UDI)). 
{{Glossary(“HTML”)}} (hypertext markup language) is the most common format for publishing web documents. 
Linking, or connecting resources through {{Glossary(“Hyperlink”,“hyperlinks”)}}, is a defining concept of the Web, aiding its identity as a collection of connected documents. 
Soon after inventing the Web, Tim Berners-Lee founded the {{Glossary(“W3C”)}} (World Wide Web Consortium) to standardize and develop the Web further. 
This consortium consists of core Web interest groups, such as web browser developers, government entities, researchers, and universities. 
Its mission includes education and outreach. 
See also 
Learn the Web 
World Wide Web on Wikipedia 
The W3C website 

{{GlossarySidebar}} 
XHTML is a term that was historically used to describe HTML documents written to conform with {{Glossary(“XML”)}} syntax rules. 
The following example shows an HTML document and corresponding “XHTML” document, and the accompanying {{Glossary(“HTTP”)}} {{HTTPHeader(“Content-Type”)}} headers they should be served with. 
HTML document 
<!-- Content-Type: text/html --> 
<! 
doctype html> 
<html lang="en-US"> 
<head> 
<meta charset="utf-8" /> 
<title>HTML</title> 
</head> 
<body> 
<p>I am a HTML document</p> 
</body> 
</html> 
XHTML document 
<!-- Content-Type: application/xhtml+xml --> 
<? 
xml version="1.0" encoding="UTF-8"? 
> 
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US"> 
<head> 
<title>XHTML</title> 
</head> 
<body> 
<p>I am a XHTML document</p> 
</body> 
</html> 
In practice, very few “XHTML” documents are served over the web with a Content-Type: application/xhtml+xml header. 
Instead, even though the documents are written to conform to XML syntax rules, they are served with a Content-Type: text/html header — so browsers parse those documents using HTML parsers rather than XML parsers. 
See also 
HTML 
HTML5 
SVG 
MathML XML 

{{GlossarySidebar}} 
{{domxref(“XMLHttpRequest”)}} (XHR) is a {{Glossary(“JavaScript”)}} {{Glossary(“API”)}} to create {{Glossary(“AJAX”)}} requests. 
Its methods provide the ability to send network requests between the {{Glossary(“browser”)}} and a {{Glossary(“server”)}}. 
See also 
XMLHttpRequest on Wikipedia 

{{GlossarySidebar}} 
eXtensible Markup Language (XML) is a generic markup language specified by the W3C. 
The information technology (IT) industry uses many languages based on XML as data-description languages. 
XML tags resemble HTML tags, but XML is much more flexible because it lets users define their own tags. 
In this way XML acts like a meta-language—that is, it can be used to define other languages, such as {{Glossary(“RSS”)}}. 
Moreover, HTML is a presentation language, whereas XML is a data-description language. 
This means that XML has far broader applications than just the Web. 
For example, Web services can use XML to exchange requests and responses. 
See also 
XML introduction 

{{GlossarySidebar}} 
XPath is a query language that can access sections and content in an {{glossary(“XML”)}} document. 
See also 
XPath documentation on MDN 
XPath specification 
Official website 
XPath on Wikipedia 

{{GlossarySidebar}} 
XQuery is a computer language for updating, retrieving, and calculating data in {{glossary(“XML”)}} databases. 
See also 
Official website 
XQuery on Wikipedia 




{{LearnSidebar}} 
Learning some HTML, CSS, and JavaScript is useful if you want to become a web developer. Beyond mechanical use, it’s important to learn how to use these technologies responsibly so that all readers might use your creations on the web. 
To help you achieve this, this module will cover general best practices (which are demonstrated throughout the HTML, CSS, and JavaScript topics), cross browser testing, and some tips on enforcing accessibility from the start. 
We’ll cover accessibility in special detail. 
Overview 
When someone describes a site as “accessible”, they mean that any user can use all its features and content, regardless of how the user accesses the web — even and especially users with physical or mental impairments. 
Sites should be accessible to keyboard, mouse, and touch screen users, and any other way users access the web, including screen readers and voice assistants like Alexa and Google Home. 
Applications should be understandable and usable by people regardless of auditory, visual, physical, or cognitive abilities. 
Sites should also not cause harm: web features like motion can cause migraines or epileptic seizures. 
By default, HTML is accessible, if used correctly. Web accessibility involves ensuring that content remains accessible, regardless of who and how the web is accessed. 
The Firefox Accessibility Inspector is a very useful tool for checking out accessibility issues on web pages. 
The following video provides a nice introduction to it: 
{{EmbedYouTube(“7mqqgIxX_NU”)}} 
Callout: 
Looking to become a front-end web developer? 
We have put together a course that includes all the essential information you need to work towards your goal. 
Get started 
To get the most out of this module, it would be a good idea to either work through at least the first two modules of the HTML, CSS, and JavaScript topics, or perhaps even better, work through the relevant parts of the accessibility module as you work through the related technology topics. 
Note: If you are working on a computer/tablet/other devices where you don’t have the ability to create your own files, you can try out most of the code examples in an online coding program such as JSBin or Glitch. 
Guides 
What is accessibility? 

{{LearnSidebar}}{{PreviousMenuNext(“Learn/Accessibility/Multimedia”,“Learn/Accessibility/Accessibility_troubleshooting”, “Learn/Accessibility”)}} 
With web access on mobile devices being so popular and renowned platforms such as iOS and Android having full-fledged accessibility tools, it is important to consider the accessibility of your web content on these platforms. 
This article looks at mobile-specific accessibility considerations. 
Objective: 
To make a website accessible and usable on mobile, you just need to follow general good web design and accessibility best practices. 


{{LearnSidebar}}{{PreviousMenuNext(“Learn/Accessibility/CSS_and_JavaScript”,“Learn/Accessibility/Multimedia”, “Learn/Accessibility”)}} 
Following on from the previous article, sometimes making complex UI controls that involve unsemantic HTML and dynamic JavaScript-updated content can be difficult. 
WAI-ARIA is a technology that can help with such problems by adding in further semantics that browsers and assistive technologies can recognize and use to let users know what is going on. 
Here we’ll show how to use it at a basic level to improve accessibility. Prerequisites: 
What is WAI-ARIA? 
As web apps started to get more complex and dynamic, a new set of accessibility features and problems started to appear. 



{{LearnSidebar}} 
This section lists questions related to aesthetics, page structure, accessibility techniques, etc. 
How do I start to design my website? 



{{LearnSidebar}} 



{{QuicklinksWithSubPages(“Learn/Common_questions”)}} 
Google App Engine is a powerful platform that lets you build and run applications on Google’s infrastructure — whether you need to build a multi-tiered web application from scratch or host a static website. 
Here’s a step-by-step guide to hosting your website on Google App Engine. 
Creating a Google Cloud Platform project 
To use Google’s tools for your own site or app, you need to create a new project on Google Cloud Platform. This requires having a Google account. 
Go to the App Engine dashboard on the Google Cloud Platform Console and press the Create button. 
If you’ve not created a project before, you’ll need to select whether you want to receive email updates or not, agree to the Terms of Service, and then you should be able to continue. 
Enter a name for the project, edit your project ID and note it down. For this tutorial, the following values are used: 
Project Name: GAE Sample Site 
Project ID: gaesamplesite 
Click the Create button to create your project. 
Creating an application 
Each Cloud Platform project can contain one App Engine application. Let’s prepare an app for our project. 
We’ll need a sample application to publish. 
If you’ve not got one to use, download and unzip this sample app. 
Have a look at the sample application’s structure — the website folder contains your website content and app.yaml is your application configuration file. 
Your website content must go inside the website folder, and its landing page must be called index.html, but apart from that it can take whatever form you like. 
The app.yaml file is a configuration file that tells App Engine how to map URLs to your static files. 
You don’t need to edit it. 
Publishing your application 
Now that we’ve got our project made and sample app files collected together, let’s publish our app. 
Open Google Cloud Shell. 
Drag and drop the sample-app folder into the left pane of the code editor. 
Run the following in the command line to select your project: 
gcloud config set project gaesamplesite 
Then run the following command to go to your app’s directory: 
cd sample-app 


{{LearnSidebar}} 
This section lists questions related to the tools/software you can use to build websites. 
What software do I need to build a website? 

{{QuicklinksWithSubPages(“Learn/Common_questions”)}} 
This article explains how to set up a simple local testing server on your machine, and the basics of how to use it. 
Prerequisites: 
You need to first know how the Internet works, and what a Web server is. Objective: 


{{QuicklinksWithSubPages(“Learn/Common_questions”)}} 
GitHub is a “social coding” site. 
It allows you to upload code repositories for storage in the Git version control system. You can then collaborate on code projects, and the system is open-source by default, meaning that anyone in the world can find your GitHub code, use it, learn from it, and improve on it. 
You can do that with other people’s code too! 
This article provides a basic guide to publishing content using GitHub’s gh-pages feature. 
Publishing content 
GitHub is a very important and useful community to get involved in, and Git/GitHub is a very popular version control system — most tech companies now use it in their workflow. 
GitHub has a very useful feature called GitHub Pages, which allows you to publish website code live on the Web. 
Basic GitHub setup 
First of all, install Git on your machine. 
This is the underlying version control system software that GitHub works on top of. 
Next, sign up for a GitHub account. 
It’s simple and easy. 
Once you’ve signed up, log in to github.com with your username and password. 
Preparing your code for upload 

{{QuicklinksWithSubPages(“Learn/Common_questions”)}} 
Every modern web browser includes a powerful suite of developer tools. 
These tools do a range of things, from inspecting currently-loaded HTML, CSS and JavaScript to showing which assets the page has requested and how long they took to load. 
This article explains how to use the basic functions of your browser’s devtools. 
Note: Before you run through the examples below, open the Beginner’s example site that we built during the Getting started with the Web article series. 
You should have this open as you follow the steps below. 
How to open the devtools in your browser 
The web page is displayed in the top half of the browser, the developer tools occupy the bottom half. 
How do you pull it up? 
Three ways: 
Keyboard: 
macOS: ⌘ + ⌥ + I 
Menu bar: 
Firefox: Menu ➤ Web Developer ➤ Toggle Tools, or Tools ➤ Web Developer ➤ Toggle Tools 
Chrome: More tools ➤ Developer tools 
Opera: Developer ➤ Developer tools 
The developer tools usually open by default to the inspector, which looks something like the following screenshot. 
The developer tools has several tabs. 
Tap/click the Inspector tab. In Chrome, Microsoft Edge, or Opera, tap/click Elements. In Safari, the controls are not so clearly presented, but you should see the HTML if you haven’t selected something else to appear in the window. Press the Style button to see the CSS. Exploring the DOM inspector 
You can make any changes you’d like, but you cannot save your changes. 
The rules applied to the current element are shown in order of most-to-least-specific. 
Click the checkboxes next to each declaration to see what would happen if you removed the declaration. 
Click the little arrow next to each shorthand property to show the property’s longhand equivalents. 
Safari DOM inspector and style explorer 
A test website that is served locally in port 8080. 
The developer tools sub-window is open. The JavaScript debugger tab is selected. 
It allows you to watch the value of variables and set breakpoints. A file with name ‘example.js’ is selected from the sources pane. 
To get to the debugger: 
Exploring the debugger 
The JavaScript console is an incredibly useful tool for debugging JavaScript that isn’t working as expected. 
Two JavaScript functions have been executed in the console. 



{{LearnSidebar}} 
This section covers questions relating to general knowledge of the web ecosystem and how it works. 
How does the Internet work? 

{{QuicklinksWithSubPages(“Learn/Common_questions”)}} 
In this article, we describe various web-related concepts: web pages, websites, web servers, and search engines. 
These terms are often confused by newcomers to the web or are incorrectly used. 
Let’s learn what they each mean! 
Prerequisites: 
You should know how the Internet works. 
Objective: 
Be able to describe the differences between a web page, a website, a web server, and a search engine. 
Summary 
As with any area of knowledge, the web comes with a lot of jargon. Don’t worry. 
We won’t overwhelm you with all of it (we have a glossary if you’re curious). However, there are a few basic terms you need to understand at the outset since you’ll hear these expressions all the time as you read on. 
It’s easy to mix these terms since they refer to related but different functionalities. 
You’ll sometimes see these terms misused in news reports and elsewhere, so getting them mixed up is understandable. 
We’ll cover these terms and technologies in more detail as we explore further, but these quick definitions will be a great start for you: 
web page 
: A document which can be displayed in a web browser such as Firefox, Google Chrome, Opera, Microsoft Edge, or Apple Safari. 
These are also often called just “pages.” 
website 
: A collection of web pages which are grouped together and usually connected together in various ways. 
Often called a “website” or a “site.” 
web server 
: A computer that hosts a website on the Internet. 
search engine 


{{QuicklinksWithSubPages(“Learn/Common_questions”)}} Prerequisites: 
Domain names are a key part of the Internet infrastructure. 
They provide a human-readable address for any web server available on the Internet. 











{{LearnSidebar}}{{PreviousMenuNext(“Learn/CSS/Building_blocks/Backgrounds_and_borders”, “Learn/CSS/Building_blocks/Overflowing_content”, “Learn/CSS/Building_blocks”)}} 


{{LearnSidebar}} 
The aim of this skill test is to assess whether you understand how special elements like images, media and form elements are treated in CSS. 
Note: You can try out solutions in the interactive editors below. However, it may be helpful to download the code and use an online tool such as CodePen, jsFiddle, or Glitch to work on the tasks. 
If you get stuck, then ask us for help — see the Assessment or further help section at the bottom of this page. 
Task 1 
In this task, you have an image that is overflowing the box. 
We want the image to scale down to fit inside the box without any extra white space, but we do not mind if some part of the image is cropped. 
An image in a box 
Try updating the live code below to recreate the finished example: 
{{EmbedGHLiveSample(“css-examples/learn/tasks/images/object-fit.html”, ‘100%’, 1000)}} 
Download the starting point for this task to work in your own editor or in an online editor. 
Task 2 
In this task, you have a simple form. 
Your task is to make the following changes: 
Use attribute selectors to target the search field and button inside .myform. 
Make the form field and button use the same text size as the rest of the form. 
Give the form field and button 10 px of padding. 
Give the button a background of rebeccapurple, white foreground, no border and rounded corners of 5px. 
A single line form 
Try updating the live code below to recreate the finished example: 
{{EmbedGHLiveSample(“css-examples/learn/tasks/images/form.html”, ‘100%’, 600)}} 
Download the starting point for this task to work in your own editor or in an online editor. 
Assessment or further help 
You can practice these examples in the Interactive Editors above. 
If you would like your work assessed or are stuck and want to ask for help: 
Put your work into an online shareable editor such as CodePen, jsFiddle, or Glitch. 
You can write the code yourself or use the starting point files linked to in the above sections. 
Write a post asking for assessment and/or help at the MDN Discourse forum Learning category. 
Your post should include: 
A descriptive title such as “Assessment wanted for images and form elements skill test 1”. 
Details of what you have already tried and what you would like us to do; for example, tell us if you’re stuck and need help or want an assessment. 
A link to the example you want assessed or need help with, in an online shareable editor (as mentioned in step 1 above). 
This is a good practice to get into — it’s very hard to help someone with a coding problem if you can’t see their code. 
A link to the actual task or assessment page, so we can find the question you want help with. 

{{LearnSidebar}} 
This module carries on where CSS first steps left off — now that you’ve gained familiarity with the language and its syntax, and got some basic experience using it, it’s time to dive a bit deeper. 
This module looks at the cascade and inheritance, all the selector types we have available, units, sizing, styling backgrounds and borders, debugging, and lots more. 
We have put together a course that includes all the essential information you need to work towards your goal. 
Prerequisites 
Before starting this module, you should have: 
Basic familiarity with using computers, and using the Web passively (i.e., just looking at it, consuming the content). 
A basic work environment set up as detailed in Installing basic software, and an understanding of how to create and manage files, as detailed in Dealing with files. 
Basic familiarity with HTML, as discussed in the Introduction to HTML module. 
An understanding of the basics of CSS, as discussed in the CSS first steps module. 
Note: If you are working on a computer/tablet/other device where you don’t have the ability to create your own files, you could try out (most of) the code examples in an online coding program such as JSBin or Glitch. 
Guides 
This module contains the following articles, which cover the most essential parts of the CSS language. 
Along the way you’ll come across plenty of exercises to allow you to test your understanding. 
CSS selectors 
: There are a wide variety of CSS selectors available, allowing for fine-grained precision when selecting elements to style. 
In this article and its sub-articles, we’ll run through the different types in great detail, seeing how they work. 
The sub-articles are as follows: 
Type, class, and ID selectors 
Attribute selectors 
Pseudo-classes and pseudo-elements 
Combinators 
Cascade, specificity, and inheritance 
Cascade layers 
The box model 
: Everything in CSS has a box around it, and understanding these boxes is key to being able to create layouts with CSS, or to align items with other items. 
In this lesson, we will take a proper look at the CSS Box Model, in order that you can move onto more complex layout tasks with an understanding of how it works and the terminology that relates to it. 
Backgrounds and borders 
: In this lesson we will take a look at some of the creative things you can do with CSS backgrounds and borders. 
From adding gradients, background images, and rounded corners, backgrounds and borders are the answer to a lot of styling questions in CSS. 
Handling different text directions 
: In recent years, CSS has evolved in order to better support different directionality of content, including right-to-left but also top-to-bottom content (such as Japanese) — these different directionalities are called writing modes. 
As you progress in your study and begin to work with layout, an understanding of writing modes will be very helpful to you, therefore we will introduce them in this article. 
Overflowing content 
: In this lesson we will look at another important concept in CSS — overflow. 
Overflow is what happens when there is too much content to be contained comfortably inside a box. 
In this guide, you will learn what it is and how to manage it. 
CSS values and units 
: Every property used in CSS has a value or set of values that are allowed for that property. 
In this lesson, we will take a look at some of the most common values and units in use. 
Sizing items in CSS 
: In the various lessons so far you have come across a number of ways to size items on a web page using CSS. 
Understanding how big the different features in your design will be is important, and in this lesson, we will summarize the various ways elements get a size via CSS and define a few terms around sizing that will help you in the future. 
Images, media, and form elements 
: In this lesson we will take a look at how certain special elements are treated in CSS. 
Images, other media, and form elements behave a little differently in terms of your ability to style them with CSS than regular boxes. 
Understanding what is and isn’t possible can save some frustration, and this lesson will highlight some of the main things that you need to know. 
Styling tables 
: Styling an HTML table isn’t the most glamorous job in the world, but sometimes we all have to do it. 
This article provides a guide to making HTML tables look good, with some specific table styling techniques highlighted. 
Debugging CSS 
: Sometimes when writing CSS you will encounter an issue where your CSS doesn’t seem to be doing what you expect. 
This article will give you guidance on how to go about debugging a CSS problem, and show you how the DevTools included in all modern browsers can help you find out what is going on. 
Organizing your CSS 
: As you start to work on larger stylesheets and big projects you will discover that maintaining a huge CSS file can be challenging. 
In this article, we will take a brief look at some best practices for writing your CSS to make it easily maintainable, and some of the solutions you will find in use by others to help improve maintainability. 
Assessments 
The following assessments will test your understanding of the CSS covered in the guides above. 
Fundamental CSS comprehension 
: This assessment tests your understanding of basic syntax, selectors, specificity, box model, and more. 
Creating fancy letterheaded paper 
: If you want to make the right impression, writing a letter on nice letterheaded paper can be a really good start. 
In this assessment, we’ll challenge you to create an online template to achieve such a look. 
A cool looking box 
: Here you’ll get some practice in using background and border styling to create an eye-catching box. 
See also 
Advanced styling effects 
: This article acts as a box of tricks, providing an introduction to some interesting advanced styling features such as box shadows, blend modes, and filters. 







{{LearnSidebar}} 
The aim of this skill test is to assess whether you understand CSS selectors. 
Note: You can try out solutions in the interactive editors below. 
However, it may be helpful to download the code and use an online tool such as CodePen, jsFiddle, or Glitch to work on the tasks. 
If you get stuck, then ask us for help — see the Assessment or further help section at the bottom of this page. 
Task 1 
In this task, use CSS to do the following things, without changing the HTML: 
Make <h1> headings blue. Give <h2> headings a blue background and white text. 
Cause text wrapped in a <span> to have a font-size of 200%. 
Your final result should look like the image below: 
Text with the CSS applied for the solution to task 1. 
{{EmbedGHLiveSample(“css-examples/learn/tasks/selectors/type.html”, ‘100%’, 700)}} 
Download the starting point for this task to work in your own editor or in an online editor. 
Task 2 
Give the element with an id of special a yellow background. Give the element with a class of alert a 1px grey border. 
Your final result should look like the image below: Text with the CSS applied for the solution to task 2. 
Try updating the live code below to recreate the finished example: 
{{EmbedGHLiveSample(“css-examples/learn/tasks/selectors/class-id.html”, ‘100%’, 800)}} 
Callout: 
Download the starting point for this task to work in your own editor or in an online editor. 
Task 3 
In this task, we want you to make the following changes without adding to the HTML: 
Your final result should look like the image below: Text with the CSS applied for the solution to task 3. 
Try updating the live code below to recreate the finished example: 
{{EmbedGHLiveSample(“css-examples/learn/tasks/selectors/pseudo.html”, ‘100%’, 800)}} 
Callout: 
Download the starting point for this task to work in your own editor or in an online editor. 
Task 4 
Try updating the live code below to recreate the finished example: 
{{EmbedGHLiveSample(“css-examples/learn/tasks/selectors/combinators.html”, ‘100%’, 800)}} 
Callout: 
Download the starting point for this task to work in your own editor or in an online editor. 
Task 5 
In this task, add CSS using attribute selectors to do the following: 
Target the <a> element with a title attribute and make the border pink (border-color: pink). 
Target the <a> element with an href attribute that contains the word contact somewhere in its value and make the border orange (border-color: orange). 
Target the <a> element with an href value starting with https and give it a green border (border-color: green). 
Four links with different color borders. 
Try updating the live code below to recreate the finished example: 
{{EmbedGHLiveSample(“css-examples/learn/tasks/selectors/attribute-links.html”, ‘100%’, 800)}} 
Callout: 
Download the starting point for this task to work in your own editor or in an online editor. 
Assessment or further help 
You can practice these examples in the Interactive Editors above. 
If you would like your work assessed or are stuck and want to ask for help: 
Put your work into an online shareable editor such as CodePen, jsFiddle, or Glitch. 
You can write the code yourself or use the starting point files linked to in the above sections. 
Write a post asking for assessment and/or help at the MDN Discourse forum Learning category. 
Your post should include: 
A descriptive title such as “Assessment wanted for selectors skill test 1”. 
Details of what you have already tried and what you would like us to do; for example, tell us if you’re stuck and need help or want an assessment. 
A link to the example you want assessed or need help with, in an online shareable editor (as mentioned in step 1 above). 
This is a good practice to get into — it’s very hard to help someone with a coding problem if you can’t see their code. 
A link to the actual task or assessment page, so we can find the question you want help with. 




{{LearnSidebar}} 
The aim of this skill test is to assess whether you understand how to style HTML tables in CSS. 
Note: You can try out solutions in the interactive editors below. However, it may be helpful to download the code and use an online tool such as CodePen, jsFiddle, or Glitch to work on the tasks. 
If you get stuck, then ask us for help — see the Assessment or further help section at the bottom of this page. 
Task 
In the lesson on styling tables we styled up a table in a rather garish manner. 
In this task, we are going to style the same table, but using some good practices for table design as outlined in the external article Web Typography: designing tables to be read not looked at. 
Our finished table will look like the image below. 
There are a number of ways that you can achieve this, but we suggest you follow similar patterns as used in the tutorial to do the following things: 
Align headings and data for columns containing numbers right. 
Align headings and data for columns containing text left. 
Remove the default spacing between the table elements borders to get the expected result. 
Stripe every odd row of the main table with the hex color #eee. 
A table with striped rows. 
{{EmbedGHLiveSample(“css-examples/learn/tasks/tables/table.html”, ‘100%’, 1000)}} 
Think of how table columns are sized by default and how we can change this behavior to size the columns according to the width of their headings. 
Assessment or further help 
You can practice these examples in the Interactive Editors above. 
If you would like your work assessed or are stuck and want to ask for help: 
Put your work into an online shareable editor such as CodePen, jsFiddle, or Glitch. 
You can write the code yourself or use the starting point files linked to in the above sections. 
Write a post asking for assessment and/or help at the MDN Discourse forum Learning category. 
Your post should include: 
A descriptive title such as “Assessment wanted for the tables skill test”. 

{{learnsidebar}} 
The aim of this skill test is to assess whether you understand backgrounds and borders of boxes in CSS. 
Note: You can try out solutions in the interactive editors below. 
However, it may be helpful to download the code and use an online tool such as CodePen, jsFiddle, or Glitch to work on the tasks. 
If you get stuck, then ask us for help — see the Assessment or further help section at the bottom of this page. 
Task 1 
In this task, we want you to add a background, border, and some simple styling to a page header: 
Give the box a 5px black solid border, with rounded corners of 10px. 
Add a background image (use the URL balloons.jpg) and size it so that it covers the box. 
Give the <h2> a semi-transparent black background color, and make the text white. 
Your final result should look like the image below: 
Images shows a box with a photograph background, rounded border and white text on a semi-transparent black background. 
Try updating the live code below to recreate the finished example: 
{{EmbedGHLiveSample(“css-examples/learn/tasks/backgrounds/backgrounds1.html”, ‘100%’, 700)}} 
Callout: 
Download the starting point for this task to work in your own editor or in an online editor. 
Task 2 
In this task, we want you to add background images, a border, and some other styling to a decorative box: 
Give the box a 5px lightblue border and round the top left corner 20px and the bottom right corner 40px. 
The heading uses the star.png image as a background image, with a single centered star on the left and a repeating pattern of stars on the right. 
Make sure that the heading text does not overlay the image, and that it is centered — you will need to use techniques learned in previous lessons to achieve this. 
Your final result should look like the image below: 
Images shows a box with a blue border rounded at the top left and bottom right corners. 
On the left of the text is a single star, on the right 3 stars. 
Try updating the live code below to recreate the finished example: 
{{EmbedGHLiveSample(“css-examples/learn/tasks/backgrounds/backgrounds2.html”, ‘100%’, 700)}} 
Callout: 
Download the starting point for this task to work in your own editor or in an online editor. 
Assessment or further help 
You can practice these examples in the Interactive Editors mentioned above. 
If you would like your work assessed or are stuck and want to ask for help: 
Put your work into an online shareable editor such as CodePen, jsFiddle, or Glitch. 
You can write the code yourself or use the starting point files linked to in the above sections. 
Write a post asking for assessment and/or help at the MDN Discourse forum Learning category. 
Your post should include: 
A descriptive title such as “Assessment wanted for backgrounds and borders skill test 1”. 
Details of what you have already tried and what you would like us to do; for example, tell us if you’re stuck and need help or want an assessment. 
A link to the example you want assessed or need help with, in an online shareable editor (as mentioned in step 1 above). 
This is a good practice to get into — it’s very hard to help someone with a coding problem if you can’t see their code. 
A link to the actual task or assessment page, so we can find the question you want help with. 





{{LearnSidebar}} {{PreviousMenu(“Learn/CSS/CSS_layout/Supporting_Older_Browsers”, “Learn/CSS/CSS_layout”)}} 
Objective: To test comprehension of CSS layout methods using Flexbox, Grid, Floating and Positioning. Starting point 
There is a website title, above a black nav bar with 5 links flush left, followed by the blog post title and post content. 
Project brief 
You have been provided with some raw HTML, basic CSS, and images — now you need to create a layout for the design. 
Your tasks 
You now need to implement your layout. The tasks you need to achieve are: 
Hints and tips 
You will not need to edit the HTML in order to achieve this layout and the techniques you should use are: Flexbox Grid Floating Positioning 
There are a few ways in which you could achieve some of these tasks, and there often isn’t a single right or wrong way to do things. Try a few different approaches and see which works best. 
Make notes as you experiment. 
Finished layout task website. The elements are laid out neatly. 
There is a website title, above a black nav bar containing 5 equally spaced links. Below the nav bar, there are two sections. On the left there is a blog post: A blog post title followed by the post content. 
A link to the actual task or assessment page, so we can find the question you want help with. 


{{LearnSidebar}} 
You will be working through several small tasks that use different elements of the material you have just covered. 
Note: You can try out solutions in the interactive editors below. 
In this task, you should create a grid into which the four child elements will auto-place. The grid should have three columns sharing the available space equally and a 20-pixel gap between the column and row tracks. 
Your final result should look like the image below: A three column grid with four items placed into it. 
Callout: 
In this task, we already have a grid defined. By editing the CSS rules for the two child elements, cause them to span over several grid tracks each. 
The second item should overlay the first as in the image below: A box with two items inside one overlaying the other. 
Try updating the live code below to recreate the finished example: 
The starting point has them displayed using auto-placement. 
{{EmbedGHLiveSample(“css-examples/learn/tasks/grid/grid3.html”, ‘100%’, 800)}} 
The gap between the column and row tracks should be 10px. You do not need to make any changes to the HTML in order to achieve this. Two rows of cards, each with an image and a set of tags. 
Assessment or further help 
A link to the example you want assessed or need help with, in an online shareable editor (as mentioned in step 1 above). This is a good practice to get into — it’s very hard to help someone with a coding problem if you can’t see their code. 
A link to the actual task or assessment page, so we can find the question you want help with. 

{{LearnSidebar}} 
Now it’s time to look at how to correctly arrange your boxes in relation to the viewport as well as to one another. 
Callout: Looking to become a front-end web developer? 
We have put together a course that includes all the essential information you need to work towards your goal. 
Prerequisites 
Before starting this module, you should already: 
Have basic familiarity with HTML, as discussed in the Introduction to HTML module. 
Be comfortable with CSS fundamentals, as discussed in Introduction to CSS. 
Understand how to style boxes. 
Note: If you are working on a computer/tablet/other device where you don’t have the ability to create your own files, you could try out (most of) the code examples in an online coding program such as JSBin or Glitch. 
Guides 
These articles will provide instruction on the fundamental layout tools and techniques available in CSS. 
Introduction to CSS layout 
: This article will recap some of the CSS layout features we’ve already touched upon in previous modules — such as different {{cssxref(“display”)}} values — and introduce some of the concepts we’ll be covering throughout this module. 
Normal flow 
: Elements on webpages lay themselves out according to normal flow - until we do something to change that. This article explains the basics of normal flow as a grounding for learning how to change it. 
Flexbox 
: Flexbox is a one-dimensional layout method for laying out items in rows or columns. 
Items flex to fill additional space and shrink to fit into smaller spaces. 
This article explains all the fundamentals. 
Grids 
: CSS Grid Layout is a two-dimensional layout system for the web. 
It lets you lay content out in rows and columns, and has many features that make building complex layouts straightforward. This article will give you all you need to know to get started with page layout, then test your grid skills before moving on. 
Floats 
: Originally for floating images inside blocks of text, the {{cssxref(“float”)}} property became one of the most commonly used tools for creating multiple column layouts on webpages. 
With the advent of Flexbox and Grid it has now returned to its original purpose, as this article explains. 
Positioning 
: Positioning allows you to take elements out of the normal document layout flow and make them behave differently, for example, by sitting on top of one another, or by always remaining in the same place inside the browser viewport. 
This article explains the different {{cssxref(“position”)}} values and how to use them. 
Multiple-column layout 
: The multiple-column layout specification gives you a method of laying content out in columns, as you might see in a newspaper. 
This article explains how to use this feature. 
Responsive design 
: As more diverse screen sizes have appeared on web-enabled devices, the concept of responsive web design (RWD) has appeared: a set of practices that allows web pages to alter their layout and appearance to suit different screen widths, resolutions, etc. 
It is an idea that changed the way we design for a multi-device web, and in this article we’ll help you understand the main techniques you need to know to master it. 
Beginner’s guide to media queries 
: The CSS Media Query gives you a way to apply CSS only when the browser and device environment matches a rule that you specify, for example, “viewport is wider than 480 pixels”. 
Media queries are a key part of responsive web design because they allow you to create different layouts depending on the size of the viewport. They can also be used to detect other features of the environment your site is running on, for example, whether the user is using a touchscreen rather than a mouse. 
In this lesson, you will first learn about the syntax used in media queries, and then you will use them in an interactive example showing how a simple design might be made responsive. 
Legacy layout methods 
: Grid systems are a very common feature used in CSS layouts. Prior to CSS Grid Layout, they tended to be implemented using floats or other layout features. 
You’d first imagine your layout as a set number of columns (e.g., 4, 6, or 12), and then you’d fit your content columns inside these imaginary columns. 
In this article, we’ll explore how these older methods work so that you understand how they were used if you work on an older project. 
Supporting older browsers 
: In this module, we recommend using Flexbox and Grid as the main layout methods for your designs. 
However, there are bound to be visitors to a site you develop in the future who use older browsers, or browsers which do not support the methods you have used. 
This will always be the case on the web — as new features are developed, different browsers will prioritize different features. 
This article explains how to use modern web techniques without excluding users of older technology. Assessments 
Fundamental layout comprehension 
: An assessment to test your knowledge of different layout methods by laying out a webpage. 
See also 
Practical positioning examples 
: This article shows how to build some real-world examples to illustrate what kinds of things you can do with positioning. CSS layout cookbook : The CSS layout cookbook aims to bring together recipes for common layout patterns, things you might need to implement in your sites. 


{{LearnSidebar}} 
{{PreviousMenuNext(“Learn/CSS/CSS_layout/Media_queries”, “Learn/CSS/CSS_layout/Supporting_Older_Browsers”, “Learn/CSS/CSS_layout”)}} 

{{learnsidebar}}{{PreviousMenuNext(“Learn/CSS/CSS_layout/Responsive_Design”, “Learn/CSS/CSS_layout/Legacy_Layout_Methods”, “Learn/CSS/CSS_layout”)}} 
The CSS Media Query gives you a way to apply CSS only when the browser and device environment matches a rule that you specify, for example “viewport is wider than 480 pixels”. 
Media queries are a key part of responsive web design, as they allow you to create different layouts depending on the size of the viewport, but they can also be used to detect other things about the environment your site is running on, for example whether the user is using a touchscreen rather than a mouse. 
In this lesson you will first learn about the syntax used in media queries, and then move on to use them in a working example showing how a simple design might be made responsive. 
Prerequisites: 
HTML basics (study Introduction to HTML), and an idea of how CSS works (study CSS first steps and CSS building blocks.) 
Objective: 
The simplest media query syntax looks like this: @media media-type and (media-feature-rule) { /* CSS rules go here */ } 



{{LearnSidebar}}{{PreviousMenuNext(“Learn/CSS/CSS_layout/Floats”, “Learn/CSS/CSS_layout/Multiple-column_Layout”, “Learn/CSS/CSS_layout”)}} 
Positioning allows you to take elements out of normal document flow and make them behave differently, for example, by sitting on top of one another or by always remaining in the same place inside the browser viewport. 
This article explains the different {{cssxref(“position”)}} values and how to use them. 
Prerequisites: 
HTML basics (study Introduction to HTML), and an idea of How CSS works (study Introduction to CSS.) 
Objective: 
To learn how CSS positioning works. 
We’d like you to do the following exercises on your local computer. 
If possible, grab a copy of 0_basic-flow.html from our GitHub repo (source code here) and use that as a starting point. 
Introducing positioning 
Positioning allows us to produce interesting results by overriding normal document flow. 
What if you want to slightly alter the position of some boxes from their default flow position to give a slightly quirky, distressed feel? 
Positioning is your tool. 
Or what if you want to create a UI element that floats over the top of other parts of the page and/or always sits in the same place inside the browser window no matter how much the page is scrolled? 
Positioning makes such layout work possible. 
There are a number of different types of positioning that you can put into effect on HTML elements. 
To make a specific type of positioning active on an element, we use the {{cssxref(“position”)}} property. 
Static positioning 
Static positioning is the default that every element gets. 
It just means “put the element into its normal position in the document flow — nothing special to see here.” 
To see this (and get your example set up for future sections) first add a class of positioned to the second {{htmlelement(“p”)}} in the HTML: 
<p class="positioned">…</p> 
Now add the following rule to the bottom of your CSS: 
.positioned { 
position: static; 
background: yellow; 
} 
If you save and refresh, you’ll see no difference at all, except for the updated background color of the 2nd paragraph. 
This is fine — as we said before, static positioning is the default behavior! 
Note: You can see the example at this point live at 1_static-positioning.html (see source code). 
Relative positioning 
Relative positioning is the first position type we’ll take a look at. 
This is very similar to static positioning, except that once the positioned element has taken its place in the normal flow, you can then modify its final position, including making it overlap other elements on the page. 
Go ahead and update the position declaration in your code: 
position: relative; 
If you save and refresh at this stage, you won’t see a change in the result at all. 
So how do you modify the element’s position? 
You need to use the {{cssxref(“top”)}}, {{cssxref(“bottom”)}}, {{cssxref(“left”)}}, and {{cssxref(“right”)}} properties, which we’ll explain in the next section. 
Introducing top, bottom, left, and right 
{{cssxref(“top”)}}, {{cssxref(“bottom”)}}, {{cssxref(“left”)}}, and {{cssxref(“right”)}} are used alongside {{cssxref(“position”)}} to specify exactly where to move the positioned element to. 
To try this out, add the following declarations to the .positioned rule in your CSS: 
top: 30px; 
left: 30px; 
Note: The values of these properties can take any units you’d reasonably expect: pixels, mm, rems, %, etc. 
If you now save and refresh, you’ll get a result something like this: 
```html hidden 
Relative positioning 
I am a basic block level element. 
My adjacent block level elements sit on new lines below me. 
By default we span 100% of the width of our parent element, and we are as tall as our child content. 
Our total width and height is our content + padding + border width/height. 
We are separated by our margins. 
Because of margin collapsing, we are separated by the width of one of our margins, not both. 
Inline elements like this one and this one sit on the same line as one another, and adjacent text nodes, if there is space on the same line. 
Overflowing inline elements wrap onto a new line if possible — like this one containing text, or just go on to a new line if not, much like this image will do: 
```css hidden 
body { 
width: 500px; 
margin: 0 auto; 
} 
p { 
background: aqua; 
border: 3px solid blue; 
padding: 10px; 
margin: 10px; 
} 
span { 
background: red; 
border: 1px solid black; 
} 
.positioned { 
position: relative; 
background: yellow; 
top: 30px; 
left: 30px; 
} 
{{ EmbedLiveSample(‘Introducing_top_bottom_left_and_right’, ‘100%’, 500) }} 
Cool, huh? 
Ok, so this probably wasn’t what you were expecting. Why has it moved to the bottom and to the right if we specified top and left? 
This may seem counterintuitive. You need to think of it as if there’s an invisible force that pushes the specified side of the positioned box, moving it in the opposite direction. 
So, for example, if you specify top: 30px;, it’s as if a force will push the top of the box, causing it to move downwards by 30px. 
Note: You can see the example at this point live at 2_relative-positioning.html (see source code). 
Absolute positioning 
Absolute positioning brings very different results. 
Let’s try changing the position declaration in your code as follows: 
position: absolute; 
If you now save and refresh, you should see something like so: 
```html hidden 
Absolute positioning 
I am a basic block level element. 
My adjacent block level elements sit on new lines below me. 
By default we span 100% of the width of our parent element, and we are as tall as our child content. 
Our total width and height is our content + padding + border width/height. 
We are separated by our margins. 
Because of margin collapsing, we are separated by the width of one of our margins, not both. 
inline elements like this one and this one sit on the same line as one another, and adjacent text nodes, if there is space on the same line. 
Overflowing inline elements wrap onto a new line if possible — like this one containing text, or just go on to a new line if not, much like this image will do: 
```css hidden 
body { 
width: 500px; 
margin: 0 auto; 
} 
p { 
background: aqua; 
border: 3px solid blue; 
padding: 10px; 
margin: 10px; 
} 
span { 
background: red; 
border: 1px solid black; 
} 
.positioned { 
position: absolute; 
background: yellow; 
top: 30px; 
left: 30px; 
} 
{{ EmbedLiveSample(‘Setting_position_absolute’, ‘100%’, 450) }} 
First of all, note that the gap where the positioned element should be in the document flow is no longer there — the first and third elements have closed together like it no longer exists! 
Well, in a way, this is true. 
An absolutely positioned element no longer exists in the normal document flow. 
Instead, it sits on its own layer separate from everything else. 
This is very useful: it means that we can create isolated UI features that don’t interfere with the layout of other elements on the page. 
For example, popup information boxes, control menus, rollover panels, UI features that can be dragged and dropped anywhere on the page, and so on. 
Second, notice that the position of the element has changed. This is because {{cssxref(“top”)}}, {{cssxref(“bottom”)}}, {{cssxref(“left”)}}, and {{cssxref(“right”)}} behave in a different way with absolute positioning. 
So in this case, we are saying that the absolutely positioned element should sit 30px from the top of the “containing element” and 30px from the left. 
(In this case, the “containing element” is the initial containing block. See the section below for more information) 
Note: You can use {{cssxref(“top”)}}, {{cssxref(“bottom”)}}, {{cssxref(“left”)}}, and {{cssxref(“right”)}} to resize elements if you need to. 
Try setting top: 0; bottom: 0; left: 0; right: 0; and margin: 0; on your positioned elements and see what happens! 
Put it back again afterwards… 
Note: Yes, margins still affect positioned elements. 
Margin collapsing doesn’t, however. 
Note: You can see the example at this point live at 3_absolute-positioning.html (see source code). 
Positioning contexts 
Which element is the “containing element” of an absolutely positioned element? 
This is very much dependent on the position property of the ancestors of the positioned element (See Identifying the containing block). 
If no ancestor elements have their position property explicitly defined, then by default all ancestor elements will have a static position. 
The result of this is the absolutely positioned element will be contained in the initial containing block. 
The initial containing block has the dimensions of the viewport and is also the block that contains the {{htmlelement(“html”)}} element. 
In other words, the absolutely positioned element will be displayed outside of the {{htmlelement(“html”)}} element and be positioned relative to the initial viewport. 
The positioned element is nested inside the {{htmlelement(“body”)}} in the HTML source, but in the final layout it’s 30px away from the top and the left edges of the page. 
We can change the positioning context, that is, which element the absolutely positioned element is positioned relative to. 
This is done by setting positioning on one of the element’s ancestors: to one of the elements it’s nested inside of (you can’t position it relative to an element it’s not nested inside of). 
To see this, add the following declaration to your body rule: 
position: relative; 
This should give the following result: 
```html hidden 
Positioning context 
I am a basic block level element. 
My adjacent block level elements sit on new lines below me. 
Now I’m absolutely positioned relative to the <body> element, not the <html> element! 
We are separated by our margins. 
Because of margin collapsing, we are separated by the width of one of our margins, not both. 
inline elements like this one and this one sit on the same line as one another, and adjacent text nodes, if there is space on the same line. 
Overflowing inline elements wrap onto a new line if possible — like this one containing text, or just go on to a new line if not, much like this image will do: 
```css hidden 
body { 
width: 500px; 
margin: 0 auto; 
position: relative; 
} 
p { 
background: aqua; 
border: 3px solid blue; 
padding: 10px; 
margin: 10px; 
} 
span { 
background: red; 
border: 1px solid black; 
} 
.positioned { 
position: absolute; 
background: yellow; 
top: 30px; 
left: 30px; 
} 
{{ EmbedLiveSample(‘Positioning_contexts’, ‘100%’, 420) }} 
The positioned element now sits relative to the {{htmlelement(“body”)}} element. 
Note: You can see the example at this point live at 4_positioning-context.html (see source code). 
Introducing z-index 
All this absolute positioning is good fun, but there’s another feature we haven’t considered yet. When elements start to overlap, what determines which elements appear over others and which elements appear under others? 
In the example we’ve seen so far, we only have one positioned element in the positioning context, and it appears on the top since positioned elements win over non-positioned elements. 
What about when we have more than one? 
Try adding the following to your CSS to make the first paragraph absolutely positioned too: 
p:nth-of-type(1) { 
position: absolute; 
background: lime; 
top: 10px; 
right: 30px; 
} 
At this point you’ll see the first paragraph colored lime, moved out of the document flow, and positioned a bit above from where it originally was. 
It’s also stacked below the original .positioned paragraph where the two overlap. 
This is because the .positioned paragraph is the second paragraph in the source order, and positioned elements later in the source order win over positioned elements earlier in the source order. 
Can you change the stacking order? 
Yes, you can, by using the {{cssxref(“z-index”)}} property. “z-index” is a reference to the z-axis. 
You may recall from previous points in the course where we discussed web pages using horizontal (x-axis) and vertical (y-axis) coordinates to work out positioning for things like background images and drop shadow offsets. 
For languages that run left to right, (0,0) is at the top left of the page (or element), and the x- and y-axes run across to the right and down the page. 
Web pages also have a z-axis: an imaginary line that runs from the surface of your screen towards your face (or whatever else you like to have in front of the screen). {{cssxref(“z-index”)}} values affect where positioned elements sit on that axis; positive values move them higher up the stack, negative values move them lower down the stack. 
By default, positioned elements all have a z-index of auto, which is effectively 0. 
To change the stacking order, try adding the following declaration to your p:nth-of-type(1) rule: 
z-index: 1; 
You should now see the lime paragraph on top: 
```html hidden 
z-index 
I am a basic block level element. 
My adjacent block level elements sit on new lines below me. 
Now I’m absolutely positioned relative to the <body> element, not the <html> element! 
We are separated by our margins. 
Because of margin collapsing, we are separated by the width of one of our margins, not both. 
inline elements like this one and this one sit on the same line as one another, and adjacent text nodes, if there is space on the same line. 
Overflowing inline elements wrap onto a new line if possible — like this one containing text, or just go on to a new line if not, much like this image will do: 
```css hidden 
body { 
width: 500px; 
margin: 0 auto; 
position: relative; 
} 
p { 
background: aqua; 
border: 3px solid blue; 
padding: 10px; 
margin: 10px; 
} 
span { 
background: red; 
border: 1px solid black; 
} 
.positioned { 
position: absolute; 
background: yellow; 
top: 30px; 
left: 30px; 
} 
p:nth-of-type(1) { 
position: absolute; 
background: lime; 
top: 10px; 
right: 30px; 
z-index: 1; 
} 
{{ EmbedLiveSample(‘Introducing_z-index’, ‘100%’, 400) }} 
Note that z-index only accepts unitless index values; you can’t specify that you want one element to be 23 pixels up the Z-axis — it doesn’t work like that. 
Higher values will go above lower values and it’s up to you what values you use. 
Using values of 2 or 3 would give the same effect as values of 300 or 40000. 
Note: You can see an example for this live at 5_z-index.html (see source code). 
Fixed positioning 
Let’s now look at fixed positioning. 
This works in exactly the same way as absolute positioning, with one key difference: whereas absolute positioning fixes an element in place relative to its nearest positioned ancestor (the initial containing block if there isn’t one), fixed positioning usually fixes an element in place relative to the visible portion of the viewport. 
(An exception to this occurs if one of the element’s ancestors is a fixed containing block because its transform property has a value other than none.) 
This means that you can create useful UI items that are fixed in place, like persistent navigation menus that are always visible no matter how much the page scrolls. 
Let’s put together a simple example to show what we mean. 
First of all, delete the existing p:nth-of-type(1) and .positioned rules from your CSS. 
Now update the body rule to remove the position: relative; declaration and add a fixed height, like so: 
body { 
width: 500px; 
height: 1400px; 
margin: 0 auto; 
} 
Now we’re going to give the {{htmlelement(“Heading_Elements”, “h1”)}} element position: fixed; and have it sit at the top of the viewport. 
Add the following rule to your CSS: 
h1 { 
position: fixed; 
top: 0; 
width: 500px; 
margin-top: 0; 
background: white; 
padding: 10px; 
} 
The top: 0; is required to make it stick to the top of the screen. 
We give the heading the same width as the content column and then a white background and some padding and margin so the content won’t be visible underneath it. 
If you save and refresh, you’ll see a fun little effect of the heading staying fixed — the content appears to scroll up and disappear underneath it. 
But notice how some of the content is initially clipped under the heading. 
This is because the positioned heading no longer appears in the document flow, so the rest of the content moves up to the top. 
We could improve this by moving the paragraphs all down a bit. We can do this by setting some top margin on the first paragraph. 
Add this now: 
p:nth-of-type(1) { 
margin-top: 60px; 
} 
You should now see the finished example: 
```html hidden 
Fixed positioning 
I am a basic block level element. 
My adjacent block level elements sit on new lines below me. 
I’m not positioned any more. 
We are separated by our margins. 
Because of margin collapsing, we are separated by the width of one of our margins, not both. 
Inline elements like this one and this one sit on the same line as one another, and adjacent text nodes, if there is space on the same line. 
Overflowing inline elements wrap onto a new line if possible — like this one containing text, or just go on to a new line if not, much like this image will do: 
```css hidden 
body { 
width: 500px; 
height: 1400px; 
margin: 0 auto; 
} 
p { 
background: aqua; 
border: 3px solid blue; 
padding: 10px; 
margin: 10px; 
} 
span { 
background: red; 
border: 1px solid black; 
} 
h1 { 
position: fixed; 
top: 0px; 
width: 500px; 
background: white; 
padding: 10px; 
} 
p:nth-of-type(1) { 
margin-top: 60px; 
} 
{{ EmbedLiveSample(‘Fixed_positioning’, ‘100%’, 400) }} 
Note: You can see an example for this live at 6_fixed-positioning.html (see source code). 
Sticky positioning 
There is another position value available called position: sticky, which is somewhat newer than the others. 
This is basically a hybrid between relative and fixed position. It allows a positioned element to act like it’s relatively positioned until it’s scrolled to a certain threshold (e.g., 10px from the top of the viewport), after which it becomes fixed. Basic example 
Sticky positioning can be used, for example, to cause a navigation bar to scroll with the page until a certain point and then stick to the top of the page. 
```html hidden 
Sticky positioning 
Lorem ipsum dolor sit amet, consectetur adipiscing elit. 
Nulla luctus aliquam dolor, eu lacinia lorem placerat vulputate. 
Duis felis orci, pulvinar id metus ut, rutrum luctus orci. 
Cras porttitor imperdiet nunc, at ultricies tellus laoreet sit amet. 
Sed auctor cursus massa at porta. 
Integer ligula ipsum, tristique sit amet orci vel, viverra egestas ligula. 
Curabitur vehicula tellus neque, ac ornare ex malesuada et. 
In vitae convallis lacus. 
Aliquam erat volutpat. 
Suspendisse ac imperdiet turpis. 
Aenean finibus sollicitudin eros pharetra congue. 
Duis ornare egestas augue ut luctus. 
Proin blandit quam nec lacus varius commodo et a urna. 
Ut id ornare felis, eget fermentum sapien. 
Sticky 
Nam vulputate diam nec tempor bibendum. 
Donec luctus augue eget malesuada ultrices. 
Phasellus turpis est, posuere sit amet dapibus ut, facilisis sed est. 
Nam id risus quis ante semper consectetur eget aliquam lorem. 
Vivamus tristique elit dolor, sed pretium metus suscipit vel. 
Mauris ultricies lectus sed lobortis finibus. 
Vivamus eu urna eget velit cursus viverra quis vestibulum sem. 
Aliquam tincidunt eget purus in interdum. 
Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. 
Lorem ipsum dolor sit amet, consectetur adipiscing elit. 
Nulla luctus aliquam dolor, eu lacinia lorem placerat vulputate. 
Duis felis orci, pulvinar id metus ut, rutrum luctus orci. 
Cras porttitor imperdiet nunc, at ultricies tellus laoreet sit amet. 
Sed auctor cursus massa at porta. 
Integer ligula ipsum, tristique sit amet orci vel, viverra egestas ligula. 
Curabitur vehicula tellus neque, ac ornare ex malesuada et. 
In vitae convallis lacus. 
Aliquam erat volutpat. 
Suspendisse ac imperdiet turpis. 
Aenean finibus sollicitudin eros pharetra congue. 
Duis ornare egestas augue ut luctus. 
Proin blandit quam nec lacus varius commodo et a urna. 
Ut id ornare felis, eget fermentum sapien. 
```css hidden 
body { 
width: 500px; 
margin: 0 auto; 
} 
.positioned { 
background: rgba(255, 84, 104, 0.3); 
border: 2px solid rgb(255, 84, 104); 
padding: 10px; 
margin: 10px; 
border-radius: 5px; 
} 
.positioned { 
position: sticky; 
top: 30px; 
left: 30px; 
} 
{{ EmbedLiveSample(‘Basic_example’, ‘100%’, 200) }} 
Scrolling index 
An interesting and common use of position: sticky is to create a scrolling index page where different headings stick to the top of the page as they reach it. 
The markup for such an example might look like so: 
<h1>Sticky positioning</h1> 
<dl> 
<dt>A</dt> 
<dd>Apple</dd> 
<dd>Ant</dd> 
<dd>Altimeter</dd> 
<dd>Airplane</dd> 
<dt>B</dt> 
<dd>Bird</dd> 
<dd>Buzzard</dd> 
<dd>Bee</dd> 
<dd>Banana</dd> 
<dd>Beanstalk</dd> 
<dt>C</dt> 
<dd>Calculator</dd> 
<dd>Cane</dd> 
<dd>Camera</dd> 
<dd>Camel</dd> 
<dt>D</dt> 
<dd>Duck</dd> 
<dd>Dime</dd> 
<dd>Dipstick</dd> 
<dd>Drone</dd> 
<dt>E</dt> 
<dd>Egg</dd> 
<dd>Elephant</dd> 
<dd>Egret</dd> 
</dl> 
The CSS might look as follows. 
In normal flow the {{htmlelement(“dt”)}} elements will scroll with the content. 
When we add position: sticky to the {{htmlelement(“dt”)}} element, along with a {{cssxref(“top”)}} value of 0, supporting browsers will stick the headings to the top of the viewport as they reach that position. 
Each subsequent header will then replace the previous one as it scrolls up to that position. 
dt { 
background-color: black; 
color: white; 
padding: 10px; 
position: sticky; 
top: 0; 
left: 0; 
margin: 1em 0; 
} 
css hidden body { width: 500px; height: 1400px; margin: 0 auto; } 
```html hidden 
Sticky positioning 
A 
Apple 
Ant 
Altimeter 
Airplane 
B 
Bird 
Buzzard 
Bee 
Banana 
Beanstalk 
C 
Calculator 
Cane 
Camera 
Camel 
D 
Duck 
Dime 
Dipstick 
Drone 
E 
Egg 
Elephant 
Egret 
``` 
{{ EmbedLiveSample(‘Scrolling_index’, ‘100%’, 200) }} 
Note: You can see this example live at 7_sticky-positioning.html (see source code). 
Test your skills! 
You’ve reached the end of this article, but can you remember the most important information? 
You can find some further tests to verify that you’ve retained this information before you move on — see Test your skills: Positioning. 
Summary 
I’m sure you had fun playing with basic positioning. While it’s not an ideal method to use for entire layouts, there are many specific objectives it’s suited for. 
See also The {{cssxref(“position”)}} property reference. Practical positioning examples, for some more useful ideas. 
{{PreviousMenuNext(“Learn/CSS/CSS_layout/Floats”, “Learn/CSS/CSS_layout/Multiple-column_Layout”, “Learn/CSS/CSS_layout”)}} 

{{LearnSidebar}} 
The aim of this skill test is to assess whether you understand positioning in CSS using the CSS {{CSSxRef(“position”)}} property and values. You will be working through two small tasks that use different elements of the material you have just covered. 
Note: You can try out solutions in the interactive editors below. However, it may be helpful to download the code and use an online tool such as CodePen, jsFiddle, or Glitch to work on the tasks. 
If you get stuck, then ask us for help — see the Assessment or further help section at the bottom of this page. 
Task 1 
In this task, we want you to position the item with a class of target to the top and right of the container, which has the 5px grey border. 
The green box is at the top right of a container with a grey border. 
Try updating the live code below to recreate the finished example: 
{{EmbedGHLiveSample(“css-examples/learn/tasks/position/position1.html”, ‘100%’, 1000)}} 
Additional question: As an extra challenge, can you change the target to display underneath the text? 
Download the starting point for this task to work in your own editor or in an online editor. 
Task 2 
In this task, if you scroll the box in the example below, the sidebar scrolls with the content. 
Change it so that the sidebar stays in place and only the content scrolls. 
The content is scrolled but the sidebar has stayed in place. 
Try updating the live code below to recreate the finished example: 
{{EmbedGHLiveSample(“css-examples/learn/tasks/position/position2.html”, ‘100%’, 1300)}} 
Download the starting point for this task to work in your own editor or in an online editor. 
Assessment or further help 
You can practice these examples in the Interactive Editors above. 
If you would like your work assessed or are stuck and want to ask for help: 
Put your work into an online shareable editor such as CodePen, jsFiddle, or Glitch. 
You can write the code yourself or use the starting point files linked to in the above sections. 
Write a post asking for assessment and/or help at the MDN Discourse forum Learning category. 
Your post should include: 
A descriptive title such as “Assessment wanted for positioning skill test 1”. 

{{LearnSidebar}} 
This article shows how to build some real-world examples to illustrate what kinds of things you can do with positioning. 
Prerequisites: 
HTML basics (study Introduction to HTML), and an idea of How CSS works (study Introduction to CSS.) 
Objective: 
To get an idea of the practicalities of positioning 
A tabbed info-box 
The first example we’ll look at is a classic tabbed info box — a very common feature used when you want to pack a lot of information into a small area. 
This includes information-heavy apps like strategy/war games, mobile versions of websites where the screen is narrow and space is limited, and compact information boxes where you might want to make lots of information available without having it fill the whole UI. 
Our simple example will look like this once we are finished: Tab 1 is selected. 
Note: You can see the finished example running live at info-box.html (source code). 
Check it out to get an idea of what you will be building in this section of the article. 
You might be thinking “why not just create the separate tabs as separate webpages, and just have the tabs clicking through to the separate pages to create the effect?” 
This code would be simpler, yes, but then each separate “page” view would actually be a newly-loaded webpage, which would make it harder to save information across views, and integrate this feature into a larger UI design. 
In addition, so-called “single page apps” are becoming very popular — especially for mobile web UIs — because having everything served as a single file cuts down on the number of HTTP requests required to view all the content, thereby improving performance. 
Note: Some web developers take things even further, only having one page of information loaded at once, and dynamically changing the information shown using a JavaScript feature such as XMLHttpRequest. 
At this point in your learning however we want to keep things as simple as possible. 
There is some JavaScript later on, but only a tiny bit. 
To start with, we’d like you to make a local copy of the starting HTML file — info-box-start.html. 
Save this somewhere sensible on your local computer, and open it up in your text editor. 
Let’s look at the HTML contained within the body: 
<section class="info-box"> 
<ul> 
<li><a href="#" class="active-tab">Tab 1</a></li> 
<li><a href="#">Tab 2</a></li> 
<li><a href="#">Tab 3</a></li> 
</ul> 
<div class="panels"> 
<article class="active-panel"> 
<h2>The first tab</h2> 
<p> 
Lorem ipsum dolor sit amet, consectetur adipiscing elit. 
Pellentesque 
turpis nibh, porttitor nec venenatis eu, pulvinar in augue. 
Vestibulum 
et orci scelerisque, vulputate tellus quis, lobortis dui. 
Vivamus varius 
libero at ipsum mattis efficitur ut nec nisl. 
Nullam eget tincidunt 
metus. 
Donec ultrices, urna maximus consequat aliquet, dui neque 
eleifend lorem, a auctor libero turpis at sem. 
Aliquam ut porttitor 
urna. 
Nulla facilisi. 
</p> 
</article> 
<article> 
<h2>The second tab</h2> 
<p> 
This tab hasn't got any Lorem Ipsum in it. 
But the content isn't very 
exciting all the same. 
</p> 
</article> 
<article> 
<h2>The third tab</h2> 
<p> 
Lorem ipsum dolor sit amet, consectetur adipiscing elit. 
Pellentesque 
turpis nibh, porttitor nec venenatis eu, pulvinar in augue. 
And now an 
ordered list: how exciting! 


{{LearnSidebar}} 
{{PreviousMenuNext(“Learn/CSS/CSS_layout/Legacy_Layout_methods”, “Learn/CSS/CSS_layout/Fundamental_Layout_Comprehension”, “Learn/CSS/CSS_layout”)}} 
There will be visitors to your site who use older browsers, or browsers which may not support the features you have used. 
This will always be the case on the web — as new features are developed, different browsers will prioritize different things. 
This article explains how to use modern web techniques without locking out users of older technology. Prerequisites: 
HTML basics (study Introduction to HTML), and an idea of how CSS works (study Introduction to CSS and Styling boxes.) 
Objective: 
Before deciding on the approach to take, find out the number of visitors coming to your site using older browsers. 
Browser compatibility table. 
You can view usage statistics by location — useful if you work on a site that has users mostly for a specific area of the world. 




{{LearnSidebar}} 
CSS (Cascading Style Sheets) is used to style and lay out web pages — for example, to alter the font, color, size, and spacing of your content, split it into multiple columns, or add animations and other decorative features. 
This module provides a gentle beginning to your path towards CSS mastery with the basics of how it works, what the syntax looks like, and how you can start using it to add styling to HTML. 
Callout: Looking to become a front-end web developer? 
We have put together a course that includes all the essential information you need to work towards your goal. 
Get started 
Prerequisites 
Before starting this module, you should have: 

{{LearnSidebar}}{{PreviousMenu(“Learn/CSS/First_steps/How_CSS_works”, “Learn/CSS/First_steps”)}} 
With the things you have learned in the last few lessons you should find that you can format simple text documents using CSS to add your own style to them. 
This assessment gives you a chance to do that. 
Prerequisites: 
Before attempting this assessment you should have already worked through all the articles in this module, and also have an understanding of HTML basics (study Introduction to HTML). 
Objective: 
To have a play with some CSS and test your new-found knowledge. 
You can work in the live editor below, or you can download the starting point file to work with in your own editor. 
This is a single page containing both the HTML and the starting point CSS (in the head of the document). 
If you prefer you could move this CSS to a separate file and link to it when you create the example on your local computer. 
Alternatively use an online tool such as CodePen, jsFiddle, or Glitch to work on the tasks. 
Note: If you get stuck, then ask us for help — see the Assessment or further help section at the bottom of this page. 
Project brief 
The following live example shows a biography, which has been styled using CSS. 
The CSS properties that are used are as follows — each one links to its property page on MDN, which will give you more examples of its use. 
{{cssxref(“font-family”)}} 
{{cssxref(“color”)}} 
{{cssxref(“border-bottom”)}} 
{{cssxref(“font-weight”)}} 
{{cssxref(“font-size”)}} 
{{cssxref(“font-style”)}} 
{{cssxref(“text-decoration”)}} 
In the interactive editor you will find some CSS already in place. 
This selects parts of the document using element selectors, classes, and pseudo-classes. 
Make the following changes to this CSS: 
Make the level one heading pink, using the CSS color keyword hotpink. 
Give the heading a 10px dotted {{cssxref(“border-bottom”)}} which uses the CSS color keyword purple. 
Make the level 2 heading italic. 
Give the ul used for the contact details a {{cssxref(“background-color”)}} of #eeeeee, and a 5px solid purple {{cssxref(“border”)}}. 
Use some {{cssxref(“padding”)}} to push the content away from the border. 
Make the links green on hover. Hints and tips 
Use the W3C CSS Validator to catch unintended mistakes in your CSS — mistakes you might have otherwise missed — so that you can fix them. 
Afterwards try looking up some properties not mentioned on this page in the MDN CSS reference and get adventurous! 
Remember that there is no wrong answer here — at this stage in your learning you can afford to have a bit of fun. Example 
You should end up with something like this image. Screenshot of how the example should look after completing the assessment. 
{{EmbedGHLiveSample(“css-examples/learn/getting-started/biog.html”, ‘100%’, 1600)}} 
Assessment or further help 
If you would like your work assessed or are stuck and want to ask for help: 
Put your work into an online shareable editor such as CodePen, jsFiddle, or Glitch. 
Write a post asking for assessment and/or help at the MDN Discourse forum Learning category. 
Your post should include: 
A descriptive title such as “Assessment wanted for Styling a biography page”. 
Details of what you have already tried and what you would like us to do; for example, tell us if you’re stuck and need help or want an assessment. 
A link to the example you want assessed or need help with, in an online shareable editor (as mentioned in step 1 above). 
This is a good practice to get into — it’s very hard to help someone with a coding problem if you can’t see their code. 
A link to the actual task or assessment page, so we can find the question you want help with. 
{{PreviousMenu(“Learn/CSS/First_steps/How_CSS_works”, “Learn/CSS/First_steps”)}} 


{{LearnSidebar}} 
In this article, you’ll find some frequently-asked questions (FAQs) about CSS, along with answers that may help you on your quest to become a web developer. 
Why doesn’t my CSS, which is valid, render correctly? 
Browsers use the DOCTYPE declaration to choose whether to show the document using a mode that is more compatible with Web standards or with old browser bugs. 
Using a correct and modern DOCTYPE declaration at the start of your HTML will improve browser standards compliance. 
Modern browsers have two main rendering modes: 
Quirks Mode: also called backwards-compatibility mode, allows legacy webpages to be rendered as their authors intended, following the non-standard rendering rules used by older browsers. 
Documents with an incomplete, incorrect, or missing DOCTYPE declaration or a known DOCTYPE declaration in common use before 2001 will be rendered in Quirks Mode. 
Standards Mode: the browser attempts to follow the W3C standards strictly. 
New HTML pages are expected to be designed for standards-compliant browsers, and as a result, pages with a modern DOCTYPE declaration will be rendered with Standards Mode. 
Gecko-based browsers have a third limited quirks mode that has only a few minor quirks. 
The standard DOCTYPE declaration that will trigger standards mode is: 
<! 
doctype html> 
When at all possible, you should just use the above doctype. 
There are other valid legacy doctypes that will trigger Standards or Almost Standards mode: 
<! 
DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> 
<! 
DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> 
<! 
DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 
<! 
DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"> 
Why doesn’t my CSS, which is valid, render at all? 
Here are some possible causes: 
You’ve got the path to CSS file wrong. 
To be applied, a CSS stylesheet must be served with a text/css MIME type. 
If the Web server doesn’t serve it with this type, it won’t be applied. 
What is the difference between id and class? 
HTML elements can have an id and/or class attribute. 
The id attribute assigns a name to the element it is applied to, and for valid markup, there can be only one element with that name. 
The class attribute assigns a class name to the element, and that name can be used on many elements within the page. 
CSS allows you to apply styles to particular id and/or class names. 
Use a class-specific style when you want to apply the styling rules to many blocks and elements within the page, or when you currently only have element to style with that style, but you might want to add more later. 
Use an id-specific style when you need to restrict the applied styling rules to one specific block or element. 
This style will only be used by the element with that particular id. 
It is generally recommended to use classes as much as possible, and to use ids only when absolutely necessary for specific uses (like to connect label and form elements or for styling elements that must be semantically unique): 
Using classes makes your styling extensible — even if you only have one element to style with a particular ruleset now, you might want to add more later. 
Classes allow you to style multiple elements, therefore they can lead to shorter stylesheets, rather than having to write out the same styling information in multiple rules that use id selectors. 
Shorter stylesheets are more performant. 
Class selectors have lower specificity than id selectors, so are easier to override if needed. 
Note: See Selectors for more information. 
How do I restore the default value of a property? 
Initially CSS didn’t provide a “default” keyword and the only way to restore the default value of a property is to explicitly re-declare that property. 
For example: 
/* Heading default color is black */ 
h1 { 
color: red; 
} 
h1 { 
color: black; 
} 
This has changed with CSS 2; the keyword initial is now a valid value for a CSS property. 
It resets it to its default value, which is defined in the CSS specification of the given property. 
/* Heading default color is black */ 
h1 { 
color: red; 
} 
h1 { 
color: initial; 
} 
How do I derive one style from another? 
CSS does not exactly allow one style to be defined in terms of another. 
However, assigning multiple classes to a single element can provide the same effect, and CSS Variables now provide a way to define style information in one place that can be reused in multiple places. 
How do I assign multiple classes to an element? 
HTML elements can be assigned multiple classes by listing the classes in the class attribute, with a blank space to separate them. 
<style> 
.news { 
background: black; 
color: white; 
} 
.today { 
font-weight: bold; 
} 
</style> 
<div class="news today">Content of today's news goes here.</div> 
If the same property is declared in both rules, the conflict is resolved first through specificity, then according to the order of the CSS declarations. 
The order of classes in the class attribute is not relevant. 
Why don’t my style rules work properly? 
Style rules that are syntactically correct may not apply in certain situations. 
You can use Rules view of CSS Pane of the Inspector to debug problems of this kind, but the most frequent instances of ignored style rules are listed below. 
HTML elements hierarchy 
The way CSS styles are applied to HTML elements depends also on the elements’ hierarchy. 
It is important to remember that a rule applied to a descendant overrides the style of the parent, in spite of any specificity or priority of CSS rules. 
.news { 
color: black; 
} 
.corpName { 
font-weight: bold; 
color: red; 
} 
<!-- news item text is black, but corporate name is red and in bold --> 
<div class="news"> 
(Reuters) <span class="corpName">General Electric</span> (GE.NYS) announced on 
Thursday… 
</div> 
In case of complex HTML hierarchies, if a rule seems to be ignored, check if the element is inside another element with a different style. 
Explicitly re-defined style rule 
In CSS stylesheets, order is important. 
If you define a rule and then you re-define the same rule, the last definition is used. 
#stockTicker { 
font-weight: bold; 
} 
.stockSymbol { 
color: red; 
} 
/* other rules */ 
/* other rules */ 
/* other rules */ 
.stockSymbol { 
font-weight: normal; 
} 
<!-- most text is in bold, except "GE", which is red and not bold --> 
<div id="stockTicker">NYS: <span class="stockSymbol">GE</span> +1.0…</div> 
To avoid this kind of error, try to define rules only once for a certain selector, and group all rules belonging to that selector. 
Use of a shorthand property 
Using shorthand properties for defining style rules is good because it uses a very compact syntax. 
Using shorthand with only some attributes is possible and correct, but it must be remembered that undeclared attributes are automatically reset to their default values. This means that a previous rule for a single attribute could be implicitly overridden. 
#stockTicker { 
font-size: 12px; 
font-family: Verdana; 
font-weight: bold; 
} 
.stockSymbol { 
font: 14px Arial; 
color: red; 
} 
<div id="stockTicker">NYS: <span class="stockSymbol">GE</span> +1.0…</div> 
In the previous example the problem occurred on rules belonging to different elements, but it could happen also for the same element, because rule order is important. 
#stockTicker { 
font-weight: bold; 
font: 12px Verdana; /* font-weight is now set to normal */ 
} 
Use of the * selector 
The * wildcard selector refers to any element, and it has to be used with particular care. 
body * { 
font-weight: normal; 
} 
#stockTicker { 
font: 12px Verdana; 
} 
.corpName { 
font-weight: bold; 
} 
.stockUp { 
color: red; 
} 
<div id="section"> 
NYS: <span class="corpName"><span class="stockUp">GE</span></span> +1.0… 
</div> 
In this example the body * selector applies the rule to all elements inside body, at any hierarchy level, including the .stockUp class. 
So font-weight: bold; applied to the .corpName class is overridden by font-weight: normal; applied to all elements in the body. 
The use of the * selector should be minimized as it is a slow selector, especially when not used as the first element of a selector. 
Specificity in CSS 
When multiple rules apply to a certain element, the rule chosen depends on its style specificity. 
Inline style (in HTML style attributes) has the highest specificity and will override any selectors, followed by ID selectors, then class selectors, and eventually element selectors. 
The text color of the below {{htmlelement(“div”)}} will therefore be red. 
div { 
color: black; 
} 
#orange { 
color: orange; 
} 
.green { 
color: green; 
} 
<div id="orange" class="green" style="color: red;">This is red</div> 
The rules are more complicated when the selector has multiple parts. 
A more detailed explanation about how selector specificity is calculated can be found in the CSS specificity documentation. 
What do the -moz-*, -ms-*, -webkit-*, -o-* and -khtml-* properties do? 
These properties, called prefixed properties, are extensions to the CSS standard. 
They were once used to allow the use of experimental and non-standard features in browsers without polluting the regular namespace, preventing future incompatibilities to arise when the standard is extended. 
The use of such properties on production websites is not recommended — they have already created a huge web compatibility mess. 
For example, many developers only use the -webkit- prefixed version of a property when the non-prefixed version is fully supported across all browsers. This means a design relying on that property would not work in non-webkit-based browsers, when it could. 
This became a problem great enough that other browsers were pushed to implement -webkit- prefixed aliases to improve web compatibility, as specified in the Compatibility Living Standard. 
Browsers no longer use CSS prefixes when implementing new experimental features. Rather, they test new features behind configurable experimental flags or only on Nightly browser versions or similar. 
If you are required to use prefixes in your work, write the prefixed versions first followed by the non-prefixed standard version. 
This way the standard version will automatically override the prefixed versions when supported. 
For example: 
-webkit-text-stroke: 4px navy; 
text-stroke: 4px navy; 
Note: For more information on dealing with prefixed properties, see Handling common HTML and CSS problems — Handling CSS prefixes from our Cross-browser testing module. 
Note: See the Mozilla CSS Extensions and WebKit CSS Extensions for lists of browser-prefixed CSS properties. 
How does z-index relate to positioning? 
The z-index property specifies the stack order of elements. 
An element with a higher z-index/stack order is always rendered in front of an element with a lower z-index/stack order on the screen. 
Z-index will only work on elements that have a specified position (position:absolute, position:relative, or position:fixed). 
Note: For more information, see our Positioning learning article, and in particular the Introducing z-index section. 

{{LearnSidebar}} 
This article describes some ways in which you can use CSS to add content when a document is displayed. 
You modify your stylesheet to add text content or images. 
One of the important advantages of CSS is that it helps you to separate a document’s style from its content. 
However, there are situations where it makes sense to specify certain content as part of the stylesheet, not as part of the document. 
You can specify text or image content within a stylesheet when that content is closely linked to the document’s structure. 
Note: Content specified in a stylesheet does not become part of the DOM. 
Specifying content in a stylesheet can cause complications. For example, you might have different language versions of your document that share a stylesheet. 
If you specify content in your stylesheet that requires translation, you have to put those parts of your stylesheet in different files and arrange for them to be linked with the appropriate language versions of your document. 
This issue does not arise if the content you specify consists of symbols or images that apply in all languages and cultures. 
Examples 
Text content 
To specify this, make a rule and add {{ cssxref(“::before”) }}, {{ cssxref(“::after”) }}, or {{cssxref(“::marker”)}} to the selector. 
In the declaration, specify the {{ cssxref(“content”) }} property with the text content as its value. 
HTML 
A text where I need to <span class="ref">something</span> 
CSS 
.ref::before { 
font-weight: bold; 
color: navy; 
content: "Reference "; 
} 
Output 
{{ EmbedLiveSample(‘Text_content’, 600, 30) }} 
The character set of a stylesheet is UTF-8 by default, but it can also be specified in the link, in the stylesheet itself, or in other ways. 
For details, see 4.4 CSS style sheet representation in the CSS Specification. 
Individual characters can also be specified by an escape mechanism that uses backslash as the escape character. 
For example, “\265B” is the chess symbol for a black queen ♛. 
For details, see Referring to characters not represented in a character encoding and Characters and case in the CSS Specification. 
Image content 
To add an image before or after an element, you can specify the URL of an image file in the value of the {{ cssxref(“content”) }} property. 
This rule adds a space and an icon after every link that has the class glossary: 
HTML 
<a href="developer.mozilla.org" class="glossary">developer.mozilla.org</a> 
CSS 
a.glossary::after { 
content: " " url("glossary-icon.gif"); 
} 
{{ EmbedLiveSample(‘Image_content’, 600, 40) }} 

{{LearnSidebar}} 
Styling boxes 
How do I add a drop-shadow to an element? 

{{LearnSidebar}} 
Cascading Style Sheets — or {{glossary(“CSS”)}} — is the first technology you should start learning after {{glossary(“HTML”)}}. 
While HTML is used to define the structure and semantics of your content, CSS is used to style it and lay it out. 
For example, you can use CSS to alter the font, color, size, and spacing of your content, split it into multiple columns, or add animations and other decorative features. 
Callout: 
We have put together a course that includes all the essential information you need to work towards your goal. 
Get started Prerequisites 
You should learn the basics of HTML before attempting any CSS. 
We recommend that you work through our Introduction to HTML module first. 
Once you understand the fundamentals of HTML, we recommend that you learn further HTML and CSS at the same time, moving back and forth between the two topics. 
This is because HTML is far more interesting and much more fun to learn when you apply CSS, and you can’t learn CSS without knowing HTML. 
Before starting this topic, you should also be familiar with using computers and using the web passively (i.e., just looking at it, consuming the content). 
You should have a basic work environment set up, as detailed in Installing basic software, and understand how to create and manage files, as detailed in Dealing with files — both of which are parts of our Getting started with the web complete beginner’s module. 
It is also recommended that you work through Getting started with the web before proceeding with this topic, especially if you are completely new to web development. However, much of what is covered in its CSS basics article is also covered in our CSS first steps module, albeit in a lot more detail. 
Modules 
This topic contains the following modules, in a suggested order for working through them. 
You should start with the first one. 
CSS first steps 
: CSS (Cascading Style Sheets) is used to style and layout web pages — for example, to alter the font, color, size, and spacing of your content, split it into multiple columns, or add animations and other decorative features. This module provides a gentle beginning to your path towards CSS mastery with the basics of how it works, what the syntax looks like, and how you can start using it to add styling to HTML. 
CSS building blocks 
: This module carries on where CSS first steps left off — now you’ve gained familiarity with the language and its syntax, and got some basic experience with using it, it’s time to dive a bit deeper. 
This module looks at the cascade and inheritance, all the selector types we have available, units, sizing, styling backgrounds and borders, debugging, and lots more. 
The aim here is to provide you with a toolkit for writing competent CSS and help you understand all the essential theory, before moving on to more specific disciplines like text styling and CSS layout. 
CSS styling text 
: With the basics of the CSS language covered, the next CSS topic for you to concentrate on is styling text — one of the most common things you’ll do with CSS. 
We round off the module by looking at applying custom fonts to your page, and styling lists and links. 
CSS layout 
: At this point, we’ve already looked at CSS fundamentals, how to style text, and how to style and manipulate the boxes that your content sits inside. 
Now it’s time to look at how to place your boxes in the right place with respect to the viewport, and one another. 
We have covered the necessary prerequisites so we can now dive deep into CSS layout, looking at different display settings, modern layout tools like flexbox, CSS grid, and positioning, and some of the legacy techniques you might still want to know about. 
Solving common CSS problems 
Use CSS to solve common problems provides links to sections of content explaining how to use CSS to solve very common problems when creating a web page. 
From the beginning, you’ll primarily apply colors to HTML elements and their backgrounds; change the size, shape, and position of elements; and add and define borders on elements. 
But there’s not much you can’t do once you have a solid understanding of even the basics of CSS. 
CSS works a bit differently from most programming languages and design tools you’ll come across. Why does it work the way it does? In the following video, Miriam Suzanne provides a useful explanation of why CSS works as it does, and why it has evolved as it has: 
See also 
CSS on MDN 
: The main entry point for CSS documentation on MDN, where you’ll find detailed reference documentation for all features of the CSS language. 


{{LearnSidebar}} 
With the basics of the CSS language covered, the next CSS topic for you to concentrate on is styling text — one of the most common things you’ll do with CSS. 
Here we look at text styling fundamentals including setting font, boldness, italics, line and letter spacing, drop shadows, and other text features. 
We round off the module by looking at applying custom fonts to your page, and styling lists and links. 
Callout: 
We have put together a course that includes all the essential information you need to work towards your goal. 
Before starting this module, you should already have basic familiarity with HTML, as discussed in the Introduction to HTML module, and be comfortable with CSS fundamentals, as discussed in Introduction to CSS. 
Guides 
This module contains the following articles, which will teach you all of the essentials behind styling HTML text content. 
Fundamental text and font styling 
: In this article we go through all the basics of text/font styling in detail, including setting font weight, family and style, font shorthand, text alignment and other effects, and line and letter spacing. 
Styling lists 
: Lists behave like any other text for the most part, but there are some CSS properties specific to lists that you need to know about, and some best practices to consider. 
This article explains all. 
Styling links 
: When styling links, it is important to understand how to make use of pseudo-classes to style link states effectively, and how to style links for use in common varied interface features such as navigation menus and tabs. 
We’ll look at all these topics in this article. 
Web fonts 
: Here we will explore web fonts in detail — these allow you to download custom fonts along with your web page, to allow for more varied, custom text styling. 
Assessments 
The following assessment will test your understanding of the text styling techniques covered in the guides above. 
Typesetting a community school homepage 
: In this assessment we’ll test your understanding of styling text by getting you to style the text for a community school’s homepage. 





{{LearnSidebar}}{{PreviousMenuNext(“Learn/Forms/Styling_web_forms”, “Learn/Forms/UI_pseudo-classes”, “Learn/Forms”)}} 
In this article, we will see what can be done with CSS to style the types of form control that are more difficult to style — the “bad” and “ugly” categories. 
As we saw in the previous article, text fields and buttons are perfectly easy to style; now we will dig into styling the more problematic bits. 
Prerequisites: 
Basic computer literacy, and a basic understanding of HTML and CSS. 
Objective: 
To understand what parts of forms are hard to style, and why; to learn what can be done to customize them. 
To recap what we said in the previous article, we have: 
The bad: Some elements are more difficult to style, requiring more complex CSS or some more specific tricks: 
Checkboxes and radio buttons 
<input type="search"> 
The ugly: Some elements can’t be styled thoroughly using CSS. These include: 
<input type="color"> 
Date-related controls such as <input type="datetime-local"> 
<input type="range"> 
<input type="file"> 
Let’s first talk about the appearance property, which is pretty useful for making all of the above more stylable. 
For example, let’s take the following controls: 
<form> <p> 
<label for="search">search: </label> 
<input id="search" name="search" type="search" /> </p> 
<p> <label for="text">text: </label> 
<input id="text" name="text" type="text" /> 
</p> <p> 
<label for="date">date: </label> 
<input id="date" name="date" type="datetime-local" /> 
<p> <label for="radio">radio: </label> 
<input id="radio" name="radio" type="radio" /> 
</p> <p> 
<label for="checkbox">checkbox: </label> 
<input id="checkbox" name="checkbox" type="checkbox" /> 
</p> 
<p><input type="submit" value="submit" /></p> 
<p><input type="button" value="button" /></p> 
</form> 
Applying the following CSS to them removes system-level styling. 
input { 
appearance: none; } 
The following live example shows you what they look like in your system — default on the left, and with the above CSS applied on the right (find it here also if you want to test it on other systems). 
{{EmbedGHLiveSample(“learning-area/html/forms/styling-examples/appearance-tester.html”, ‘100%’, 400)}} 
In most cases, the effect is to remove the stylized border, which makes CSS styling a bit easier, but isn’t really essential. 
We’ll look at those now. Taming search boxes 
<input type="search"> is basically just a text input, so why is appearance: none; useful here? 
The answer is that Safari search boxes have some styling restrictions — you can’t adjust their height or font-size freely, for example. 
This can be fixed using our friend appearance: none;, which disables the default appearance: 
input[type="search"] { 
appearance: none; } 
In the example below, you can see two identical styled search boxes. 
The right one has appearance: none; applied, and the left one doesn’t. 
If you look at it in Safari on macOS you’ll see that the left one isn’t sized properly. 
{{EmbedGHLiveSample(“learning-area/html/forms/styling-examples/search-appearance.html”, ‘100%’, 200)}} 
Interestingly, setting border/background on the search field also fixes this problem. 
The following styled search doesn’t have appearance: none; applied, but it doesn’t suffer from the same problem in Safari as the previous example. 
{{EmbedGHLiveSample(“learning-area/html/forms/styling-examples/styled-search.html”, ‘100%’, 200)}} 
Styling a checkbox or a radio button is tricky by default. 
The sizes of checkboxes and radio buttons are not meant to be changed with their default designs, and browsers react very differently when you try. 
For example, consider this simple test case: <label 
><span><input type="checkbox" name="q5" value="true" /></span> True</label 
> 
<label 
background: red; 
} 
input[type="checkbox"] { 
width: 100px; 
height: 100px; 
} 
Different browsers handle the checkbox and span differently, often ugly ways: 
Browser 
Rendering 
Firefox 71 (macOS) 
Firefox 57 (Windows 10) 
Chrome 77 (macOS), Safari 13, Opera 
Chrome 63 (Windows 10) 
Edge 16 (Windows 10) 
Using appearance: none on radios/checkboxes 
As we showed before, you can remove the default appearance of a checkbox or radio button altogether with {{cssxref(‘appearance’)}}:none; Let’s take this example HTML: 
<form> 
<fieldset> 
<p> 
<label> <input type="checkbox" name="fruit" value="cherry" /> 
I like cherry </label> 
</p> 
<p> 
<label> 
<input type="checkbox" name="fruit" value="banana" disabled /> 
I can't like banana 
</label> 
</p> 
<p> 
<label> <input type="checkbox" name="fruit" value="strawberry" /> 
I like strawberry </label> 
</p> 
</fieldset> 
</form> 
Let’s start by unstyling the original check boxes: 
input[type="checkbox"] { 
appearance: none; 
} 
input[type="checkbox"] { 
position: relative; width: 1em; 
height: 1em; 
border: 1px solid gray; 
} 
position: absolute; 
right: -1px; top: -0.3em; 
} 
} 
background: #ddd; 
color: gray; 
} 
You’ll find out more about such pseudo-classes and more in the next article; the above ones do the following: 
You can see the live result: 
{{EmbedGHLiveSample(“learning-area/html/forms/styling-examples/checkboxes-styled.html”, ‘100%’, 200)}} 
We’ve also created a couple of other examples to give you more ideas: 
Styled radio buttons: Custom radio button styling. 
If you view these checkboxes in a browser that doesn’t support {{cssxref(“appearance”)}}, your custom design will be lost, but they will still look like checkboxes and be usable. 
What can be done about the “ugly” elements? 
Now let’s turn our attention to the “ugly” controls — the ones that are really hard to thoroughly style. 
In short, these are drop-down boxes, complex control types like color and datetime-local, and feedback—oriented controls like {{HTMLElement(“progress”)}} and {{HTMLElement(“meter”)}}. 
The problem is that these elements have very different default looks across browsers, and while you can style them in some ways, some parts of their internals are literally impossible to style. 
If you are prepared to live with some differences in look and feel, you can get away with some simple styling to make sizing consistent, uniform styling of things like background-colors, and usage of appearance to get rid of some system-level styling. 
Take the following example, which shows a number of the “ugly” form features in action: 
{{EmbedGHLiveSample(“learning-area/html/forms/styling-examples/ugly-controls.html”, ‘100%’, 750)}} 
This example has the following CSS applied to it: body { 
font-family: "Josefin Sans", sans-serif; 
margin: 20px auto; 
max-width: 400px; 
} form > div { 
margin-bottom: 20px; 
} select { 
appearance: none; 
width: 100%; 
height: 100%; 
} 
.select-wrapper { 
position: relative; 
} 
.select-wrapper::after { 
content: "▼"; 
font-size: 1rem; 
top: 3px; right: 10px; 
position: absolute; } 
button, label, 
input, 
select, 
progress, meter { 
display: block; 
font-family: inherit; 
font-size: 100%; 
margin: 0; 
box-sizing: border-box; 
width: 100%; 
padding: 5px; 
height: 30px; 
} 
input[type="text"], 
input[type="datetime-local"], 
input[type="color"], select { 
box-shadow: inset 1px 1px 3px #ccc; 
border-radius: 5px; } label { 
margin-bottom: 5px; 
} 
width: 60%; 
margin: 0 auto; } 
button, 
label, 
input, 
select, 
progress, 
meter { display: block; 
font-family: inherit; 
font-size: 100%; 
margin: 0; 
box-sizing: border-box; 
padding: 5px; 
height: 30px; } 
We also added some uniform shadow and rounded corners to the controls on which it made sense: 
input[type="text"], 
input[type="datetime-local"], 
input[type="color"], select { 
box-shadow: inset 1px 1px 3px #ccc; border-radius: 5px; } 
On other controls like range types, progress bars, and meters they just add an ugly box around the control area, so it doesn’t make sense. 
Let’s talk about some specifics of each of these types of control, highlighting difficulties along the way. 
Selects and datalists 
In modern browsers, selects and datalists are generally not too bad to style provided you don’t want to vary the look and feel too much from the defaults. 
We’ve managed to get the basic look of the boxes looking pretty uniform and consistent. 
The datalist control is <input type="text"> anyway, so we knew this wouldn’t be a problem. 
Two things are slightly more problematic. 
First of all, the select’s “arrow” icon that indicates it is a dropdown differs across browsers. 
It also tends to change if you increase the size of the select box, or resize in an ugly fashion. 
To fix this in our example we first used our old friend appearance: none to get rid of the icon altogether: 
select { appearance: none; } 
We then created our own icon using generated content. 
We put an extra wrapper around the control, because ::before/::after don’t work on <select> elements (this is because generated content is placed relative to an element’s formatting box, but form inputs work more like replaced elements — their display is generated by the browser and put in place — and therefore don’t have one): 
<label for="select">Select a fruit</label> 
<div class="select-wrapper"> <select id="select" name="select"> <option>Banana</option> 
<option>Lemon</option> </select> </div> 
We then use generated content to generate a little down arrow, and put it in the right place using positioning: 
.select-wrapper { position: relative; 
} .select-wrapper::after { content: "▼"; font-size: 1rem; 
top: 6px; 
The second, slightly more important issue is that you don’t have control over the box that appears containing the options when you click on the <select> box to open it. 
You can inherit the font set on the parent, but you won’t be able to set things like spacing and colors. 
The same is true for the autocomplete list that appears with {{HTMLElement(“datalist”)}}. 
If you really need full control over the option styling, you’ll have to either use some kind of library to generate a custom control, or build your own custom control, or in the case of select use the multiple attribute, which makes all the options appear on the page, sidestepping this particular problem: 
<label for="select">Select fruits</label> <select id="select" name="select" multiple> 
… </select> 
Of course, this might also not fit in with the design you are going for, but it’s worth noting! 
Date input types 
The actual containing box is as easy to style as any text input, and what we’ve got in this demo looks fine. 



This is the first example of code that explains how to build a custom form widget. 
Basic state 
HTML 
<div class="select"> 
<span class="value">Cherry</span> 
<ul class="optList hidden"> 
<li class="option">Cherry</li> 
<li class="option">Lemon</li> 
<li class="option">Banana</li> 
<li class="option">Strawberry</li> 
<li class="option">Apple</li> 
</ul> 
</div> 
CSS 
/* --------------- */ 
/* Required Styles */ 
/* --------------- */ 
.select { 
position: relative; 
display: inline-block; 
} 
.select.active, 
.select:focus { 
box-shadow: 0 0 3px 1px #227755; 
outline: none; 
} 
.select .optList { 
position: absolute; 
top: 100%; 
left: 0; 
} 
.select .optList.hidden { 
max-height: 0; 
visibility: hidden; 
} 
/* ------------ */ 
/* Fancy Styles */ 
/* ------------ */ 
.select { 
font-size: 0.625em; /* 10px */ 
font-family: Verdana, Arial, sans-serif; 
box-sizing: border-box; 
padding: 0.1em 2.5em 0.2em 0.5em; /* 1px 25px 2px 5px */ 
width: 10em; /* 100px */ 
border: 0.2em solid #000; /* 2px */ 
border-radius: 0.4em; /* 4px */ 
box-shadow: 0 0.1em 0.2em rgba(0, 0, 0, 0.45); /* 0 1px 2px */ 
background: #f0f0f0; 
background: linear-gradient(0deg, #e3e3e3, #fcfcfc 50%, #f0f0f0); 
} 
.select .value { 
display: inline-block; 
width: 100%; 
overflow: hidden; 
white-space: nowrap; 
text-overflow: ellipsis; 
vertical-align: top; 
} 
.select::after { 
content: "▼"; 
position: absolute; 
z-index: 1; 
height: 100%; 
width: 2em; /* 20px */ 
top: 0; 
right: 0; 
padding-top: 0.1em; 
box-sizing: border-box; 
text-align: center; 
border-left: 0.2em solid #000; 
border-radius: 0 0.1em 0.1em 0; 
background-color: #000; 
color: #fff; 
} 
.select .optList { 
z-index: 2; 
list-style: none; 
margin: 0; 
padding: 0; 
background: #f0f0f0; 
border: 0.2em solid #000; 
border-top-width: 0.1em; 
border-radius: 0 0 0.4em 0.4em; 
box-shadow: 0 0.2em 0.4em rgba(0, 0, 0, 0.4); 
box-sizing: border-box; 
min-width: 100%; 
max-height: 10em; /* 100px */ 
overflow-y: auto; 
overflow-x: hidden; 
} 
.select .option { 
padding: 0.2em 0.3em; 
} 
.select .highlight { 
background: #000; 
color: #ffffff; 
} 
Result for basic state 
{{ EmbedLiveSample(‘Basic_state’, 120, 130) }} 
Active state 
HTML 
<div class="select active"> 
<span class="value">Cherry</span> 
<ul class="optList hidden"> 
<li class="option">Cherry</li> 
<li class="option">Lemon</li> 
<li class="option">Banana</li> 
<li class="option">Strawberry</li> 
<li class="option">Apple</li> 
</ul> 
</div> 
CSS 
/* --------------- */ 
/* Required Styles */ 
/* --------------- */ 
.select { 
position: relative; 
display: inline-block; 
} 
.select.active, 
.select:focus { 
box-shadow: 0 0 3px 1px #227755; 
outline: none; 
} 
.select .optList { 
position: absolute; 
top: 100%; 
left: 0; 
} 
.select .optList.hidden { 
max-height: 0; 
visibility: hidden; 
} 
/* ------------ */ 
/* Fancy Styles */ 
/* ------------ */ 
.select { 
font-size: 0.625em; /* 10px */ 
font-family: Verdana, Arial, sans-serif; 
box-sizing: border-box; 
padding: 0.1em 2.5em 0.2em 0.5em; /* 1px 25px 2px 5px */ 
width: 10em; /* 100px */ 
border: 0.2em solid #000; /* 2px */ 
border-radius: 0.4em; /* 4px */ 
box-shadow: 0 0.1em 0.2em rgba(0, 0, 0, 0.45); /* 0 1px 2px */ 
background: #f0f0f0; 
background: linear-gradient(0deg, #e3e3e3, #fcfcfc 50%, #f0f0f0); 
} 
.select .value { 
display: inline-block; 
width: 100%; 
overflow: hidden; 
white-space: nowrap; 
text-overflow: ellipsis; 
vertical-align: top; 
} 
.select::after { 
content: "▼"; 
position: absolute; 
z-index: 1; 
height: 100%; 
width: 2em; /* 20px */ 
top: 0; 
right: 0; 
padding-top: 0.1em; 
box-sizing: border-box; 
text-align: center; 
border-left: 0.2em solid #000; 
border-radius: 0 0.1em 0.1em 0; 
background-color: #000; 
color: #fff; 
} 
.select .optList { 
z-index: 2; 
list-style: none; 
margin: 0; 
padding: 0; 
background: #f0f0f0; 
border: 0.2em solid #000; 
border-top-width: 0.1em; 
border-radius: 0 0 0.4em 0.4em; 
box-shadow: 0 0.2em 0.4em rgba(0, 0, 0, 0.4); 
box-sizing: border-box; 
min-width: 100%; 
max-height: 10em; /* 100px */ 
overflow-y: auto; 
overflow-x: hidden; 
} 
.select .option { 
padding: 0.2em 0.3em; 
} 
.select .highlight { 
background: #000; 
color: #ffffff; 
} 
Result for active state 
{{ EmbedLiveSample(‘Active_state’, 120, 130) }} 
Open state 
HTML 
<div class="select active"> 
<span class="value">Cherry</span> 
<ul class="optList"> 
<li class="option highlight">Cherry</li> 
<li class="option">Lemon</li> 
<li class="option">Banana</li> 
<li class="option">Strawberry</li> 
<li class="option">Apple</li> 
</ul> 
</div> 
CSS 
/* --------------- */ 
/* Required Styles */ 
/* --------------- */ 
.select { 
position: relative; 
display: inline-block; 
} 
.select.active, 
.select:focus { 
box-shadow: 0 0 3px 1px #227755; 
outline: none; 
} 
.select .optList { 
position: absolute; 
top: 100%; 
left: 0; 
} 
.select .optList.hidden { 
max-height: 0; 
visibility: hidden; 
} 
/* ------------ */ 
/* Fancy Styles */ 
/* ------------ */ 
.select { 
font-size: 0.625em; /* 10px */ 
font-family: Verdana, Arial, sans-serif; 
box-sizing: border-box; 
padding: 0.1em 2.5em 0.2em 0.5em; /* 1px 25px 2px 5px */ 
width: 10em; /* 100px */ 
border: 0.2em solid #000; /* 2px */ 
border-radius: 0.4em; /* 4px */ 
box-shadow: 0 0.1em 0.2em rgba(0, 0, 0, 0.45); /* 0 1px 2px */ 
background: #f0f0f0; 
background: linear-gradient(0deg, #e3e3e3, #fcfcfc 50%, #f0f0f0); 
} 
.select .value { 
display: inline-block; 
width: 100%; 
overflow: hidden; 
white-space: nowrap; 
text-overflow: ellipsis; 
vertical-align: top; 
} 
.select::after { 
content: "▼"; 
position: absolute; 
z-index: 1; 
height: 100%; 
width: 2em; /* 20px */ 
top: 0; 
right: 0; 
padding-top: 0.1em; 
box-sizing: border-box; 
text-align: center; 
border-left: 0.2em solid #000; 
border-radius: 0 0.1em 0.1em 0; 
background-color: #000; 
color: #fff; 
} 
.select .optList { 
z-index: 2; 
list-style: none; 
margin: 0; 
padding: 0; 
background: #f0f0f0; 
border: 0.2em solid #000; 
border-top-width: 0.1em; 
border-radius: 0 0 0.4em 0.4em; 
box-shadow: 0 0.2em 0.4em rgba(0, 0, 0, 0.4); 
box-sizing: border-box; 
min-width: 100%; 
max-height: 10em; /* 100px */ 
overflow-y: auto; 
overflow-x: hidden; 
} 
.select .option { 
padding: 0.2em 0.3em; 
} 
.select .highlight { 
background: #000; 
color: #fff; 
} 
Result for open state 
{{ EmbedLiveSample(‘Open_state’, 120, 130) }} 

This is the second example that explain how to build custom form widgets. 
JS 
HTML 
<form class="no-widget"> 
<select name="myFruit"> 
<option>Cherry</option> 
<option>Lemon</option> 
<option>Banana</option> 
<option>Strawberry</option> 
<option>Apple</option> 
</select> 
<div class="select"> 
<span class="value">Cherry</span> 
<ul class="optList hidden"> 
<li class="option">Cherry</li> 
<li class="option">Lemon</li> 
<li class="option">Banana</li> 
<li class="option">Strawberry</li> 
<li class="option">Apple</li> 
</ul> 
</div> 
</form> 
CSS 
.widget select, 
.no-widget .select { 
position: absolute; 
left: -5000em; 
height: 0; 
overflow: hidden; 
} 
/* --------------- */ 
/* Required Styles */ 
/* --------------- */ 
.select { 
position: relative; 
display: inline-block; 
} 
.select.active, 
.select:focus { 
box-shadow: 0 0 3px 1px #227755; 
outline: none; 
} 
.select .optList { 
position: absolute; 
top: 100%; 
left: 0; 
} 
.select .optList.hidden { 
max-height: 0; 
visibility: hidden; 
} 
/* ------------ */ 
/* Fancy Styles */ 
/* ------------ */ 
.select { 
font-size: 0.625em; /* 10px */ 
font-family: Verdana, Arial, sans-serif; 
box-sizing: border-box; 
padding: 0.1em 2.5em 0.2em 0.5em; /* 1px 25px 2px 5px */ 
width: 10em; /* 100px */ 
border: 0.2em solid #000; /* 2px */ 
border-radius: 0.4em; /* 4px */ 
box-shadow: 0 0.1em 0.2em rgba(0, 0, 0, 0.45); /* 0 1px 2px */ 
background: #f0f0f0; 
background: linear-gradient(0deg, #e3e3e3, #fcfcfc 50%, #f0f0f0); 
} 
.select .value { 
display: inline-block; 
width: 100%; 
overflow: hidden; 
white-space: nowrap; 
text-overflow: ellipsis; 
vertical-align: top; 
} 
.select::after { 
content: "▼"; 
position: absolute; 
z-index: 1; 
height: 100%; 
width: 2em; /* 20px */ 
top: 0; 
right: 0; 
padding-top: 0.1em; 
box-sizing: border-box; 
text-align: center; 
border-left: 0.2em solid #000; 
border-radius: 0 0.1em 0.1em 0; 
background-color: #000; 
color: #fff; 
} 
.select .optList { 
z-index: 2; 
list-style: none; 
margin: 0; 
padding: 0; 
background: #f0f0f0; 
border: 0.2em solid #000; 
border-top-width: 0.1em; 
border-radius: 0 0 0.4em 0.4em; 
box-shadow: 0 0.2em 0.4em rgba(0, 0, 0, 0.4); 
box-sizing: border-box; 
min-width: 100%; 
max-height: 10em; /* 100px */ 
overflow-y: auto; 
overflow-x: hidden; 
} 
.select .option { 
padding: 0.2em 0.3em; 
} 
.select .highlight { 
background: #000; 
color: #ffffff; 
} 
JavaScript 
window.addEventListener("load", () => { 
const form = document.querySelector("form"); 
form.classList.remove("no-widget"); 
form.classList.add("widget"); 
}); 
Result 
{{ EmbedLiveSample(‘JS’, 120, 130) }} 
No JS 
HTML 
<form class="no-widget"> 
<select name="myFruit"> 
<option>Cherry</option> 
<option>Lemon</option> 
<option>Banana</option> 
<option>Strawberry</option> 
<option>Apple</option> 
</select> 
<div class="select"> 
<span class="value">Cherry</span> 
<ul class="optList hidden"> 
<li class="option">Cherry</li> 
<li class="option">Lemon</li> 
<li class="option">Banana</li> 
<li class="option">Strawberry</li> 
<li class="option">Apple</li> 
</ul> 
</div> 
</form> 
CSS 
.widget select, 
.no-widget .select { 
position: absolute; 
left: -5000em; 
height: 0; 
overflow: hidden; 
} 
Result 
{{ EmbedLiveSample(‘No_JS’, 120, 130) }} 

This is the third example that explain how to build custom form widgets. 
Change states 
HTML 
<form class="no-widget"> 
<select name="myFruit" tabindex="-1"> 
<option>Cherry</option> 
<option>Lemon</option> 
<option>Banana</option> 
<option>Strawberry</option> 
<option>Apple</option> 
</select> 
<div class="select" tabindex="0"> 
<span class="value">Cherry</span> 
<ul class="optList hidden"> 
<li class="option">Cherry</li> 
<li class="option">Lemon</li> 
<li class="option">Banana</li> 
<li class="option">Strawberry</li> 
<li class="option">Apple</li> 
</ul> 
</div> 
</form> 
CSS 
.widget select, 
.no-widget .select { 
position: absolute; 
left: -5000em; 
height: 0; 
overflow: hidden; 
} 
/* --------------- */ 
/* Required Styles */ 
/* --------------- */ 
.select { 
position: relative; 
display: inline-block; 
} 
.select.active, 
.select:focus { 
box-shadow: 0 0 3px 1px #227755; 
outline: none; 
} 
.select .optList { 
position: absolute; 
top: 100%; 
left: 0; 
} 
.select .optList.hidden { 
max-height: 0; 
visibility: hidden; 
} 
/* ------------ */ 
/* Fancy Styles */ 
/* ------------ */ 
.select { 
font-size: 0.625em; /* 10px */ 
font-family: Verdana, Arial, sans-serif; 
box-sizing: border-box; 
padding: 0.1em 2.5em 0.2em 0.5em; /* 1px 25px 2px 5px */ 
width: 10em; /* 100px */ 
border: 0.2em solid #000; /* 2px */ 
border-radius: 0.4em; /* 4px */ 
box-shadow: 0 0.1em 0.2em rgba(0, 0, 0, 0.45); /* 0 1px 2px */ 
background: #f0f0f0; 
background: linear-gradient(0deg, #e3e3e3, #fcfcfc 50%, #f0f0f0); 
} 
.select .value { 
display: inline-block; 
width: 100%; 
overflow: hidden; 
white-space: nowrap; 
text-overflow: ellipsis; 
vertical-align: top; 
} 
.select::after { 
content: "▼"; 
position: absolute; 
z-index: 1; 
height: 100%; 
width: 2em; /* 20px */ 
top: 0; 
right: 0; 
padding-top: 0.1em; 
box-sizing: border-box; 
text-align: center; 
border-left: 0.2em solid #000; 
border-radius: 0 0.1em 0.1em 0; 
background-color: #000; 
color: #fff; 
} 
.select .optList { 
z-index: 2; 
list-style: none; 
margin: 0; 
padding: 0; 
background: #f0f0f0; 
border: 0.2em solid #000; 
border-top-width: 0.1em; 
border-radius: 0 0 0.4em 0.4em; 
box-shadow: 0 0.2em 0.4em rgba(0, 0, 0, 0.4); 
box-sizing: border-box; 
min-width: 100%; 
max-height: 10em; /* 100px */ 
overflow-y: auto; 
overflow-x: hidden; 
} 
.select .option { 
padding: 0.2em 0.3em; 
} 
.select .highlight { 
background: #000; 
color: #ffffff; 
} 
JavaScript 
// -------------------- // 
// Function definitions // 
// -------------------- // 
function deactivateSelect(select) { 
if (! 
select.classList.contains("active")) return; 
const optList = select.querySelector(".optList"); 
optList.classList.add("hidden"); 
select.classList.remove("active"); 
} 
function activeSelect(select, selectList) { 
if (select.classList.contains("active")) return; 
selectList.forEach(deactivateSelect); 
select.classList.add("active"); 
} 
function toggleOptList(select, show) { 
const optList = select.querySelector(".optList"); 
optList.classList.toggle("hidden"); 
} 
function highlightOption(select, option) { 
const optionList = select.querySelectorAll(".option"); 
optionList.forEach((other) => { 
other.classList.remove("highlight"); 
}); 
option.classList.add("highlight"); 
} 
// ------------- // 
// Event binding // 
// ------------- // 
window.addEventListener("load", () => { 
const form = document.querySelector("form"); 
form.classList.remove("no-widget"); 
form.classList.add("widget"); 
}); 
window.addEventListener("load", () => { 
const selectList = document.querySelectorAll(".select"); 
selectList.forEach((select) => { 
const optionList = select.querySelectorAll(".option"); 
optionList.forEach((option) => { 
option.addEventListener("mouseover", () => { 
highlightOption(select, option); 
}); 
}); 
select.addEventListener( 
"click", 
(event) => { 
toggleOptList(select); 
}, 
false, 
); 
select.addEventListener("focus", (event) => { 
activeSelect(select, selectList); 
}); 
select.addEventListener("blur", (event) => { 
deactivateSelect(select); 
}); 
select.addEventListener("keyup", (event) => { 
if (event.key === "Escape") { 
deactivateSelect(select); 
} 
}); 
}); 
}); 
Result 
{{ EmbedLiveSample(‘Change_states’) }} 

This is the fourth example that explain how to build custom form widgets. 
Change states 
HTML 
<form class="no-widget"> 
<select name="myFruit"> 
<option>Cherry</option> 
<option>Lemon</option> 
<option>Banana</option> 
<option>Strawberry</option> 
<option>Apple</option> 
</select> 
<div class="select"> 
<span class="value">Cherry</span> 
<ul class="optList hidden"> 
<li class="option">Cherry</li> 
<li class="option">Lemon</li> 
<li class="option">Banana</li> 
<li class="option">Strawberry</li> 
<li class="option">Apple</li> 
</ul> 
</div> 
</form> 
CSS 
.widget select, 
.no-widget .select { 
position: absolute; 
left: -5000em; 
height: 0; 
overflow: hidden; 
} 
/* --------------- */ 
/* Required Styles */ 
/* --------------- */ 
.select { 
position: relative; 
display: inline-block; 
} 
.select.active, 
.select:focus { 
box-shadow: 0 0 3px 1px #227755; 
outline: none; 
} 
.select .optList { 
position: absolute; 
top: 100%; 
left: 0; 
} 
.select .optList.hidden { 
max-height: 0; 
visibility: hidden; 
} 
/* ------------ */ 
/* Fancy Styles */ 
/* ------------ */ 
.select { 
font-size: 0.625em; /* 10px */ 
font-family: Verdana, Arial, sans-serif; 
box-sizing: border-box; 
padding: 0.1em 2.5em 0.2em 0.5em; /* 1px 25px 2px 5px */ 
width: 10em; /* 100px */ 
border: 0.2em solid #000; /* 2px */ 
border-radius: 0.4em; /* 4px */ 
box-shadow: 0 0.1em 0.2em rgba(0, 0, 0, 0.45); /* 0 1px 2px */ 
background: #f0f0f0; 
background: linear-gradient(0deg, #e3e3e3, #fcfcfc 50%, #f0f0f0); 
} 
.select .value { 
display: inline-block; 
width: 100%; 
overflow: hidden; 
white-space: nowrap; 
text-overflow: ellipsis; 
vertical-align: top; 
} 
.select::after { 
content: "▼"; 
position: absolute; 
z-index: 1; 
height: 100%; 
width: 2em; /* 20px */ 
top: 0; 
right: 0; 
padding-top: 0.1em; 
box-sizing: border-box; 
text-align: center; 
border-left: 0.2em solid #000; 
border-radius: 0 0.1em 0.1em 0; 
background-color: #000; 
color: #fff; 
} 
.select .optList { 
z-index: 2; 
list-style: none; 
margin: 0; 
padding: 0; 
background: #f0f0f0; 
border: 0.2em solid #000; 
border-top-width: 0.1em; 
border-radius: 0 0 0.4em 0.4em; 
box-shadow: 0 0.2em 0.4em rgba(0, 0, 0, 0.4); 
box-sizing: border-box; 
min-width: 100%; 
max-height: 10em; /* 100px */ 
overflow-y: auto; 
overflow-x: hidden; 
} 
.select .option { 
padding: 0.2em 0.3em; 
} 
.select .highlight { 
background: #000; 
color: #ffffff; 
} 
JavaScript 
// -------------------- // 
// Function definitions // 
// -------------------- // 
function deactivateSelect(select) { 
if (! 
select.classList.contains("active")) return; 
const optList = select.querySelector(".optList"); 
optList.classList.add("hidden"); 
select.classList.remove("active"); 
} 
function activeSelect(select, selectList) { 
if (select.classList.contains("active")) return; 
selectList.forEach(deactivateSelect); 
select.classList.add("active"); 
} 
function toggleOptList(select, show) { 
const optList = select.querySelector(".optList"); 
optList.classList.toggle("hidden"); 
} 
function highlightOption(select, option) { 
const optionList = select.querySelectorAll(".option"); 
optionList.forEach((other) => { 
other.classList.remove("highlight"); 
}); 
option.classList.add("highlight"); 
} 
function updateValue(select, index) { 
const nativeWidget = select.previousElementSibling; 
const value = select.querySelector(".value"); 
const optionList = select.querySelectorAll(".option"); 
nativeWidget.selectedIndex = index; 
value.innerHTML = optionList[index].innerHTML; 
highlightOption(select, optionList[index]); 
} 
function getIndex(select) { 
const nativeWidget = select.previousElementSibling; 
return nativeWidget.selectedIndex; 
} 
// ------------- // 
// Event binding // 
// ------------- // 
window.addEventListener("load", () => { 
const form = document.querySelector("form"); 
form.classList.remove("no-widget"); 
form.classList.add("widget"); 
}); 
window.addEventListener("load", () => { 
const selectList = document.querySelectorAll(".select"); 
selectList.forEach((select) => { 
const optionList = select.querySelectorAll(".option"); 
optionList.forEach((option) => { 
option.addEventListener("mouseover", () => { 
highlightOption(select, option); 
}); 
}); 
select.addEventListener("click", (event) => { 
toggleOptList(select); 
}); 
select.addEventListener("focus", (event) => { 
activeSelect(select, selectList); 
}); 
select.addEventListener("blur", (event) => { 
deactivateSelect(select); 
}); 
}); 
}); 
window.addEventListener("load", () => { 
const selectList = document.querySelectorAll(".select"); 
selectList.forEach((select) => { 
const optionList = select.querySelectorAll(".option"); 
const selectedIndex = getIndex(select); 
select.tabIndex = 0; 
select.previousElementSibling.tabIndex = -1; 
updateValue(select, selectedIndex); 
optionList.forEach((option, index) => { 
option.addEventListener("click", (event) => { 
updateValue(select, index); 
}); 
}); 
select.addEventListener("keyup", (event) => { 
let index = getIndex(select); 
if (event.key === "Escape") { 
deactivateSelect(select); 
} 
if (event.key === "ArrowDown" && index < optionList.length - 1) { 
index++; 
} 
if (event.key === "ArrowUp" && index > 0) { 
index--; 
} 
updateValue(select, index); 
}); 
}); 
}); 
Result 
{{ EmbedLiveSample(‘Change_states’) }} 

This is the last example that explain how to build custom form widgets. 
Change states 
HTML 
<form class="no-widget"> 
<select name="myFruit"> 
<option>Cherry</option> 
<option>Lemon</option> 
<option>Banana</option> 
<option>Strawberry</option> 
<option>Apple</option> 
</select> 
<div class="select" role="listbox"> 
<span class="value">Cherry</span> 
<ul class="optList hidden" role="presentation"> 
<li class="option" role="option" aria-selected="true">Cherry</li> 
<li class="option" role="option">Lemon</li> 
<li class="option" role="option">Banana</li> 
<li class="option" role="option">Strawberry</li> 
<li class="option" role="option">Apple</li> 
</ul> 
</div> 
</form> 
CSS 
.widget select, 
.no-widget .select { 
position: absolute; 
left: -5000em; 
height: 0; 
overflow: hidden; 
} 
/* --------------- */ 
/* Required Styles */ 
/* --------------- */ 
.select { 
position: relative; 
display: inline-block; 
} 
.select.active, 
.select:focus { 
box-shadow: 0 0 3px 1px #227755; 
outline: none; 
} 
.select .optList { 
position: absolute; 
top: 100%; 
left: 0; 
} 
.select .optList.hidden { 
max-height: 0; 
visibility: hidden; 
} 
/* ------------ */ 
/* Fancy Styles */ 
/* ------------ */ 
.select { 
font-size: 0.625em; /* 10px */ 
font-family: Verdana, Arial, sans-serif; 
box-sizing: border-box; 
padding: 0.1em 2.5em 0.2em 0.5em; /* 1px 25px 2px 5px */ 
width: 10em; /* 100px */ 
border: 0.2em solid #000; /* 2px */ 
border-radius: 0.4em; /* 4px */ 
box-shadow: 0 0.1em 0.2em rgba(0, 0, 0, 0.45); /* 0 1px 2px */ 
background: #f0f0f0; 
background: linear-gradient(0deg, #e3e3e3, #fcfcfc 50%, #f0f0f0); 
} 
.select .value { 
display: inline-block; 
width: 100%; 
overflow: hidden; 
white-space: nowrap; 
text-overflow: ellipsis; 
vertical-align: top; 
} 
.select::after { 
content: "▼"; 
position: absolute; 
z-index: 1; 
height: 100%; 
width: 2em; /* 20px */ 
top: 0; 
right: 0; 
padding-top: 0.1em; 
box-sizing: border-box; 
text-align: center; 
border-left: 0.2em solid #000; 
border-radius: 0 0.1em 0.1em 0; 
background-color: #000; 
color: #fff; 
} 
.select .optList { 
z-index: 2; 
list-style: none; 
margin: 0; 
padding: 0; 
background: #f0f0f0; 
border: 0.2em solid #000; 
border-top-width: 0.1em; 
border-radius: 0 0 0.4em 0.4em; 
box-shadow: 0 0.2em 0.4em rgba(0, 0, 0, 0.4); 
box-sizing: border-box; 
min-width: 100%; 
max-height: 10em; /* 100px */ 
overflow-y: auto; 
overflow-x: hidden; 
} 
.select .option { 
padding: 0.2em 0.3em; 
} 
.select .highlight { 
background: #000; 
color: #ffffff; 
} 
JavaScript 
// -------------------- // 
// Function definitions // 
// -------------------- // 
function deactivateSelect(select) { 
if (! 
select.classList.contains("active")) return; 
const optList = select.querySelector(".optList"); 
optList.classList.add("hidden"); 
select.classList.remove("active"); 
} 
function activeSelect(select, selectList) { 
if (select.classList.contains("active")) return; 
selectList.forEach(deactivateSelect); 
select.classList.add("active"); 
} 
function toggleOptList(select, show) { 
const optList = select.querySelector(".optList"); 
optList.classList.toggle("hidden"); 
} 
function highlightOption(select, option) { 
const optionList = select.querySelectorAll(".option"); 
optionList.forEach((other) => { 
other.classList.remove("highlight"); 
}); 
option.classList.add("highlight"); 
} 
function updateValue(select, index) { 
const nativeWidget = select.previousElementSibling; 
const value = select.querySelector(".value"); 
const optionList = select.querySelectorAll(".option"); 
optionList.forEach((other) => { 
other.setAttribute("aria-selected", "false"); 
}); 
optionList[index].setAttribute("aria-selected", "true"); 
nativeWidget.selectedIndex = index; 
value.innerHTML = optionList[index].innerHTML; 
highlightOption(select, optionList[index]); 
} 
function getIndex(select) { 
const nativeWidget = select.previousElementSibling; 
return nativeWidget.selectedIndex; 
} 
// ------------- // 
// Event binding // 
// ------------- // 
window.addEventListener("load", () => { 
const form = document.querySelector("form"); 
form.classList.remove("no-widget"); 
form.classList.add("widget"); 
}); 
window.addEventListener("load", () => { 
const selectList = document.querySelectorAll(".select"); 
selectList.forEach((select) => { 
const optionList = select.querySelectorAll(".option"); 
const selectedIndex = getIndex(select); 
select.tabIndex = 0; 
select.previousElementSibling.tabIndex = -1; 
updateValue(select, selectedIndex); 
optionList.forEach((option, index) => { 
option.addEventListener("mouseover", () => { 
highlightOption(select, option); 
}); 
option.addEventListener("click", (event) => { 
updateValue(select, index); 
}); 
}); 
select.addEventListener("click", (event) => { 
toggleOptList(select); 
}); 
select.addEventListener("focus", (event) => { 
activeSelect(select, selectList); 
}); 
select.addEventListener("blur", (event) => { 
deactivateSelect(select); 
}); 
select.addEventListener("keyup", (event) => { 
let index = getIndex(select); 
if (event.key === "Escape") { 
deactivateSelect(select); 
} 
if (event.key === "ArrowDown" && index < optionList.length - 1) { 
index++; 
} 
if (event.key === "ArrowUp" && index > 0) { 
index--; 
} 
updateValue(select, index); 
}); 
}); 
}); 
Result 
{{ EmbedLiveSample(‘Change_states’) }} 

{{LearnSidebar}} 
There are some cases where the available native HTML form controls may seem like they are not enough. 
For example, if you need to perform advanced styling on some controls such as the {{HTMLElement(“select”)}} element, or if you want to provide custom behaviors, you may consider building your own controls. 
In this article, we will discuss how to build a custom control. 
To that end, we will work with an example: rebuilding the {{HTMLElement(“select”)}} element. 
We will also discuss how, when, and whether building your own control makes sense, and what to consider when building a control is a requirement. 
Note: We’ll focus on building the control, not on how to make the code generic and reusable; that would involve some non-trivial JavaScript code and DOM manipulation in an unknown context, and that is out of the scope of this article. 
Design, structure, and semantics 
Before building a custom control, you should start by figuring out exactly what you want. 
This will save you some precious time. 
In particular, it’s important to clearly define all the states of your control. 
To do this, it’s good to start with an existing control whose states and behavior are well known, so that you can mimic those as much as possible. 
In our example, we will rebuild the {{HTMLElement(“select”)}} element. 
Here is the result we want to achieve: 
The three states of a select box 
This screenshot shows the three main states of our control: the normal state (on the left); the active state (in the middle) and the open state (on the right). 
In terms of behavior, we are recreating a native HTML element. 
Therefore it should have the same behaviors and semantics as the native HTML element. 
We require our control to be usable with a mouse as well as with a keyboard, and comprehensible to a screen reader, just like any native control. 
Let’s start by defining how the control reaches each state: 
The control is in its normal state when: 
the page loads. 
the control was active and the user clicks anywhere outside it. 



{{LearnSidebar}} 
All web developers learn very quickly (and sometimes painfully) that the Web is a very rough place for them. 
Our worst curse is legacy browsers. 
Okay, let’s admit it, when we said “legacy browser” we all have in mind “Internet Explorer”, but they are far from the only ones. 
In the mobile world, when neither the browser nor the OS can be updated such as on older Android phones or iPhones, the stock browsers that don’t update are also legacy browsers. 
Dealing with this wilderness is part of the job. 
Fortunately, there are a few tricks to know that can help you to solve most of the problems caused by legacy browsers. 
If a browser doesn’t support an HTML {{htmlelement(‘input’)}} type, it doesn’t fail: it just uses the default value of type=text. 
Learn about the issues 
To understand common patterns, it helps to read documentation. 
If you are reading this on MDN, you are at the right place to start. Just check the support of the elements (or DOM interfaces) you want to use. 
MDN has compatibility tables available for most elements, properties and APIs that can be used in a web page. 
Because HTML forms involves complex interaction, there is one important rule: keep it simple, also known as the “KISS principal”. 
There are so many cases where we want forms that are “nicer” or “with advanced functionality”, but building efficient HTML Forms is not a question of design or technology. 
Rather, it’s about simplicity, intuitiveness, and ease of user interaction. 
The tutorial, forms usability on UX For The Masses, explains it well. 
Graceful degradation and progressive enhancement are development patterns that allow you to build great stuff by supporting a wide range of browsers at the same time. 
When you build something for a modern browser, and you want to be sure it will work, one way or another, on legacy browsers, you are performing graceful degradation. 
Let’s see some examples related to HTML forms. 
HTML input types 
All HTML input types are useable in all browsers, even ancient ones, because the way they degrade is highly predictable. 
If a browser does not know the value of the type attribute of an {{HTMLElement(“input”)}} element, it will fall back as if the value were text. 
<label for="myColor"> 
Pick a color 
<input type="color" id="myColor" name="color" /> 
</label> 
Supported 
Not supported 
Form buttons 
There are two ways to define buttons within HTML forms: 
The {{HTMLElement(“input”)}} element with its attribute type set to the values button, submit, reset or image 
The {{HTMLElement(“button”)}} element 
{{HTMLElement(“input”)}} 
The {{HTMLElement(“input”)}} element can make things a little difficult if you want to apply some CSS by using the element selector: 
<input type="button" value="click me" /> 
If we remove the border on all inputs, can we restore the default appearance on input buttons only? 
input { 
/* This rule turns off the default rendering for the input types that have a border, including buttons defined with an input element */ 
border: 1px solid #ccc; 
} 
input[type="button"] { 
/* This does NOT restore the default rendering */ 
border: none; 
} 
input[type="button"] { 
/* These don't either! 
Actually there is no standard way to do it in any browser */ 
border: auto; 
border: initial; 
} 
input[type="button"] { 
/* This will come the closest to restoring default rendering. */ 
border: revert; 
} 
See the global CSS {{cssxref(‘revert’)}} value for more information. 
{{HTMLElement(“button”)}} 
The {{HTMLElement(“button”)}} element suffered from two issues that are now resolved: 
A bug in old versions of Internet Explorer sent the HTML content available between the starting and ending tag of the {{HTMLElement(“button”)}} element instead of the content of the value attribute when clicked. 
This was only an issue if that value needed to be sent, such as when data processing depends on which button a user clicked. 
Some very old browsers did not use submit as the default value for the type attribute. 
While resolved in all modern browsers, it is still recommended to always set the type attribute on {{HTMLElement(“button”)}} elements. 
<!-- Clicking this button sent "<em>Do A</em>" instead of "A" in some cases --> 
<button type="submit" name="IWantTo" value="A"> 
<em>Do A</em> 
</button> 
Choosing one solution or the other is up to you based on your project’s constraints. 
Let go of CSS 
One of the big issues with HTML Forms is styling form widgets with CSS. 
Form controls appearance is browser and operating system specific. 
For example, the input of color type looks different in Safari, Chrome and Firefox browser, but the color picker widget is the same in all browsers on a device as it opens up the operating system’s native color picker. 
It’s generally a good idea to not alter the default appearance of form control because altering one CSS property value may alter some input types but not others. 
For example, if you declare input { font-size: 2rem; }, it will impact number, date, and text, but not color or range. 
If you alter a property, that may impact the appearance of the widget in unexpected ways. 
For example, [value] { background-color: #ccc; } may have been used to target every {{HTMLElement(“input”)}} with a value attribute, but changing the background-color or border radius on a {{HTMLElement(“meter”)}} will lead to likely unexpected results that differ across browsers. 
You can declare {{cssxref(‘appearance’, ‘appearance: none;’)}} to remove the browser styles, but that generally defeats the purpose: as you lose all styling, removing the default look and feel your visitors are used to. 
To summarize, when it comes to styling form control widgets, the side effects of styling them with CSS can be unpredictable. 
So don’t. 
As you can see from the complexity of the Property compatibility table for form widgets article, it’s very difficult. 
Even if it’s still possible to do a few adjustments on text elements (such as sizing or font color), there are always side effects. 
The best approach remains to not style HTML Form widgets at all. 
But you can still apply styles to all the surrounding items. 
And, if you must alter the default styles of your form widgets, define a style guide to ensure consistency among all your form controls so user experience is not destroyed. 
You can also investigate some hard techniques such as rebuilding widgets with JavaScript. But in that case, do not hesitate to charge your client for such foolishness. 
Feature detection and polyfills 
CSS and JavaScript are awesome technologies, but it’s important to ensure you don’t break legacy browsers. 
Before using features that aren’t fully supported in the browsers your targeting, you should feature detect: 
CSS feature detection 
Before styling a replaced form control widget, you can check to see if the browser supports the features you plan on using {{cssxref(‘@supports’)}}: 
@supports (appearance: none) { 
input[type="search"] { 
appearance: none; 
/* restyle the search input */ 
} 
} 
The {{cssxref(‘appearance’)}} property can be used to display an element using platform-native styling, or, as is done with the value of none, remove default platform-native based styling. 
Unobtrusive JavaScript 
One of the biggest problems is the availability of APIs. 
For that reason, it’s considered best practice to work with “unobtrusive” JavaScript. 
It’s a development pattern that defines two requirements: 
A strict separation between structure and behaviors. 
If the code breaks, the content and the basic functionalities must remain accessible and usable. 
The principles of unobtrusive JavaScript (originally written by Peter-Paul Koch for Dev.Opera.com) describes these ideas very well. 
Pay attention to performance 
Even though some polyfills are very aware of performance, loading additional scripts can affect the performance of your application. 
This is especially critical with legacy browsers; many of them have a very slow JavaScript engine that can make the execution of all your polyfills painful for the user. 
Performance is a subject on its own, but legacy browsers are very sensitive to it: basically, they are slow and the more polyfills they need, the more JavaScript they have to process. 
So they are doubly burdened compared to modern browsers. 
Test your code with legacy browsers to see how they actually perform. 
Sometimes, dropping some functionality leads to a better user experience than having exactly the same functionality in all browsers. 
As a last reminder, just always think about the end users. 
Conclusion 
As you can see, considering browser and operating system default form control appearance is important. 
There are many techniques to handle these issue; however mastering all of them is beyond the scope of this article. 
The basic premise is to consider whether altering the default implementation is worth the work before embarking on the challenge. 
If you read all the articles of this HTML Forms guide, you should now be at ease with using forms. 
If you discover new techniques or hints, please help improve the guide. 
See also Learning path 
Your first HTML form How to structure an HTML form 
The native form widgets 
HTML5 input types 
Additional form controls 
UI pseudo-classes 
Styling HTML forms 
Form data validation Sending form data 
Advanced Topics 
Sending forms through JavaScript 
How to build custom form widgets 
HTML forms in legacy browsers 
Advanced styling for HTML forms 
Property compatibility table for form widgets 

{{LearnSidebar}} 
This module provides a series of articles that will help you master the essentials of web forms. 
Web forms are a very powerful tool for interacting with users — most commonly they are used for collecting data from users, or allowing them to control a user interface. 
However, for historical and technical reasons, it’s not always obvious how to use them to their full potential. 
In the articles listed below, we’ll cover all the essential aspects of Web forms including marking up their HTML structure, styling form controls, validating form data, and submitting data to the server. 
Callout: 
Looking to become a front-end web developer? 
We have put together a course that includes all the essential information you need to work towards your goal. 
Get started 
Before starting this module, you should at least work through our Introduction to HTML. 
At this point you should find the Introductory guides easy to understand, and also be able to make use of our Basic native form controls guide. 
Mastering forms however requires more than just HTML knowledge — you also need to learn some specific techniques to style form controls, and some scripting knowledge is required to handle things like validation and creating custom form controls. 
Therefore, before you look at the other sections listed below we’d recommend that you go away and learn some CSS and JavaScript first. 
The above text is a good indicator as to why we’ve put web forms into its own standalone module, rather than trying to mix bits of it into the HTML, CSS, and JavaScript topic areas — form elements are more complex than most other HTML elements, and they also require a close marriage of related CSS and JavaScript techniques to get the most out of them. 
Note: If you are working on a computer/tablet/other device where you don’t have the ability to create your own files, you could try out (most of) the code examples in an online coding program such as JSBin or Glitch. 
Introductory guides 
Your first form 
: The first article in our series provides your very first experience of creating a web form, including designing a simple form, implementing it using the right HTML elements, adding some very simple styling via CSS, and how data is sent to a server. 
How to structure a web form 
: With the basics out of the way, we now look in more detail at the elements used to provide structure and meaning to the different parts of a form. 
The different form controls 
Basic native form controls 
: We start off this section by looking at the functionality of the original HTML {{htmlelement(“input”)}} types in detail, looking at what options are available to collect different types of data. 
The HTML5 input types 
: Here we continue our deep dive into the <input> element, looking at the additional input types provided when HTML5 was released, and the various UI controls and data collection enhancements they provide. 
Additionally, we look at the {{htmlelement(‘output’)}} element. 
Other form controls 
: Next we take a look at all the non-<input> form controls and associated tools, such as {{htmlelement(‘select’)}}, {{htmlelement(‘textarea’)}}, {{htmlelement(‘meter’)}}, and {{htmlelement(‘progress’)}}. 
Form styling guides 
Styling web forms 
: This article provides an introduction to styling forms with CSS, including all the basics you might need to know for basic styling tasks. 
Advanced form styling 
: Here we look at some more advanced form styling techniques that need to be used when trying to deal with some of the more difficult-to-style form elements. 
UI pseudo-classes 
: An introduction to the UI pseudo-classes enabling HTML form controls to be targeted based on their current state. 
Validating and submitting form data 
Client-side form validation 
: Sending data is not enough — we also need to make sure that the data users enter into forms is in the correct format to process it successfully, and that it won’t break our applications. 
We also want to help our users to fill out our forms correctly and not get frustrated when trying to use our apps. 
Form validation helps us achieve these goals — this article tells you what you need to know. 
Sending form data 
: This article looks at what happens when a user submits a form — where does the data go, and how do we handle it when it gets there? 
We also look at some of the security concerns associated with sending form data. 
Advanced articles 
The following articles aren’t essential to the learning pathway, but they’ll prove interesting and useful when you’ve mastered the above techniques and want to know more. 
How to build custom form controls 

{{LearnSidebar}}{{PreviousMenuNext(“Learn/Forms/HTML5_input_types”,“Learn/Forms/Styling_web_forms”, “Learn/Forms”)}} 
We now look at the functionality of non-<input> form elements in detail, from other control types such as drop-down lists and multi-line text fields, to other useful form features such as the {{htmlelement(‘output’)}} element (which we saw in action in the previous article), and progress bars. Prerequisites: Basic computer literacy, and a basic understanding of HTML. 
Objective: 
{{EmbedLiveSample(“Multi-line_text_fields”, 120, 160)}} 





{{LearnSidebar}}{{PreviousMenuNext(“Learn/Forms/Advanced_form_styling”, “Learn/Forms/Form_validation”, “Learn/Forms”)}} 
In the previous articles, we covered the styling of various form controls in a general manner. 
This included some usage of pseudo-classes, for example, using :checked to target a checkbox only when it is selected. 
Prerequisites: Basic computer literacy, and a basic understanding of HTML and CSS, including general knowledge of pseudo-classes and pseudo-elements. 
Objective: 
{{cssxref(“:hover”)}}: Selects an element only when it is being hovered over by a mouse pointer. 


{{learnsidebar}} 
Welcome to our front-end web developer learning pathway! 
Here we provide you with a structured course that will teach you all you need to know to become a front-end web developer. 
Work through each section, learning new skills (or improving existing ones) as you go along. 
Each section includes exercises and assessments to test your understanding before you move forward. 
Subjects covered 
The subjects covered are: 
Basic setup and learning how to learn 
Web standards and best practices (such as accessibility and cross-browser compatibility) 
HTML, the language that gives web content structure and meaning 
CSS, the language used to style web pages 
JavaScript, the scripting language used to create dynamic functionality on the web 
Tooling that is used to facilitate modern client-side web development. 
You can work through sections in order, but each one is also self-contained. 
For example, if you already know HTML, you can skip ahead to the CSS section. 
Prerequisites 
You don’t need any previous knowledge to start this course. All you need is a computer that can run modern web browsers, an internet connection, and a willingness to learn. 
If you are not sure if front-end web development is for you, and/or you want a gentle introduction before starting a longer and more complete course, work through our Getting started with the web module first. 
Getting help 
We have tried to make learning front-end web development as comfortable as possible, but you will probably still get stuck because you don’t understand something, or some code is just not working. 
Don’t panic. We all get stuck, whether we are beginner or professional web developers. 
The Learning and getting help article provides you with a series of tips for looking up information and helping yourself. If you are still stuck, feel free to post a question on our Discourse forums. 
Let’s get started. 
Good luck! 
Time to complete: 1.5–2 hours 
Prerequisites 
Nothing except basic computer literacy. 
How will I know I’m ready to move on? 
There are no assessments in this part of the course. But make sure you don’t skip. It is important to get you set up and ready to do work for exercises later on in the course. 
Guides 
Installing basic software — basic tool setup (15 min read) 
Background on the web and web standards (45 min read) 
Learning and getting help (45 min read) 
Semantics and structure with HTML 
Time to complete: 35–50 hours 
Prerequisites 
Nothing except basic computer literacy, and a basic web development environment. 
How will I know I’m ready to move on? 
The assessments in each module are designed to test your knowledge of the subject matter. Completing the assessments confirms that you are ready to move on to the next module. 
Modules 
Introduction to HTML (15–20 hour read/exercises) 
Multimedia and embedding (15–20 hour read/exercises) 
HTML tables (5–10 hour read/exercises) 
Styling and layout with CSS 
Time to complete: 90–120 hours 
Prerequisites 
It is recommended that you have basic HTML knowledge before starting to learn CSS. 
You should at least study Introduction to HTML first. How will I know I’m ready to move on? 
The assessments in each module are designed to test your knowledge of the subject matter. Completing the assessments confirms that you are ready to move on to the next module. 
Modules 
CSS first steps (10–15 hour read/exercises) 
CSS building blocks (35–45 hour read/exercises) 
CSS styling text (15–20 hour read/exercises) 
CSS layout (30–40 hour read/exercises) 
Additional resources 
CSS layout cookbook 
Interactivity with JavaScript 
Time to complete: 135–185 hours 
Prerequisites 
It is recommended that you have basic HTML knowledge before starting to learn JavaScript. 
You should at least study Introduction to HTML first. How will I know I’m ready to move on? 
The assessments in each module are designed to test your knowledge of the subject matter. Completing the assessments confirms that you are ready to move on to the next module. 
Modules 
JavaScript first steps (30–40 hour read/exercises) 
JavaScript building blocks (25–35 hour read/exercises) 
Introducing JavaScript objects (25–35 hour read/exercises) 
Client-side web APIs (30–40 hour read/exercises) 
Asynchronous JavaScript (25–35 hour read/exercises) 
Web forms — Working with user data 
Time to complete: 40–50 hours 
Prerequisites 
Forms require HTML, CSS, and JavaScript knowledge. 
Given the complexity of working with forms, it is a dedicated topic. 
How will I know I’m ready to move on? 
The assessments in each module are designed to test your knowledge of the subject matter. Completing the assessments confirms that you are ready to move on to the next module. 
Modules 
Web forms (40–50 hours) 
Making the web work for everyone 
Time to complete: 45–55 hours 
Prerequisites 
It is good to know HTML, CSS, and JavaScript before working through this section. Many of the techniques and best practices touch on multiple technologies. 
How will I know I’m ready to move on? 
The assessments in each module are designed to test your knowledge of the subject matter. Completing the assessments confirms that you are ready to move on to the next module. 
Modules 
Cross-browser testing (25–30 hour read/exercises) 
Accessibility (20–25 hour read/exercises) 
Modern tooling 
Time to complete: 55–90 hours 
Prerequisites 
It is good to know HTML, CSS, and JavaScript before working through this section, as the tools discussed work alongside many of these technologies. 
How will I know I’m ready to move on? 
There are no specific assessment articles in this set of modules. The case study tutorials at the end of the second and third modules prepare you for grasping the essentials of modern tooling. 
Modules 
Git and GitHub (5 hour read) 
Understanding client-side web development tools (20–25 hour read) 
Understanding client-side JavaScript frameworks (30-60 hour read/exercises) 

{{LearnSidebar}}{{PreviousMenuNext(“Learn/Getting_started_with_the_web/HTML_basics”, “Learn/Getting_started_with_the_web/JavaScript_basics”, “Learn/Getting_started_with_the_web”)}} 
CSS (Cascading Style Sheets) is the code that styles web content. CSS basics walks through what you need to get started. 
We’ll answer questions like: How do I make text red? 
How do I make content display at a certain location in the (webpage) layout? 
How do I decorate my webpage with background images and colors? 
What is CSS? 
Like HTML, CSS is not a programming language. 
It’s not a markup language either. CSS is a style sheet language. CSS is what you use to selectively style HTML elements. 
For example, this CSS selects paragraph text, setting the color to red: 
p { 
color: red; 
} 
Let’s try it out! 
Using a text editor, paste the three lines of CSS (above) into a new file. Save the file as style.css in a directory named styles. 
To make the code work, we still need to apply this CSS (above) to your HTML document. 
Otherwise, the styling won’t change the appearance of the HTML. 
(If you haven’t been following our project, pause here to read Dealing with files and HTML basics.) 
Open your index.html file. Paste the following line in the head (between the {{HTMLElement(“head”)}} and </head> tags): 
<link href="styles/style.css" rel="stylesheet" /> 
Save index.html and load it in your browser. 
You should see something like this: 
If your paragraph text is red, congratulations! Your CSS is working. 
Anatomy of a CSS ruleset 
Let’s dissect the CSS code for red paragraph text to understand how it works: 
CSS p declaration color red 
The whole structure is called a ruleset. (The term ruleset is often referred to as just rule.) Note the names of the individual parts: 
Selector 
: This is the HTML element name at the start of the ruleset. 
It defines the element(s) to be styled (in this example, {{HTMLElement(“p”)}} elements). 
To style a different element, change the selector. Declaration 
: This is a single rule like color: red;. 
It specifies which of the element’s properties you want to style. Properties 
: These are ways in which you can style an HTML element. 
(In this example, color is a property of the {{htmlelement(“p”)}} elements.) 
In CSS, you choose which properties you want to affect in the rule. 
Property value 
: To the right of the property—after the colon—there is the property value. This chooses one out of many possible appearances for a given property. (For example, there are many color values in addition to red.) 
Note the other important parts of the syntax: 
Apart from the selector, each ruleset must be wrapped in curly braces. ({}) 
Within each declaration, you must use a colon (:) to separate the property from its value or values. 
Within each ruleset, you must use a semicolon (;) to separate each declaration from the next one. 
To modify multiple property values in one ruleset, write them separated by semicolons, like this: 
p { 
color: red; 
width: 500px; 
border: 1px solid black; 
} 
Selecting multiple elements 
You can also select multiple elements and apply a single ruleset to all of them. 
Separate multiple selectors by commas. 
For example: 
p, 
li, 
h1 { 
color: red; 
} 
Different types of selectors 
There are many different types of selectors. 
The examples above use element selectors, which select all elements of a given type. 
But we can make more specific selections as well. 
Here are some of the more common types of selectors: 
Selector name 
What does it select 
Example 
Element selector (sometimes called a tag or type selector) 
All HTML elements of the specified type. 
p 
selects <p> 
ID selector 
The element on the page with the specified ID. 
On a given HTML page, each id value should be unique. 
#my-id 
selects <p id=“my-id”> or <a id=“my-id”> 
Class selector 
The element(s) on the page with the specified class. 
Multiple instances of the same class can appear on a page. 
.my-class 
selects <p class=“my-class”> and <a class=“my-class”> 
Attribute selector 
The element(s) on the page with the specified attribute. 
img[src] 
selects <img src=“myimage.png”> but not <img> 
Pseudo-class selector 
The specified element(s), but only when in the specified state. (For example, when a cursor hovers over a link.) 
a:hover 
selects <a>, but only when the mouse pointer is hovering over the link. 
There are many more selectors to discover. To learn more, see the MDN Selectors guide. 
Fonts and text 
Now that we’ve explored some CSS fundamentals, let’s improve the appearance of the example by adding more rules and information to the style.css file. 
First, find the output from Google Fonts that you previously saved from What will your website look like? . 
Add the {{htmlelement(“link”)}} element somewhere inside your index.html’s head (anywhere between the {{HTMLElement(“head”)}} and </head> tags). 
It looks something like this: 
<link 
href="https://fonts.googleapis.com/css? 
family=Open+Sans" 
rel="stylesheet" /> 
This code links your page to a style sheet that loads the Open Sans font family with your webpage. 
Next, delete the existing rule you have in your style.css file. 
It was a good test, but let’s not continue with lots of red text. 
Add the following lines (shown below), replacing the font-family assignment with your font-family selection from What will your website look like? . 
The property font-family refers to the font(s) you want to use for text. 
This rule defines a global base font and font size for the whole page. 
Since {{HTMLElement(“html”)}} is the parent element of the whole page, all elements inside it inherit the same font-size and font-family. 
html { 
font-size: 10px; /* px means "pixels": the base font size is now 10 pixels high */ 
font-family: "Open Sans", sans-serif; /* this should be the rest of the output you got from Google Fonts */ 
} 
Note: Anything in CSS between /* and */ is a CSS comment. 
The browser ignores comments as it renders the code. 
CSS comments are a way for you to write helpful notes about your code or logic. 
Now let’s set font sizes for elements that will have text inside the HTML body ({{htmlelement(“Heading_Elements”, “h1”)}}, {{htmlelement(“li”)}}, and {{htmlelement(“p”)}}). 
We’ll also center the heading. 
Finally, let’s expand the second ruleset (below) with settings for line height and letter spacing to make body content more readable. 
h1 { 
font-size: 60px; 
text-align: center; 
} 
p, 
li { 
font-size: 16px; 
line-height: 2; 
letter-spacing: 1px; 
} 
Your work-in-progress should look similar to this: A Mozilla logo and some paragraphs. 
A sans-serif font has been set, the font sizes, line height and letter spacing are adjusted, and the main page heading has been centered 
CSS: all about boxes 
Something you’ll notice about writing CSS: a lot of it is about boxes. This includes setting size, color, and position. 
Most HTML elements on your page can be thought of as boxes sitting on top of other boxes. 
A big stack of boxes or crates sat on top of one another 
Photo from https://www.geograph.org.uk/photo/3418115 Copyright © Jim Barton cc-by-sa/2.0 
CSS layout is mostly based on the box model. Each box taking up space on your page has properties like: 
padding, the space around the content. 
In the example below, it is the space around the paragraph text. 
border, the solid line that is just outside the padding. 
margin, the space around the outside of the border. 
Three boxes sat inside one another. 
From outside to in they are labelled margin, border and padding 
In this section we also use: 
width (of an element). 
background-color, the color behind an element’s content and padding. 
color, the color of an element’s content (usually text). 
text-shadow sets a drop shadow on the text inside an element. 
display sets the display mode of an element. (keep reading to learn more) 
To continue, let’s add more CSS. 
Keep adding these new rules at the bottom of style.css. Experiment with changing values to see what happens. 
Changing the page color 
html { 
background-color: #00539f; 
} 
This rule sets a background color for the entire page. 
Change the color code to the color you chose in What will my website look like? 
. 
Styling the body 
body { 
width: 600px; margin: 0 auto; 
padding: 0 20px 20px 20px; 
border: 5px solid black; 
} 
There are several declarations for the {{htmlelement(“body”)}} element. Let’s go through these line-by-line: 
width: 600px; This forces the body to always be 600 pixels wide. 
margin: 0 auto; When you set two values on a property like margin or padding, the first value affects the element’s top and bottom side (setting it to 0 in this case); the second value affects the left and right side. 
(Here, auto is a special value that divides the available horizontal space evenly between left and right). 
You can also use one, two, three, or four values, as documented in Margin Syntax. 
background-color: #FF9500; This sets the element’s background color. 
This project uses a reddish orange for the body background color, as opposed to dark blue for the {{htmlelement(“html”)}} element. 
(Feel free to experiment.) padding: 0 20px 20px 20px; This sets four values for padding. The goal is to put some space around the content. 
In this example, there is no padding on the top of the body, and 20 pixels on the right, bottom and left. 
The values set top, right, bottom, left, in that order. 
As with margin, you can use one, two, three, or four values, as documented in Padding Syntax. 
border: 5px solid black; This sets values for the width, style and color of the border. 
In this case, it’s a five-pixel–wide, solid black border, on all sides of the body. 
Positioning and styling the main page title 
h1 { 
margin: 0; 
padding: 20px 0; 
color: #00539f; 
text-shadow: 3px 3px 1px black; 
} 
You may have noticed there’s a horrible gap at the top of the body. 
That happens because browsers apply default styling to the {{htmlelement(“Heading_Elements”, “h1”)}} element (among others). 
That might seem like a bad idea, but the intent is to provide basic readability for unstyled pages. 
To eliminate the gap, we overwrite the browser’s default styling with the setting margin: 0;. 
Next, we set the heading’s top and bottom padding to 20 pixels. 
Following that, we set the heading text to be the same color as the HTML background color. 
Finally, text-shadow applies a shadow to the text content of the element. 
Its four values are: 
The first pixel value sets the horizontal offset of the shadow from the text: how far it moves across. 
The second pixel value sets the vertical offset of the shadow from the text: how far it moves down. 
The third pixel value sets the blur radius of the shadow. 
A larger value produces a more fuzzy-looking shadow. 
The fourth value sets the base color of the shadow. 
Try experimenting with different values to see how it changes the appearance. 
Centering the image 
img { 
display: block; 
margin: 0 auto; 
} 
Next, we center the image to make it look better. 
We could use the margin: 0 auto trick again as we did for the body. But there are differences that require an additional setting to make the CSS work. 
The {{htmlelement(“body”)}} is a block element, meaning it takes up space on the page. 
The margin applied to a block element will be respected by other elements on the page. 
In contrast, images are inline elements, for the auto margin trick to work on this image, we must give it block-level behavior using display: block;. 
Note: The instructions above assume that you’re using an image smaller than the width set on the body. (600 pixels) If your image is larger, it will overflow the body, spilling into the rest of the page. 
To fix this, you can either: 1) reduce the image width using a graphics editor, or 2) use CSS to size the image by setting the {{cssxref(“width”)}} property on the <img> element with a smaller value. 
Note: Don’t be too concerned if you don’t completely understand display: block; or the differences between a block element and an inline element. It will make more sense as you continue your study of CSS. 
You can find more information about different display values on MDN’s display reference page. 
Conclusion 
If you followed all the instructions in this article, you should have a page that looks similar to this one: 
A Mozilla logo, centered, and a header and paragraphs. 
It now looks nicely styled, with a blue background for the whole page and orange background for the centered main content strip. 
(You can view our version here.) 
If you get stuck, you can always compare your work with our finished example code on GitHub. 
In this exercise, we have just scratched the surface of CSS. To go further, see Learning to style HTML using CSS. 
{{PreviousMenuNext(“Learn/Getting_started_with_the_web/HTML_basics”, “Learn/Getting_started_with_the_web/JavaScript_basics”, “Learn/Getting_started_with_the_web”)}} 

{{LearnSidebar}}{{PreviousMenuNext(“Learn/Getting_started_with_the_web/What_will_your_website_look_like”, “Learn/Getting_started_with_the_web/HTML_basics”, “Learn/Getting_started_with_the_web”)}} 
A website consists of many files: text content, code, stylesheets, media content, and so on. 
When you’re building a website, you need to assemble these files into a sensible structure on your local computer, make sure they can talk to one another, and get all your content looking right before you eventually upload them to a server. Dealing with files discusses some issues you should be aware of so you can set up a sensible file structure for your website. 
Where should your website live on your computer? 
When you are working on a website locally on your computer, you should keep all the related files in a single folder that mirrors the published website’s file structure on the server. 
This folder can live anywhere you like, but you should put it somewhere where you can easily find it, maybe on your Desktop, in your Home folder, or at the root of your hard drive. 
Choose a place to store your website projects. 
Inside your chosen place, create a new folder called web-projects (or similar). 
This is where all your website projects will live. 
Inside this first folder, create another folder to store your first website in. 
Call it test-site (or something more imaginative). 
An aside on casing and spacing 
You’ll notice that throughout this article, we ask you to name folders and files completely in lowercase with no spaces. 
This is because: 
Many computers, particularly web servers, are case-sensitive. 
So for example, if you put an image on your website at test-site/MyImage.jpg and then in a different file you try to invoke the image as test-site/myimage.jpg, it may not work. 

{{LearnSidebar}}{{PreviousMenu(“Learn/Getting_started_with_the_web/Publishing_your_website”, “Learn/Getting_started_with_the_web”)}} 
How the web works provides a simplified view of what happens when you view a webpage in a web browser on your computer or phone. 
This theory is not essential to writing web code in the short term, but before long you’ll really start to benefit from understanding what’s happening in the background. 
Clients and servers 
Computers connected to the internet are called clients and servers. 
A simplified diagram of how they interact might look like this: 
Two circles representing client and server. 
An arrow labelled request is going from client to server, and an arrow labelled responses is going from server to client 
Clients are the typical web user’s internet-connected devices (for example, your computer connected to your Wi-Fi, or your phone connected to your mobile network) and web-accessing software available on those devices (usually a web browser like Firefox or Chrome). 
Servers are computers that store webpages, sites, or apps. 
When a client device wants to access a webpage, a copy of the webpage is downloaded from the server onto the client machine to be displayed in the user’s web browser. 
The client and server we’ve described above don’t tell the whole story. 
There are many other parts involved, and we’ll describe them below. 
For now, let’s imagine that the web is a road. 
On one end of the road is the client, which is like your house. 
On the other end of the road is the server, which is a shop you want to buy something from. 
A black-and-white photo of a person crossing a road at a crosswalk 
In addition to the client and the server, we also need to say hello to: 
Your internet connection: Allows you to send and receive data on the web. 
It’s basically like the street between your house and the shop. 
TCP/IP: Transmission Control Protocol and Internet Protocol are communication protocols that define how data should travel across the internet. 
This is like the transport mechanisms that let you place an order, go to the shop, and buy your goods. 
In our example, this is like a car or a bike (or however else you might get around). 
DNS: Domain Name System is like an address book for websites. 
When you type a web address in your browser, the browser looks at the DNS to find the website’s IP address before it can retrieve the website. 
The browser needs to find out which server the website lives on, so it can send HTTP messages to the right place (see below). 
This is like looking up the address of the shop so you can access it. 
HTTP: Hypertext Transfer Protocol is an application {{Glossary(“Protocol”, “protocol”)}} that defines a language for clients and servers to speak to each other. 
This is like the language you use to order your goods. 
Component files: A website is made up of many different files, which are like the different parts of the goods you buy from the shop. 
These files come in two main types: 
Code files: Websites are built primarily from HTML, CSS, and JavaScript, though you’ll meet other technologies a bit later. 
Assets: This is a collective name for all the other stuff that makes up a website, such as images, music, video, Word documents, and PDFs. 
So what happens, exactly? 
When you type a web address into your browser (for our analogy that’s like walking to the shop): 
The browser goes to the DNS server, and finds the real address of the server that the website lives on (you find the address of the shop). 
The browser sends an HTTP request message to the server, asking it to send a copy of the website to the client (you go to the shop and order your goods). 
This message, and all other data sent between the client and the server, is sent across your internet connection using TCP/IP. 
If the server approves the client’s request, the server sends the client a “200 OK” message, which means “Of course you can look at that website! Here it is”, and then starts sending the website’s files to the browser as a series of small chunks called data packets (the shop gives you your goods, and you bring them back to your house). 
The browser assembles the small chunks into a complete web page and displays it to you (the goods arrive at your door — new shiny stuff, awesome!). 
Order in which component files are parsed 
When browsers send requests to servers for HTML files, those HTML files often contain {{htmlelement(“link”)}} elements referencing external CSS stylesheets and {{htmlelement(“script”)}} elements referencing external JavaScript scripts. 
It’s important to know the order in which those files are parsed by the browser as the browser loads the page: 
The browser parses the HTML file first, and that leads to the browser recognizing any <link>-element references to external CSS stylesheets and any <script>-element references to scripts. 
As the browser parses the HTML, it sends requests back to the server for any CSS files it has found from <link> elements, and any JavaScript files it has found from <script> elements, and from those, then parses the CSS and JavaScript. 
The browser generates an in-memory DOM tree from the parsed HTML, generates an in-memory CSSOM structure from the parsed CSS, and compiles and executes the parsed JavaScript. 
As the browser builds the DOM tree and applies the styles from the CSSOM tree and executes the JavaScript, a visual representation of the page is painted to the screen, and the user sees the page content and can begin to interact with it. 
DNS explained 
Real web addresses aren’t the nice, memorable strings you type into your address bar to find your favorite websites. 
They are special numbers that look like this: 192.0.2.172. 
This is called an {{Glossary(“IP Address”, “IP address”)}}, and it represents a unique location on the web. 
However, it’s not very easy to remember, is it? 
That’s why the Domain Name System was invented. 
This system uses special servers that match up a web address you type into your browser (like “mozilla.org”) to the website’s real (IP) address. 
Websites can be reached directly via their IP addresses. 
You can use a DNS lookup tool to find the IP address of a website. 
Packets explained 
Earlier we used the term “packets” to describe the format in which the data is sent from server to client. 
What do we mean here? 
Basically, when data is sent across the web, it is sent in thousands of small chunks. 
There are multiple reasons why data is sent in small packets. 
They are sometimes dropped or corrupted, and it’s easier to replace small chunks when this happens. Additionally, the packets can be routed along different paths, making the exchange faster and allowing many different users to download the same website at the same time. 
See also 
How the Internet works 
HTTP — an Application-Level Protocol 
HTTP: Let’s GET It On! 

{{LearnSidebar}}{{PreviousMenuNext(“Learn/Getting_started_with_the_web/Dealing_with_files”, “Learn/Getting_started_with_the_web/CSS_basics”, “Learn/Getting_started_with_the_web”)}} 
HTML (HyperText Markup Language) is the code that is used to structure a web page and its content. 
For example, content could be structured within a set of paragraphs, a list of bulleted points, or using images and data tables. 
As the title suggests, this article will give you a basic understanding of HTML and its functions. 
So what is HTML? 
HTML is a markup language that defines the structure of your content. 
HTML consists of a series of {{Glossary(“element”, “elements”)}}, which you use to enclose, or wrap, different parts of the content to make it appear a certain way, or act a certain way. 
The enclosing {{Glossary(“tag”, “tags”)}} can make a word or image hyperlink to somewhere else, can italicize words, can make the font bigger or smaller, and so on. 
For example, take the following line of content: 
My cat is very grumpy 
If we wanted the line to stand by itself, we could specify that it is a paragraph by enclosing it in paragraph tags: 
<p>My cat is very grumpy</p> 
Anatomy of an HTML element 
Let’s explore this paragraph element a bit further. 
paragraph element including opening tag, content reading ‘my cat is very grumpy’, and a closing tag 
The main parts of our element are as follows: 
The opening tag: This consists of the name of the element (in this case, p), wrapped in opening and closing angle brackets. 
This states where the element begins or starts to take effect — in this case where the paragraph begins. 
The closing tag: This is the same as the opening tag, except that it includes a forward slash before the element name. 
This states where the element ends — in this case where the paragraph ends. 
Failing to add a closing tag is one of the standard beginner errors and can lead to strange results. 
The content: This is the content of the element, which in this case, is just text. 
The element: The opening tag, the closing tag, and the content together comprise the element. 
Paragraph opening tag with a class attribute highlighted: class=editor-note 
Attributes contain extra information about the element that you don’t want to appear in the actual content. 
Here, class is the attribute name and editor-note is the attribute value. 
The class attribute allows you to give the element a non-unique identifier that can be used to target it (and any other elements with the same class value) with style information and other things. 
Attributes that set a value always have: 
A space between it and the element name (or the previous attribute, if the element already has one or more attributes). 
The attribute name followed by an equal sign. 
The attribute value wrapped by opening and closing quotation marks. 
Note: Simple attribute values that don’t contain {{Glossary(“ASCII”)}} whitespace (or any of the characters " ' ` = < >) can remain unquoted, but it is recommended that you quote all attribute values, as it makes the code more consistent and understandable. 
Nesting elements 
You can put elements inside other elements too — this is called nesting. 
If we wanted to state that our cat is very grumpy, we could wrap the word “very” in a {{htmlelement(“strong”)}} element, which means that the word is to be strongly emphasized: 
<p>My cat is <strong>very</strong> grumpy.</p> 
You do however need to make sure that your elements are properly nested. In the example above, we opened the {{htmlelement(“p”)}} element first, then the {{htmlelement(“strong”)}} element; therefore, we have to close the {{htmlelement(“strong”)}} element first, then the {{htmlelement(“p”)}} element. 
The following is incorrect: 
html-nolint example-bad <p>My cat is <strong>very grumpy.</p></strong> 
The elements have to open and close correctly so that they are clearly inside or outside one another. 
If they overlap as shown above, then your web browser will try to make the best guess at what you were trying to say, which can lead to unexpected results. 
So don’t do it! 
Void elements 
Some elements have no content and are called {{glossary(“void element”, “void elements”)}}. 
Take the {{htmlelement(“img”)}} element that we already have in our HTML page: 
<img src="images/firefox-icon.png" alt="My test image" /> 
This contains two attributes, but there is no closing </img> tag and no inner content. 
This is because an image element doesn’t wrap content to affect it. Its purpose is to embed an image in the HTML page in the place it appears. 
Anatomy of an HTML document 
That wraps up the basics of individual HTML elements, but they aren’t handy on their own. 
Now we’ll look at how individual elements are combined to form an entire HTML page. 
Let’s revisit the code we put into our index.html example (which we first met in the Dealing with files article): 
<! 
doctype html> 
<html lang="en-US"> 
<head> 
<meta charset="utf-8" /> 
<meta name="viewport" content="width=device-width" /> 
<title>My test page</title> 
</head> 
<body> 
<img src="images/firefox-icon.png" alt="My test image" /> 
</body> 
</html> 
Here, we have the following: 
<! 
DOCTYPE html> — doctype. 
It is a required preamble. 
In the mists of time, when HTML was young (around 1991/92), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. 
However, these days, they don’t do much and are basically just needed to make sure your document behaves correctly. 
That’s all you need to know for now. 
<html></html> — the {{htmlelement(“html”)}} element. 
This element wraps all the content on the entire page and is sometimes known as the root element. 
It also includes the lang attribute, setting the primary language of the document. 
<head></head> — the {{htmlelement(“head”)}} element. 
This element acts as a container for all the stuff you want to include on the HTML page that isn’t the content you are showing to your page’s viewers. 
This includes things like {{Glossary(“keyword”, “keywords”)}} and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more. 
<meta charset="utf-8"> — This element sets the character set your document should use to UTF-8 which includes most characters from the vast majority of written languages. 
Essentially, it can now handle any textual content you might put on it. 
There is no reason not to set this, and it can help avoid some problems later on. 
<meta name="viewport" content="width=device-width"> — This viewport element ensures the page renders at the width of viewport, preventing mobile browsers from rendering pages wider than the viewport and then shrinking them down. 
<title></title> — the {{htmlelement(“title”)}} element. 
This sets the title of your page, which is the title that appears in the browser tab the page is loaded in. It is also used to describe the page when you bookmark/favorite it. 
<body></body> — the {{htmlelement(“body”)}} element. 
This contains all the content that you want to show to web users when they visit your page, whether that’s text, images, videos, games, playable audio tracks, or whatever else. 
Images 
Let’s turn our attention to the {{htmlelement(“img”)}} element again: 
<img src="images/firefox-icon.png" alt="My test image" /> 
As we said before, it embeds an image into our page in the position it appears. It does this via the src (source) attribute, which contains the path to our image file. 
We have also included an alt (alternative) attribute. In the alt attribute, you specify descriptive text for users who cannot see the image, possibly because of the following reasons: 
They are visually impaired. 
Users with significant visual impairments often use tools called screen readers to read out the alt text to them. 
Something has gone wrong causing the image not to display. 
For example, try deliberately changing the path inside your src attribute to make it incorrect. 
If you save and reload the page, you should see something like this in place of the image: 
The words: my test image 
The keywords for alt text are “descriptive text”. 
In this example, our current text of “My test image” is no good at all. 
A much better alternative for our Firefox logo would be “The Firefox logo: a flaming fox surrounding the Earth.” 
Try coming up with some better alt text for your image now. 
Note: Find out more about accessibility in our accessibility learning module. 
Marking up text 
This section will cover some essential HTML elements you’ll use for marking up the text. 
Headings 
Heading elements allow you to specify that certain parts of your content are headings — or subheadings. 
In the same way that a book has the main title, chapter titles, and subtitles, an HTML document can too. 
HTML contains 6 heading levels, {{htmlelement(“Heading_Elements”, “<h1> - <h6>”)}}, although you’ll commonly only use 3 to 4 at most: <!-- 4 heading levels: --> 
<h1>My main title</h1> 
<h2>My top level heading</h2> 
<h3>My subheading</h3> 
<h4>My sub-subheading</h4> 
Now try adding a suitable title to your HTML page just above your {{htmlelement(“img”)}} element. 
Note: You’ll see that your heading level 1 has an implicit style. 
Don’t use heading elements to make text bigger or bold, because they are used for accessibility and other reasons such as SEO. 
Try to create a meaningful sequence of headings on your pages, without skipping levels. 
As explained above, {{htmlelement(“p”)}} elements are for containing paragraphs of text; you’ll use these frequently when marking up regular text content: 
<p>This is a single paragraph</p> 
Add your sample text (you should have it from What will your website look like? ) into one or a few paragraphs, placed directly below your {{htmlelement(“img”)}} element. 
Lists 
A lot of the web’s content is lists and HTML has special elements for these. 
Marking up lists always consists of at least 2 elements. 
The most common list types are ordered and unordered lists: 
Unordered lists are for lists where the order of the items doesn’t matter, such as a shopping list. 
These are wrapped in a {{htmlelement(“ul”)}} element. 
Ordered lists are for lists where the order of the items does matter, such as a recipe. 
These are wrapped in an {{htmlelement(“ol”)}} element. 
Each item inside the lists is put inside an {{htmlelement(“li”)}} (list item) element. 
For example, if we wanted to turn the part of the following paragraph fragment into a list 
<p> 
At Mozilla, we're a global community of technologists, thinkers, and builders 
working together… 
</p> 
We could modify the markup to this 
<p>At Mozilla, we're a global community of</p> 
<ul> 
<li>technologists</li> 
<li>thinkers</li> 
<li>builders</li> 
</ul> 
<p>working together…</p> 
Try adding an ordered or unordered list to your example page. 
Links 
Links are very important — they are what makes the web a web! 
To add a link, we need to use a simple element — {{htmlelement(“a”)}} — “a” being the short form for “anchor”. 
To make text within your paragraph into a link, follow these steps: 
Choose some text. 
We chose the text “Mozilla Manifesto”. 
Wrap the text in an {{htmlelement(“a”)}} element, as shown below: 
<a>Mozilla Manifesto</a> 
Give the {{htmlelement(“a”)}} element an href attribute, as shown below: 
<a href="">Mozilla Manifesto</a> 
Fill in the value of this attribute with the web address that you want the link to: 
<a href="https://www.mozilla.org/en-US/about/manifesto/"> 
Mozilla Manifesto 
</a> 
You might get unexpected results if you omit the https:// or http:// part, called the protocol, at the beginning of the web address. 
After making a link, click it to make sure it is sending you where you wanted it to. 
Note: href might appear like a rather obscure choice for an attribute name at first. If you are having trouble remembering it, remember that it stands for hypertext reference. 
Add a link to your page now, if you haven’t already done so. 
Conclusion 
If you have followed all the instructions in this article, you should end up with a page that looks like the one below (you can also view it here): 
If you get stuck, you can always compare your work with our finished example code on GitHub. 
Here, we have only really scratched the surface of HTML. 
To find out more, go to our Learning HTML topic. 
{{PreviousMenuNext(“Learn/Getting_started_with_the_web/Dealing_with_files”, “Learn/Getting_started_with_the_web/CSS_basics”, “Learn/Getting_started_with_the_web”)}} 

{{LearnSidebar}} 
Getting started with the web is a concise series introducing you to the practicalities of web development. 
You’ll set up the tools you need to construct a simple webpage and publish your own simple code. 
The story of your first website 
It’s a lot of work to create a professional website, so if you’re new to web development, we encourage you to start small. 
You won’t build another Facebook right away, but it’s not hard to make your own simple website online, so we’ll start there. Guides 
By working through the articles listed below, you will go from nothing to getting your first webpage online. 
Let’s begin our journey! 
Installing basic software 
: When it comes to tools for building a website, there’s a lot to pick from. 
If you’re just starting, you might be confused by the array of code editors, frameworks, and testing tools out there. 
In this article, we will show you step-by-step how to install the software you need to begin some basic web development. 
What will your website look like? 

{{LearnSidebar}}{{NextMenu(“Learn/Getting_started_with_the_web/What_will_your_website_look_like”, “Learn/Getting_started_with_the_web”)}} 
In Installing basic software, we show you what tools you need to do simple web development and how to install them properly. 
What tools do I actually need, right now? 
In this article, we’ll set you up with the bare minimum — a text editor and some modern web browsers. 
Installing a text editor 
You probably already have a basic text editor on your computer. 
By default Windows includes Notepad and macOS comes with TextEdit. 
Linux distros vary; the Ubuntu 22.04 LTS release comes with GNOME Text Editor by default. 
For web development, you can probably do better than Notepad or TextEdit. 
We recommend starting with Visual Studio Code, which is a free editor, that offers live previews and code hints. 
Installing modern web browsers 
For now, we’ll install a couple of desktop web browsers to test our code in. 
Choose your operating system below and click the relevant links to download installers for your favorite browsers: 
Linux: Firefox, Chrome, Opera, Brave. 
Windows: Firefox, Chrome, Opera, Microsoft Edge, Brave (Windows 10 comes with Edge by default; otherwise, you should install an alternative browser). 
macOS: Firefox, Chrome, Opera, Safari, Brave (macOS and iOS come with Safari by default). 
Before going on, you should install at least two of these browsers and have them ready for testing. 
Installing a local web server 
Some examples will need to be run by a web server to work successfully. 
You can find out how to do this in How do you set up a local testing server? 

{{LearnSidebar}}{{PreviousMenuNext(“Learn/Getting_started_with_the_web/CSS_basics”, “Learn/Getting_started_with_the_web/Publishing_your_website”, “Learn/Getting_started_with_the_web”)}} 
JavaScript is a programming language that adds interactivity to your website. This happens in games, in the behavior of responses when buttons are pressed or with data entry on forms; with dynamic styling; with animation, etc. 
This article helps you get started with JavaScript and furthers your understanding of what is possible. 
What is JavaScript? 
{{Glossary(“JavaScript”)}} is a powerful programming language that can add interactivity to a website. 
It was invented by Brendan Eich. 
JavaScript is versatile and beginner-friendly. With more experience, you’ll be able to create games, animated 2D and 3D graphics, comprehensive database-driven apps, and much more! 
JavaScript itself is relatively compact, yet very flexible. 
Developers have written a variety of tools on top of the core JavaScript language, unlocking a vast amount of functionality with minimum effort. 
These include: 
Browser Application Programming Interfaces ({{Glossary(“API”,“APIs”)}}) built into web browsers, providing functionality such as dynamically creating HTML and setting CSS styles; collecting and manipulating a video stream from a user’s webcam, or generating 3D graphics and audio samples. 
Third-party APIs that allow developers to incorporate functionality in sites from other content providers, such as Twitter or Facebook. 
Third-party frameworks and libraries that you can apply to HTML to accelerate the work of building sites and applications. 
It’s outside the scope of this article—as a light introduction to JavaScript—to present the details of how the core JavaScript language is different from the tools listed above. 
You can learn more in MDN’s JavaScript learning area, as well as in other parts of MDN. 
The section below introduces some aspects of the core language and offers an opportunity to play with a few browser API features too. Have fun! 
A “Hello world!” 
example 
JavaScript is one of the most popular modern web technologies! As your JavaScript skills grow, your websites will enter a new dimension of power and creativity. 
However, getting comfortable with JavaScript is more challenging than getting comfortable with HTML and CSS. 
You may have to start small, and progress gradually. To begin, let’s examine how to add JavaScript to your page for creating a Hello world! example. (Hello world! 
is the standard for introductory programming examples.) 
Warning: If you haven’t been following along with the rest of our course, download this example code and use it as a starting point. 
Go to your test site and create a new folder named scripts. 
Within the scripts folder, create a new text document called main.js, and save it. 
In your index.html file, enter this code on a new line, just before the closing </body> tag: 
<script src="scripts/main.js"></script> 
This is doing the same job as the {{htmlelement(“link”)}} element for CSS. It applies the JavaScript to the page, so it can have an effect on the HTML (along with the CSS, and anything else on the page). 
Add this code to the main.js file: 
const myHeading = document.querySelector("h1"); 
myHeading.textContent = "Hello world!" 
; 
Make sure the HTML and JavaScript files are saved. Then load index.html in your browser. 
You should see something like this: 
Note: The reason the instructions (above) place the {{htmlelement(“script”)}} element near the bottom of the HTML file is that the browser reads code in the order it appears in the file. 
If the JavaScript loads first and it is supposed to affect the HTML that hasn’t loaded yet, there could be problems. 
Placing JavaScript near the bottom of an HTML page is one way to accommodate this dependency. 
What happened? 
The heading text changed to Hello world! using JavaScript. 
You did this by using a function called {{domxref(“Document.querySelector”, “querySelector()”)}} to grab a reference to your heading, and then store it in a variable called myHeading. 
This is similar to what we did using CSS selectors. When you want to do something to an element, you need to select it first. 
Following that, the code set the value of the myHeading variable’s {{domxref(“Node.textContent”, “textContent”)}} property (which represents the content of the heading) to Hello world! . 
Note: Both of the features you used in this exercise are parts of the Document Object Model (DOM) API, which has the capability to manipulate documents. 
Language basics crash course 
To give you a better understanding of how JavaScript works, let’s explain some of the core features of the language. 
It’s worth noting that these features are common to all programming languages. If you master these fundamentals, you have a head start on coding in other languages too! 
Warning: In this article, try entering the example code lines into your JavaScript console to see what happens. 
For more details on JavaScript consoles, see Discover browser developer tools. 
Variables 
{{Glossary(“Variable”, “Variables”)}} are containers that store values. 
You start by declaring a variable with the let keyword, followed by the name you give to the variable: 
let myVariable; 
A semicolon at the end of a line indicates where a statement ends. It is only required when you need to separate statements on a single line. 
However, some people believe it’s good practice to have semicolons at the end of each statement. 
There are other rules for when you should and shouldn’t use semicolons. For more details, see Your Guide to Semicolons in JavaScript. 
You can name a variable nearly anything, but there are some restrictions. (See this section about naming rules.) 
If you are unsure, you can check your variable name to see if it’s valid. 
JavaScript is case sensitive. This means myVariable is not the same as myvariable. 
If you have problems in your code, check the case! 
After declaring a variable, you can give it a value: myVariable = "Bob"; 
Also, you can do both these operations on the same line: 
let myVariable = "Bob"; 
After assigning a value to a variable, you can change it later in the code: 
let myVariable = "Bob"; 
Note that variables may hold values that have different data types: 
Variable 
You can write comments in JavaScript just as you can in CSS: /* 
let myVariable = 3; !( 
let myVariable = 3; myVariable ! == 3; 
If you enter 35 + 25 you’ll get the total of the two numbers. 
Events 
} else { 
} else { 
function setUserName() { 
If it does have a value (if the above statement is not true), then store the value in localStorage and set it as the heading’s text. Conclusion 

{{LearnSidebar}}{{PreviousMenuNext(“Learn/Getting_started_with_the_web/JavaScript_basics”, “Learn/Getting_started_with_the_web/How_the_Web_works”, “Learn/Getting_started_with_the_web”)}} 
Once you finish writing the code and organizing the files that make up your website, you need to put it all online so people can find it. 
This article explains how to get your simple sample code online with little effort. 
What are the options? 
Publishing a website is a complex topic because there are many ways to go about it. This article doesn’t attempt to document all the possible methods. 
Instead, it explains the advantages and disadvantages of three approaches that are practical for beginners. Then it steps through one method that can work right away for many readers. 
Getting hosting and a domain name 
To have more control over content and website appearance, most people choose to buy web hosting and a domain name: 
Web hosting is rented file space on a hosting company’s web server. 
You put website files on the web server. The web server provides website content to website visitors. 
A domain name is the unique address where people find your website, such as https://www.mozilla.org or https://www.bbc.co.uk. 
You can rent your domain name for as many years as you want from a domain registrar. 
Many professional websites go online this way. 
In addition, you will need a {{Glossary(“FTP”, “File Transfer Protocol (FTP)”)}} program (see How much does it cost: software for more details) to actually transfer the website files over to the server. 
FTP programs vary widely, but generally, you have to connect to your web server using details provided by your hosting company (typically username, password, hostname). Then the program shows you your local files and the web server’s files in two windows, and provides a way for you to transfer files back and forth. 
An FTP client showing all files and folders of a website and uploading them to a server 
Tips for finding hosting and domains 
MDN does not promote specific commercial hosting companies or domain name registrars. 
To find hosting companies and registrars, just search for “web hosting” and “domain names”. 
All registrars will have a feature to allow you to check if the domain name you want is available. 
Your home or office {{Glossary(“ISP”, “internet service provider”)}} may provide some limited hosting for a small website. 
The available feature set will be limited, but it might be perfect for your first experiments. 
There are also free services available like Neocities, Google Sites, Blogger, and WordPress. 
Sometimes you get what you pay for, but sometimes these resources are good enough for your initial experiments. 
Many companies provide hosting and domains. 
Using an online tool like GitHub or Google App Engine 
Some tools let you publish your website online: 
GitHub is a “social coding” site. 
It allows you to upload code repositories for storage in the Git version control system. You can then collaborate on code projects, and the system is open-source by default, meaning that anyone in the world can find your GitHub code, use it, learn from it, and improve on it. 
GitHub has a very useful feature called GitHub Pages, which allows you to expose website code live on the web. 
Google App Engine is a powerful platform that lets you build and run applications on Google’s infrastructure — whether you need to build a multi-tiered web application from scratch or host a static website. 
See How do you host your website on Google App Engine? 
for more information. 
These options are usually free, but you may outgrow the limited feature-set. 
Using a web-based IDE such as CodePen 
There are a number of web apps that emulate a website development environment, allowing you to enter HTML, CSS and JavaScript, and then display the result of that code as a website — all in one browser tab. 
Generally speaking, these tools are relatively easy, great for learning, good for sharing code (for example, if you want to share a technique with or ask for debugging help from colleagues in a different office), and free (for basic features). 
They host your rendered page at a unique web address. However, the features are limited, and these apps usually don’t provide hosting space for assets (like images). 
Try playing with some of these examples to find out which one works best for you: 
JSFiddle 
Glitch 
JS Bin 
CodePen 
Publishing via GitHub 
Now let’s examine how to easily publish your site via GitHub Pages. 
First of all, sign up for GitHub and verify your email address. 
Next, you need to create a repository to store files. 
On this page, in the Repository name box, enter username.github.io, where username is your username. 
For example, our friend Bob Smith would enter bobsmith.github.io. 
Check the “Initialize this repository with a README” box. Then click Create repository. 
Drag and drop the content of your website folder into your repository. Then click Commit changes. 
Note: Make sure your folder has an index.html file. 
Navigate your browser to username.github.io to see your website online. 
For example, for the username chrisdavidmills, go to chrisdavidmills.github.io. 
Note: It may take a few minutes for your website to go live. 
If your website does not display immediately, wait a few minutes. Try again. 
To learn more, see GitHub Pages Help. 
Further reading 
Understanding domain names 

{{learnsidebar}} 
This article provides some useful background on the Web — how it came about, what web standard technologies are, how they work together, why “web developer” is a great career to choose, and what kinds of best practices you’ll learn about through the course. 
Brief history of the web 
We’ll keep this very brief, as there are many (more) detailed accounts of the web’s history out there, which we’ll link to later on (also try searching for “history of the web” in your favorite search engine and see what you get, if you are interested in more detail.) 
In the late 1960s, the US military developed a communication network called ARPANET. 
This can be considered a forerunner of the Web, as it worked on packet switching, and featured the first implementation of the TCP/IP protocol suite. 
These two technologies form the basis of the infrastructure that the internet is built on. 
In 1980, Tim Berners-Lee (often referred to as TimBL) wrote a notebook program called ENQUIRE, which featured the concept of links between different nodes. 
Sound familiar? 
Fast forward to 1989, and TimBL wrote Information Management: A Proposal and HyperText at CERN; these two publications together provided the background for how the web would work. 
They received a fair amount of interest, enough to convince TimBL’s bosses to allow him to go ahead and create a global hypertext system. 
By late 1990, TimBL had created all the things needed to run the first version of the web — HTTP, HTML, the first web browser, which was called WorldWideWeb, an HTTP server, and some web pages to look at. 
In the next few years that followed, the web exploded, with multiple browsers being released, thousands of web servers being set up, and millions of web pages being created. 
OK, that’s a very simple summary of what happened, but we did promise you a brief summary. 
One last significant data point to share is that in 1994, TimBL founded the World Wide Web Consortium (W3C), an organization that brings together representatives from many different technology companies to work together on the creation of web technology specifications. 
After that other technologies followed such as CSS and JavaScript, and the web started to look more like the web we know today. 
Web standards 
Web standards are the technologies we use to build websites. 
These standards exist as long technical documents called specifications, which detail exactly how the technology should work. 
These documents are not very useful for learning how to use the technologies they describe (this is why we have sites like MDN Web Docs), but instead are intended to be used by software engineers to implement these technologies (usually in web browsers). 
For example, the HTML Living Standard describes exactly how HTML (all the HTML elements, and their associated APIs, and other surrounding technologies) should be implemented. 
Web standards are created by standards bodies — institutions that invite groups of people from different technology companies to come together and agree on how the technologies should work in the best way to fulfill all of their use cases. 
The W3C is the best known web standards body, but there are others such as the WHATWG (who maintain the living standards for the HTML language), ECMA (who publish the standard for ECMAScript, which JavaScript is based on), Khronos (who publish technologies for 3D graphics, such as WebGL), and others. 
“Open” standards 
One of the key aspects of web standards, which TimBL and the W3C agreed on from the start, is that the web (and web technologies) should be free to both contribute and use, and not encumbered by patents/licensing. 
Therefore anyone can write the code to build a website for free, and anyone can contribute to the standards creation process, where the specs are written. 
Because web technologies are created openly, in collaboration between many different companies, it means that no one company gets to control them, which is a really good thing. 
You wouldn’t want a single company suddenly deciding to put the entire web behind a paywall, or releasing a new version of HTML that everyone has to buy to continue making websites, or worse still, just deciding they aren’t interested any more and just turning it off. 
This allows the web to remain a freely-available public resource. 
Don’t break the web 

{{LearnSidebar}}{{PreviousMenuNext(“Learn/Getting_started_with_the_web/Installing_basic_software”, “Learn/Getting_started_with_the_web/Dealing_with_files”, “Learn/Getting_started_with_the_web”)}} 
What will your website look like? discusses the planning and design work you have to do for your website before writing code, including “What information does my website offer?”, “What fonts and colors do I want?”, and “What does my site do?” 
First things first: planning 
Before doing anything, you need some ideas. 
What should your website actually do? 
A website can do basically anything, but, for your first try, you should keep things simple. 
We’ll start by creating a simple webpage with a heading, an image, and a few paragraphs. 
To begin, you’ll need to answer these questions: 
What is your website about? 
Do you like dogs, New York, or Pac-Man? 
What information are you presenting on the subject? 
Write a title and a few paragraphs and think of an image you’d like to show on your page. 
What does your website look like, in simple high-level terms? 
What’s the background color? What kind of font is appropriate: formal, cartoony, bold and loud, subtle? 
Note: Complex projects need detailed guidelines that go into all the details of colors, fonts, spacing between items on a page, appropriate writing style, and so on. 
This is sometimes called a design guide, design system, or brand book, and you can see an example at the Firefox Photon Design System. 
Sketching out your design 
Next, grab pen and paper and sketch out roughly how you want your site to look. 
For your first simple webpage, there’s not much to sketch out, but you should get in the habit of doing this now. 
It really helps — you don’t have to be Van Gogh! 
A rough drawing and sketch of a website on paper 
Note: Even on real, complex websites, the design teams usually start out with rough sketches on paper and later on build digital mockups using a graphics editor or web technologies. 
Web teams often include both a graphic designer and a {{Glossary(“UX”, “user experience”)}} (UX) designer. 
Graphic designers put together the visuals of the website. 
UX designers have a somewhat more abstract role in addressing how users will experience and interact with the website. 
Choosing your assets 
At this point, it’s good to start putting together the content that will eventually appear on your webpage. 
Text 
You should still have your paragraphs and title from earlier. 
Keep these close by. 
Theme color 
To choose a color, go to the Color Picker and find a color you like. 
When you click on a color, you’ll see a strange six-character code like #660066. 
That’s called a hex code (short for hexadecimal), and represents your color. 
Copy the code down somewhere safe for now. 
Color-Picker-Tool on MDN Docs website with RGB, HSL, and HEX colors 
Images 
To choose an image, go to Google Images and search for something suitable. 
When you find the image you want, click on the image to get an enlarged view of it. 
Right-click the image (Ctrl + click on a Mac), choose Save Image As…, and choose a safe place to save your image. 
Alternatively, copy the image’s web address from your browser’s address bar for later use. 
Search results for a search term on Google Images 
Note that most images on the web, including in Google Images, are copyrighted. 
To reduce your likelihood of violating copyright, you can use Google’s license filter. 
Click on the Tools button, then on the resulting Usage rights option that appears below. 
You should choose the option Creative Commons licenses. 
Filtered search results to get images of Creative Commons Licenses on Google Images 
Font 
As with images, many fonts are protected by licenses, meaning you cannot freely use them in your site. Google Fonts is a web service owned by Google that provides access to many fonts. 
Once you have found a font, there are two main ways of using it: 
Add a reference in your code to load the font from Google’s servers. 
Download the font file to your own system, host the font yourself, and use your hosted copy in your website’s code. 
Note: Serving fonts hosted on Google Fonts may be incompatible with the European Union’s data privacy regulation GDPR as the font service exposes the user’s IP address. 
If this is a potential problem for you, choose the second option. 
Alternatively you can use safe web fonts such as Arial, Times New Roman, or Courier New. 
{{PreviousMenuNext(“Learn/Getting_started_with_the_web/Installing_basic_software”, “Learn/Getting_started_with_the_web/Dealing_with_files”, “Learn/Getting_started_with_the_web”)}} 


{{QuickLinksWithSubpages(“/en-US/docs/Learn/HTML/Howto”)}} 
These tips are based on common knowledge and experimentation. 
An optimized web page not only provides for a more responsive site for your visitors but also reduces the load on your web servers and internet connection. 
This can be crucial for high volume sites or sites which have a spike in traffic due to unusual circumstances such as breaking news stories. 
Optimizing page load performance is not just for content which will be viewed by narrowband dial-up or mobile device visitors. 
It is just as important for broadband content and can lead to dramatic improvements even for your visitors with the fastest connections. 
Tips 
Reduce page weight 
Page weight is by far the most important factor in page-load performance. 
Reducing page weight through the elimination of unnecessary whitespace and comments, commonly known as minimization, and by moving inline script and CSS into external files, can improve download performance with minimal need for other changes in the page structure. 
Tools such as HTML Tidy can automatically strip leading whitespace and extra blank lines from valid HTML source. 
Other tools can “compress” JavaScript by reformatting the source or by obfuscating the source and replacing long identifiers with shorter versions. 
Minimize the number of files 
Reducing the number of files referenced in a web page lowers the number of HTTP connections required to download a page, thereby reducing the time for these requests to be sent, and for their responses to be received. 
Depending on a browser’s cache settings, it may send a request with the If-Modified-Since header for each referenced file, asking whether the file has been modified since the last time it was downloaded. 
Too much time spent querying the last modified time of the referenced files can delay the initial display of the web page, since the browser must check the modification time for each of these files, before rendering the page. 
If you use background images a lot in your CSS, you can reduce the number of HTTP lookups needed by combining the images into one, known as an image sprite. 
Then you just apply the same image each time you need it for a background and adjust the x/y coordinates appropriately. 
This technique works best with elements that will have limited dimensions, and will not work for every use of a background image. 
However, the fewer HTTP requests and single image caching can help reduce page-load time. 
Use a Content Delivery Network (CDN) 
For the purposes of this article, a CDN is a means to reduce the physical distance between your server and your visitor. 
As the distance between your server origin and visitor increases, the load times will increase. 
Suppose your website server is located in the United States and it has a visitor from India; the page load time will be much higher for the Indian visitor compared to a visitor from the US. 
A CDN is a geographically distributed network of servers that work together to shorten the distance between the user and your website. 
CDNs store cached versions of your website and serve them to visitors via the network node closest to the user, thereby reducing latency. 
Further reading: 
Understanding CDNs 
Reduce domain lookups 
Since each separate domain costs time in a DNS lookup, the page load time will grow along with the number of separate domains appearing in CSS link(s) and JavaScript and image src(es). 
This may not always be practical; however, you should always take care to use only the minimum necessary number of different domains in your pages. 
Cache reused content 
Make sure that any content that can be cached, is cached, and with appropriate expiration times. 

{{LearnSidebar}} 
The following links point to solutions to common everyday problems you’ll need to solve with HTML. 
Basic structure 
The most basic application of HTML is document structure. 
If you’re new to HTML you should start with this. 
How to create a basic HTML document 
How to divide a webpage into logical sections 
How to set up a proper structure of headings and paragraphs 
Basic text-level semantics 
HTML specializes in providing semantic information for a document, so HTML answers many questions you might have about how to get your message across best in your document. 
How to create a list of items with HTML 
How to stress or emphasize content 
How to indicate that text is important 
How to display computer code with HTML 
How to annotate images and graphics 
How to mark abbreviations and make them understandable 
How to add quotations and citations to web pages 
How to define terms with HTML 
Hyperlinks 
One of the main reasons for HTML is making navigation easy with {{Glossary(“hyperlink”, “hyperlinks”)}}, which can be used in many different ways: 
How to create a hyperlink 
How to create a table of contents with HTML 
Images & multimedia 
How to add images to a webpage 
How to add video content to a webpage 
Scripting & styling 
HTML only sets up document structure. 
To solve presentation issues, use {{glossary(“CSS”)}}, or use scripting to make your page interactive. 
How to use CSS within a webpage 
How to use JavaScript within a webpage 
Embedded content 
How to embed a webpage within another webpage 
Uncommon or advanced problems 
Beyond the basics, HTML is very rich and offers advanced features for solving complex problems. 
These articles help you tackle the less common use cases you may face: 
Forms 
Forms are a complex HTML structure made to send data from a webpage to a web server. 
We encourage you to go over our full dedicated guide. 
Here is where you should start: 
How to create a simple Web form 
How to structure a Web form 
Tabular information 
Some information, called tabular data, needs to be organized into tables with columns and rows. 
It’s one of the most complex HTML structures, and mastering it is not easy: 
How to create a data table 
How to make HTML tables accessible 
Data representation 
How to represent numeric and code values with HTML — see Superscript and Subscript, and Representing computer code. 
How to use data attributes 
Advanced text semantics 
How to take control of HTML line breaking 
How to mark changes (added and removed text) — see the {{htmlelement(“ins”)}} and {{htmlelement(“del”)}} elements. 
Advanced images & multimedia 
How to add a responsive image to a webpage 
How to add vector image to a webpage 
How to add a hit map on top of an image 
Internationalization 
HTML is not monolingual. It provides tools to handle common internationalization issues. 
How to add multiple languages into a single webpage 
How to display time and date with HTML 
Performance 
How to author fast-loading HTML pages 

{{QuickLinksWithSubpages(“/en-US/docs/Learn/HTML/Howto”)}} 
HTML is designed with extensibility in mind for data that should be associated with a particular element but need not have any defined meaning. data-* attributes allow us to store extra information on standard, semantic HTML elements without other hacks such as non-standard attributes, or extra properties on DOM. 
HTML syntax 
The syntax is simple. 
Any attribute on any element whose attribute name starts with data- is a data attribute. 
Say you have an article and you want to store some extra information that doesn’t have any visual representation. 
Just use data attributes for that: 
<article 
id="electric-cars" 
data-columns="3" 
data-index-number="12314" 
data-parent="cars"> 
… 
</article> 
JavaScript access 
Reading the values of these attributes out in JavaScript is also very simple. 
You could use {{domxref(“Element.getAttribute”, “getAttribute()”)}} with their full HTML name to read them, but the standard defines a simpler way: a {{domxref(“DOMStringMap”)}} you can read out via a {{domxref(“HTMLElement/dataset”, “dataset”)}} property. 
To get a data attribute through the dataset object, get the property by the part of the attribute name after data- (note that dashes are converted to {{Glossary(“camel_case”, “camel case”)}}). const article = document.querySelector("#electric-cars"); // The following would also work: 
// const article = document.getElementById("electric-cars") 
article.dataset.columns; // "3" 
article.dataset.indexNumber; // "12314" 
article.dataset.parent; // "cars" 
Each property is a string and can be read and written. 
In the above case setting article.dataset.columns = 5 would change that attribute to "5". 
CSS access 
Note that, as data attributes are plain HTML attributes, you can even access them from CSS. 
For example to show the parent data on the article you can use generated content in CSS with the attr() function: 
article::before { 
content: attr(data-parent); 
} 
You can also use the attribute selectors in CSS to change styles according to the data: 
article[data-columns="3"] { 
width: 400px; 
} 
article[data-columns="4"] { 
width: 600px; 
} 
You can see all this working together in this JSBin example. 
Data attributes can also be stored to contain information that is constantly changing, like scores in a game. 
Using the CSS selectors and JavaScript access here this allows you to build some nifty effects without having to write your own display routines. 
See this screencast for an example using generated content and CSS transitions (JSBin example). 
Data values are strings. 
Number values must be quoted in the selector for the styling to take effect. 
Issues 
Do not store content that should be visible and accessible in data attributes, because assistive technology may not access them. 
In addition, search crawlers may not index data attributes’ values. 
See also 
This article is adapted from Using data attributes in JavaScript and CSS on hacks.mozilla.org. 
Custom attributes are also supported in SVG 2; see {{domxref(“SVGElement.dataset”)}} and {{SVGAttr(“data-*“)}} for more information. 
How to use HTML data attributes (Sitepoint) 

{{LearnSidebar}} 
To build websites, you should know about {{Glossary(‘HTML’)}} — the fundamental technology used to define the structure of a webpage. 
HTML is used to specify whether your web content should be recognized as a paragraph, list, heading, link, image, multimedia player, form, or one of many other available elements or even a new element that you define. 
Callout: 
Looking to become a front-end web developer? 
We have put together a course that includes all the essential information you need to work towards your goal. 
Get started 
Before starting this topic, you should have at least basic familiarity with using computers and using the web passively (i.e., just looking at it, consuming the content). 
You should have a basic work environment set up as detailed in Installing basic software, and understand how to create and manage files, as detailed in Dealing with files — both are parts of our Getting started with the web complete beginner’s module. 
It is recommended that you work through Getting started with the web before attempting this topic. 
However, this isn’t absolutely necessary; much of what is covered in the HTML basics article is also covered in our Introduction to HTML module, albeit in a lot more detail. 
After learning HTML, you can then move on to learning about more advanced topics such as: 
CSS, and how to use it to style HTML (for example, alter your text size and fonts used, add borders and drop shadows, layout your page with multiple columns, add animations and other visual effects). 
JavaScript, and how to use it to add dynamic functionality to web pages (for example, find your location and plot it on a map, make UI elements appear/disappear when you toggle a button, save users’ data locally on their computers, and much more). 
Modules 
This topic contains the following modules, in a suggested order for working through them. You should definitely start with the first one. 
Introduction to HTML 
: This module sets the stage, getting you used to important concepts and syntax, looking at applying HTML to text, how to create hyperlinks, and how to use HTML to structure a webpage. 
Multimedia and embedding 
: This module explores how to use HTML to include multimedia in your web pages, including the different ways that images can be included, and how to embed video, audio, and even entire other webpages. 
HTML tables 
: Representing tabular data on a webpage in an understandable, {{glossary(“Accessibility”, “accessible”)}} way can be a challenge. 
This module covers basic table markup, along with more complex features such as implementing captions and summaries. 
Solving common HTML problems 
Use HTML to solve common problems provides links to sections of content explaining how to use HTML to solve very common problems when creating a webpage: dealing with titles, adding images or videos, emphasizing content, creating a basic form, etc. 
See also 
Web forms 
: This module provides a series of articles that will help you master the essentials of web forms. 
Web forms are a very powerful tool for interacting with users — most commonly they are used for collecting data from users, or allowing them to control a user interface. 
However, for historical and technical reasons it’s not always obvious how to use them to their full potential. 
We’ll cover all the essential aspects of Web forms including marking up their HTML structure, styling form controls, validating form data, and submitting data to the server. 
HTML (HyperText Markup Language) on MDN 
: The main entry point for HTML reference documentation on MDN, including detailed element and attribute references — if you want to know what attributes an element has or what values an attribute has, for example, this is a great place to start. 






{{LearnSidebar}}{{PreviousMenuNext(“Learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML”, “Learn/HTML/Introduction_to_HTML/Creating_hyperlinks”, “Learn/HTML/Introduction_to_HTML”)}} 
One of HTML’s main jobs is to give text structure so that a browser can display an HTML document the way its developer intends. 
This article explains the way {{glossary(“HTML”)}} can be used to structure a page of text by adding headings and paragraphs, emphasizing words, creating lists, and more. 
Prerequisites: 
Basic HTML familiarity, as covered in Getting started with HTML. 

{{LearnSidebar}} 
At its heart, {{glossary(“HTML”)}} is a language made up of {{Glossary(“Element”,“elements”)}}, which can be applied to pieces of text to give them different meaning in a document (Is it a paragraph? 
Is it a bulleted list? 
Is it part of a table?), structure a document into logical sections (Does it have a header? 
Three columns of content? 
A navigation menu?), and embed content such as images and videos into a page. 
Callout: Looking to become a front-end web developer? 
Get started 
Before starting this module, you don’t need any previous HTML knowledge, but you should have at least basic familiarity with using computers and using the web passively (i.e., just looking at it and consuming content). 
You should have a basic work environment set up (as detailed in Installing basic software), and understand how to create and manage files (as detailed in Dealing with files). Both are parts of our Getting started with the web complete beginner’s module. 
Note: If you are working on a computer/tablet/other device where you don’t have the ability to create your own files, you could try out (most of) the code examples in an online coding program such as JSBin or Glitch. 
Guides 
This module contains the following articles, which will take you through all the basic theory of HTML and provide ample opportunity for you to test out some skills. 
Getting started with HTML 
: Covers the absolute basics of HTML, to get you started — we define elements, attributes, and other important terms, and show where they fit in the language. 
We also show how a typical HTML page is structured and how an HTML element is structured, and explain other important basic language features. 
Along the way, we’ll play with some HTML to get you interested! 
What’s in the head? 
Metadata in HTML 
: The {{Glossary(“Head”,“head”)}} of an HTML document is the part that is not displayed in the web browser when the page is loaded. 
It contains information such as the page {{htmlelement(“title”)}}, links to {{glossary(“CSS”)}} (if you want to style your HTML content with CSS), links to custom favicons, and metadata (data about the HTML, such as who wrote it, and important keywords that describe the document). 
HTML text fundamentals 
: One of HTML’s main jobs is to give text meaning (also known as {{Glossary(“Semantics”,“semantics”)}}), so that the browser knows how to display it correctly. 
This article looks at how to use HTML to break up a block of text into a structure of headings and paragraphs, add emphasis/importance to words, create lists, and more. 
Creating hyperlinks 
: Hyperlinks are really important — they are what makes the web a web. 
This article shows the syntax required to make a link and discusses best practices for links. 
Advanced text formatting 
: There are many other elements in HTML for formatting text that we didn’t get to in the HTML text fundamentals article. 
The elements here are less well-known, but still useful to know about. 
In this article, you’ll learn about marking up quotations, description lists, computer code and other related text, subscript and superscript, contact information, and more. 
Document and website structure 
: As well as defining individual parts of your page (such as “a paragraph” or “an image”), HTML is also used to define areas of your website (such as “the header”, “the navigation menu”, or “the main content column”). 
This article looks into how to plan a basic website structure and how to write the HTML to represent this structure. 
Debugging HTML 
: Writing HTML is fine, but what if something goes wrong, and you can’t work out where the error in the code is? 
This article will introduce you to some tools that can help. 
Assessments 
The following assessments will test your understanding of the HTML basics covered in the guides above. 
Marking up a letter 
: We all learn to write a letter sooner or later; it is also a useful example to test out text formatting skills. 
In this assessment, you’ll be given a letter to mark up. 
Structuring a page of content 
: This assessment tests your ability to use HTML to structure a simple page of content, containing a header, a footer, a navigation menu, main content, and a sidebar. 





{{LearnSidebar}}{{NextMenu(“Learn/HTML/Multimedia_and_embedding/Video_and_audio_content”, “Learn/HTML/Multimedia_and_embedding”)}} 
In the beginning, the Web was just text, and it was really quite boring. 
Multimedia and Embedding Images 
Prerequisites: 
Basic computer literacy, basic software installed, basic knowledge of working with files, familiarity with HTML fundamentals (as covered in Getting started with HTML.) 
Objective: 
To learn how to embed simple images in HTML, annotate them with captions, and how HTML images relate to CSS background images. 
How do we put an image on a webpage? 
Without a src attribute, an img element has no image to load. 
The alt attribute is described below. 
<img src="dinosaur.jpg" alt="Dinosaur" /> 
And so on. 
You could also embed the image using its absolute URL, for example: 
This is called “hotlinking”. 
It is considered unethical, since someone else would be paying the bandwidth costs for delivering the image when someone visits your page. 
Alternative text 
src="images/dinosaur.jpg" 
alt="The head and torso of a dinosaur skeleton; 
it has a large head with long sharp teeth" /> 
So, why would you ever see or need alt text? 
It can come in handy for a number of reasons: 
Don’t write redundant alt text. 
Width and height 
You can find your image’s width and height in a number of ways. 
Returning to our example, we could do this: 
<img 
alt="The head and torso of a dinosaur skeleton; 
width="400" 
There’s a very good reason to do this. 
For example, suppose we have some text after the image: 
<h1>Images in HTML</h1> 
<blockquote> 
<p> 
That was wrong, in any case. 
The 
ocean was different from an aquarium, which was an artificial environment. 
The ocean was a world. 
And a world is not art. 
Dorothy thought about the 
living things that moved in that world: large, ruthless and hungry. 
Like us 
up here. 
</p> 
</blockquote> 
Once the image is loaded, the browser adds the image to the page. Because the image takes up space, the browser has to move the text down the page, to fit the image above it: 
This means that when the image has been downloaded, the browser doesn’t have to move the surrounding content. 
For an excellent article on the history of this feature, see Setting height and width on images is important again. 
If you set the image size too big, you’ll end up with images that look grainy, fuzzy, or too small, and wasting bandwidth downloading an image that is not fitting the user’s needs. 
The image may also end up looking distorted, if you don’t maintain the correct aspect ratio. You should use an image editor to put your image at the correct size before putting it on your webpage. 
Image titles 
As with links, you can also add title attributes to images, to provide further supporting information if needed. 
height="341" 
This gives us a tooltip on mouse hover, just like link titles: The dinosaur image, with a tooltip title on top of it that reads A T-Rex on display at the Manchester University Museum 

{{LearnSidebar}} 
We’ve looked at a lot of text so far in this course, but the web would be really boring only using text. 
Let’s start looking at how to make the web come alive with more interesting content! 
This module explores how to use HTML to include multimedia in your web pages, including the different ways that images can be included, and how to embed video, audio, and even entire webpages. 
Callout: 
Looking to become a front-end web developer? 
We have put together a course that includes all the essential information you need to work towards your goal. 
Get started 
Prerequisites 
Before starting this module, you should have a reasonable understanding of the basics of HTML, as previously covered in Introduction to HTML. 
If you have not worked through this module (or something similar), work through it first, then come back! 
Note: If you are working on a computer/tablet/other device where you don’t have the ability to create your own files, you could try out (most of) the code examples in an online coding program such as JSBin or Glitch. 
Guides 
This module contains the following articles, which will take you through all the fundamentals of embedding multimedia on webpages. 
Images in HTML 
: There are other types of multimedia to consider, but it is logical to start with the humble {{htmlelement(“img”)}} element used to embed a simple image in a webpage. 
In this article we’ll look at how to use it in more depth, including basics, annotating it with captions using {{htmlelement(“figure”)}}, and how it relates to CSS background images. 
Video and audio content 
: Next, we’ll look at how to use the HTML {{htmlelement(“video”)}} and {{htmlelement(“audio”)}} elements to embed video and audio on our pages, including basics, providing access to different file formats to different browsers, adding captions and subtitles, and how to add fallbacks for older browsers. 
From <object> to <iframe> — other embedding technologies 
: At this point we’d like to take somewhat of a sideways step, looking at a couple of elements that allow you to embed a wide variety of content types into your webpages: the {{htmlelement(“iframe”)}}, {{htmlelement(“embed”)}} and {{htmlelement(“object”)}} elements. <iframe>s are for embedding other web pages, and the other two allow you to embed external resources such as PDF files. 
Adding vector graphics to the Web 
: Vector graphics can be very useful in certain situations. 
Unlike regular formats like PNG/JPG, they don’t distort/pixelate when zoomed in — they can remain smooth when scaled. 
This article introduces you to what vector graphics are and how to include the popular {{glossary(“SVG”)}} format in web pages. 
Responsive images 
: In this article, we’ll learn about the concept of responsive images — images that work well on devices with widely differing screen sizes, resolutions, and other such features — and look at what tools HTML provides to help implement them. 
This helps to improve performance across different devices. 
Responsive images are just one part of responsive design, a future CSS topic for you to learn. 
Assessments 
The following assessment will test your understanding of the material covered in the guides above. 
Mozilla splash page 
: In this assessment, we’ll test your knowledge of some of the techniques discussed in this module’s articles, getting you to add some images and video to a funky splash page all about Mozilla! 
See also 
Add a hitmap on top of an image 
: Image maps provide a mechanism to make different parts of an image link to different places. (Think of a map linking through to further information about each different country you click on.) 
This technique can sometimes be useful. 
Web literacy basics II 
: An excellent Mozilla foundation course that explores and tests some of the skills talked about in this Multimedia and embedding module. 
Dive deeper into the basics of composing webpages, designing for accessibility, sharing resources, using online media, and working open (meaning that your content is freely available and shareable by others). 

{{LearnSidebar}}{{PreviousMenu(“Learn/HTML/Multimedia_and_embedding/Responsive_images”, “Learn/HTML/Multimedia_and_embedding”)}} 
In this assessment, we’ll test your knowledge of some of the techniques discussed in this module’s articles, getting you to add some images and video to a funky splash page all about Mozilla! Prerequisites: 
Objective: 
Using your favorite image editor, create 400px wide and 120px wide versions of: firefox_logo-only_RGB.png firefox-addons.jpg mozilla-dinosaur-head.png 






{{LearnSidebar}} 
A very common task in HTML is structuring tabular data, and it has a number of elements and attributes for just this purpose. 
Coupled with a little CSS for styling, HTML makes it easy to display tables of information on the web such as your school lesson plan, the timetable at your local swimming pool, or statistics about your favorite dinosaurs or football team. 
This module takes you through all you need to know about structuring tabular data using HTML. 
Callout: 
Looking to become a front-end web developer? 
We have put together a course that includes all the essential information you need to work towards your goal. 
Get started 
Prerequisites 
Before starting this module, you should already have covered the basics of HTML — see Introduction to HTML. 
Note: If you are working on a computer/tablet/other device where you don’t have the ability to create your own files, you could try out (most of) the code examples in an online coding program such as JSBin or Glitch. 
Guides 
This module contains the following articles, which will take you through all the fundamentals of creating tables in HTML. 
HTML table basics 
: This article gets you started with HTML tables, covering the very basics such as rows and cells, headings, making cells span multiple columns and rows, and how to group together all the cells in a column for styling purposes. 
HTML table advanced features and accessibility 
: This article looks at some more advanced features of HTML tables — such as captions/summaries and grouping your rows into table head, body and footer sections — as well as looking at the accessibility of tables for visually impaired users. 
Assessments 
Structuring planet data 
: In our table assessment, we provide you with some data on the planets in our solar system, and get you to structure it into an HTML table. 

{{LearnSidebar}}{{PreviousMenu(“Learn/HTML/Tables/Advanced”, “Learn/HTML/Tables”)}} 
In our table assessment, we provide you with some data on the planets in our solar system, and get you to structure it into an HTML table. Prerequisites: 
Objective: 

{{LearnSidebar}} 
Welcome to the MDN learning area. 
This set of articles aims to guide complete beginners to web development with all that they need to start coding websites. 
The aim of this area of MDN is not to take you from “beginner” to “expert” but to take you from “beginner” to “comfortable.” 
From there, you should be able to start making your way, learning from the rest of MDN, and other intermediate to advanced resources that assume a lot of previous knowledge. 
If you are a complete beginner, web development can be challenging — we will hold your hand and provide enough detail for you to feel comfortable and learn the topics properly. 
You should feel at home whether you are a student learning web development (on your own or as part of a class), a teacher looking for class materials, a hobbyist, or someone who just wants to understand more about how web technologies work. 
Callout: 
Looking to become a front-end web developer? 
We have put together a course that includes all the essential information you need to work towards your goal. 
Get started 
Where to start 
Complete beginner 
: If you are a complete beginner to web development, we’d recommend that you start by working through our Getting started with the web module, which provides a practical introduction to web development. 
Beyond the basics 
: If you have a bit of knowledge already, the next step is to learn {{glossary(“HTML”)}} and {{glossary(“CSS”)}} in detail: start with our Introduction to HTML module and move on to our CSS first steps module. 
Moving onto scripting 
: If you are comfortable with HTML and CSS already, or you are mainly interested in coding, you’ll want to move on to {{glossary(“JavaScript”)}} or server-side development. 
Begin with our JavaScript first steps and Server-side first steps modules. 
Frameworks and tooling 
: After mastering the essentials of vanilla HTML, CSS, and JavaScript, you should learn about client-side web development tools, and then consider digging into client-side JavaScript frameworks, and server-side website programming. 
Note: Our glossary provides terminology definitions. 
Besides, if you have a specific question about web development, our Common questions section may have something to help you. 
Topics covered 
The following is a list of all the topics we cover in the MDN learning area. 
Getting started with the web 
: Provides a practical introduction to web development for complete beginners. 
HTML — Structuring the web 
: HTML is the language that we use to structure the different parts of our content and define what their meaning or purpose is. 
This topic teaches HTML in detail. 
CSS — Styling the web 
: CSS is the language that we use to control our web content’s style and layout, as well as adding behavior like animation. 
This topic provides comprehensive coverage of CSS. 
JavaScript — Dynamic client-side scripting 
: JavaScript is the scripting language used to add dynamic functionality to web pages. 
This topic teaches all the essentials needed to become comfortable with writing and understanding JavaScript. 
Web forms — Working with user data 
: Web forms are a potent tool for interacting with users — most commonly, they are used for collecting data from users, or allowing them to control a user interface. 
In the articles listed below, we’ll cover all the essential aspects of structuring, styling, and interacting with web forms. 
Accessibility — make the web usable by everyone 
: Accessibility is the practice of making web content available to as many people as possible regardless of disability, device, locale, or other differentiating factors. 
This topic gives you all you need to know. 
Web Performance — making websites fast and responsive 
MathML : MathML is the language that we can use to write mathematical formulas in web pages using fractions, scripts, radicals, matrices, integrals, series, etc. This topic covers MathML. 
Tools and testing 
: This topic covers the tools developers use to facilitate their work, such as cross-browser testing tools, linters, formatters, transformation tools, version control systems, deployment tools, and client-side JavaScript frameworks. 
Server-side website programming 
: Even if you are concentrating on client-side web development, it is still useful to know how servers and server-side code features work. 
This topic provides a general introduction to how the server-side works and detailed tutorials showing how to build up a server-side app using two popular frameworks: Django (Python) and Express (Node.js). 
Getting our code examples 
The code examples you’ll encounter in the Learning Area are all available on GitHub. 
If you want to copy them all to your computer, the easiest way is to download a ZIP of the latest master code branch. 
If you prefer to copy the repo in a more flexible way that allows for automatic updates, you can follow the more complex instructions: 
This is the underlying version control system software that GitHub works on top of. 
Open your computer’s command prompt (Windows) or terminal (Linux, macOS). 
To copy the learning area repo to a folder called learning-area in the current location your command prompt/terminal is pointing to, use the following command: 
git clone https://github.com/mdn/learning-area 
You can now enter the directory and find the files you are after (either using your Finder/File Explorer or the cd command). 
You can update the learning-area repository with any changes made to the master version on GitHub with the following steps: 
In your command prompt/terminal, go inside the learning-area directory using cd. 
For example, if you were in the parent directory: 
cd learning-area 
Update the repository using the following command: 
git pull 
Contact us 
If you want to get in touch with us about anything, use the communication channels. 
We’d like to hear from you about anything you think is wrong or missing on the site, requests for new learning topics, requests for help with items you don’t understand, or any other questions or concerns. 
If you’re interested in helping develop/improve the content, take a look at how you can help and get in touch! 
We are more than happy to talk to you, whether you are a learner, teacher, experienced web developer, or someone else interested in helping to improve the learning experience. 
See also 
Mozilla developer newsletter 
: Our newsletter for web developers, which is an excellent resource for all levels of experience. 
Learn JavaScript 
: An excellent resource for aspiring web developers — Learn JavaScript in an interactive environment, with short lessons and interactive tests, guided by automated assessment. 
The first 40 lessons are free, and the complete course is available for a small one-time payment. 
Web demystified 
: A great series of videos explaining web fundamentals, aimed at absolute beginners to web development. 
Codecademy 
: A great interactive site for learning programming languages from scratch. 
BitDegree 
: Basic coding theory with a gamified learning process. 
Mainly focused on beginners. 
Code.org 
: Basic coding theory and practice, primarily aimed at children/complete beginners. 
freeCodeCamp.org 
: Interactive site with tutorials and projects to learn web development. 
The Odin Project 
: Features a free and open-source full-stack curriculum, from beginner to advanced. 
Web literacy map 
: A framework for entry-level web literacy and 21st-century skills, which also provides access to teaching activities sorted by category. 
Edabit 
: Thousands of interactive JavaScript challenges. 


{{LearnSidebar}} 
In this module, we take a look at {{Glossary(“asynchronous”)}} {{Glossary(“JavaScript”)}}, why it is important, and how it can be used to effectively handle potential blocking operations, such as fetching resources from a server. 
Callout: 
Looking to become a front-end web developer? 
We have put together a course that includes all the essential information you need to work towards your goal. 
Get started 
Prerequisites 
Asynchronous JavaScript is a fairly advanced topic, and you are advised to work through JavaScript first steps and JavaScript building blocks modules before attempting this. 
Note: If you are working on a computer/tablet/other device where you don’t have the ability to create your own files, you can try out (most of) the code examples in an online coding program such as JSBin or Glitch. 
Guides 
Introducing asynchronous JavaScript 
: In this article, we’ll learn about synchronous and asynchronous programming, why we often need to use asynchronous techniques, and the problems related to the way asynchronous functions have historically been implemented in JavaScript. 
How to use promises 
: Here we’ll introduce promises and show how to use promise-based APIs. 
We’ll also introduce the async and await keywords. 
Implementing a promise-based API 
: This article will outline how to implement your own promise-based API. 
Introducing workers 
: Workers enable you to run certain tasks in a separate thread to keep your main code responsive. 
In this article, we’ll rewrite a long-running synchronous function to use a worker. 
Assessments 
Sequencing animations 
: The assessment asks you to use promises to play a set of animations in a particular sequence. 
See also 
Asynchronous Programming from the fantastic Eloquent JavaScript online book by Marijn Haverbeke. 

{{LearnSidebar}}{{NextMenu(“Learn/JavaScript/Asynchronous/Promises”, “Learn/JavaScript/Asynchronous”)}} 
Prerequisites: Basic computer literacy, a reasonable understanding of JavaScript fundamentals, including functions and event handlers. 
Objective: 
Accessing a user’s camera or microphone using {{domxref(“MediaDevices/getUserMedia”, “getUserMedia()”)}} 









{{LearnSidebar}} 
In this module, we continue our coverage of all JavaScript’s key fundamental features, turning our attention to commonly-encountered types of code blocks such as conditional statements, loops, functions, and events. 
You’ve seen this stuff already in the course, but only in passing — here we’ll discuss it all explicitly. 
Prerequisites 
Before starting this module, you should have some familiarity with the basics of HTML and CSS, and you should have also worked through our previous module, JavaScript first steps. 
Note: If you are working on a computer/tablet/other device where you don’t have the ability to create your own files, you could try out (most of) the code examples in an online coding program such as JSBin or Glitch. 
Guides 
Making decisions in your code — conditionals 
: In any programming language, code needs to make decisions and carry out actions accordingly depending on different inputs. 
For example, in a game, if the player’s number of lives is 0, then it’s game over. 
In a weather app, if it is being looked at in the morning, show a sunrise graphic; show stars and a moon if it is night. 
In this article we’ll explore how conditional structures work in JavaScript. 
Looping code 
: Sometimes you need a task done more than once in a row. 
For example, looking through a list of names. 
In programming, loops perform this job very well. 
Here we will look at loop structures in JavaScript. 
Functions — reusable blocks of code 
: Another essential concept in coding is functions. 
Functions allow you to store a piece of code that does a single task inside a defined block, and then call that code whenever you need it using a single short command — rather than having to type out the same code multiple times. 
In this article we’ll explore fundamental concepts behind functions such as basic syntax, how to invoke and define functions, scope, and parameters. 
Build your own function 
: With most of the essential theory dealt with previously, this article provides a practical experience. 
Here you’ll get some practice with building up your own custom function. 
Along the way, we’ll also explain some further useful details of dealing with functions. 
Function return values 
: The last essential concept you must know about a function is return values. 
Some functions don’t return a significant value after completion, but others do. 
It’s important to understand what their values are, how to make use of them in your code, and how to make your own custom functions return useful values. 
Introduction to events 
: Events are actions or occurrences that happen in the system you are programming, which the system tells you about so you can respond to them in some way if desired. 
For example if the user clicks a button on a webpage, you might want to respond to that action by displaying an information box. 
In this final article we will discuss some important concepts surrounding events, and look at how they work in browsers. 
Assessments 
The following assessment will test your understanding of the JavaScript basics covered in the guides above. 
Image gallery 
Learn JavaScript : An excellent resource for aspiring web developers — Learn JavaScript in an interactive environment, with short lessons and interactive tests, guided by automated assessment. The first 40 lessons are free, and the complete course is available for a small one-time payment. 


{{LearnSidebar}}{{PreviousMenuNext(“Learn/JavaScript/Building_blocks/Build_your_own_function”,“Learn/JavaScript/Building_blocks/Events”, “Learn/JavaScript/Building_blocks”)}} 
There’s one last essential concept about functions for us to discuss — return values. 
Some functions don’t return a significant value, but others do. It’s important to understand what their values are, how to use them in your code, and how to make functions return useful values. We’ll cover all of these below. 
Prerequisites: 
Basic computer literacy, a basic understanding of HTML and CSS, JavaScript first steps, Functions — reusable blocks of code. 
Objective: 
To understand function return values, and how to make use of them. 
What are return values? 
Return values are just what they sound like — the values that a function returns when it completes. 
You’ve already met return values several times, although you may not have thought about them explicitly. 
Let’s return to a familiar example (from a previous article in this series): 
const myText = "The weather is cold"; 
const newString = myText.replace("cold", "warm"); 
console.log(newString); // Should print "The weather is warm" 
// the replace() string function takes a string, 
// replaces one substring with another, and returns 
// a new string with the replacement made 
The replace() function is invoked on the myText string, and is passed two parameters: 
The substring to find (‘cold’) The string to replace it with (‘warm’) 
When the function completes (finishes running), it returns a value, which is a new string with the replacement made. 
In the code above, the result of this return value is saved in the variable newString. 
If you look at the replace() function MDN reference page, you’ll see a section called return value. 
It is very useful to know and understand what values are returned by functions, so we try to include this information wherever possible. 
Some functions don’t return any value. (In these cases, our reference pages list the return value as void or undefined.) 
For example, in the displayMessage() function we built in the previous article, no specific value is returned when the function is invoked. 
It just makes a box appear somewhere on the screen — that’s it! 
Generally, a return value is used where the function is an intermediate step in a calculation of some kind. 
You want to get to a final result, which involves some values that need to be calculated by a function. 
After the function calculates the value, it can return the result so it can be stored in a variable; and you can use this variable in the next stage of the calculation. 
Using return values in your own functions 
To return a value from a custom function, you need to use the return keyword. 
We saw this in action recently in our random-canvas-circles.html example. 
Our draw() function draws 100 random circles somewhere on an HTML {{htmlelement(“canvas”)}}: 
function draw() { 
ctx.clearRect(0, 0, WIDTH, HEIGHT); 
for (let i = 0; i < 100; i++) { 
ctx.beginPath(); 
ctx.fillStyle = "rgba(255,0,0,0.5)"; 
ctx.arc(random(WIDTH), random(HEIGHT), random(50), 0, 2 * Math.PI); 
ctx.fill(); 
} 
} 
Inside each loop iteration, three calls are made to the random() function, to generate a random value for the current circle’s x-coordinate, y-coordinate, and radius, respectively. 
The random() function takes one parameter — a whole number — and returns a whole random number between 0 and that number. 
It looks like this: 
function random(number) { 
return Math.floor(Math.random() * number); 
} 
This could be written as follows: 
function random(number) { 
const result = Math.floor(Math.random() * number); 
return result; 
} 
But the first version is quicker to write, and more compact. 
We are returning the result of the calculation Math.floor(Math.random() * number) each time the function is called. 
This return value appears at the point the function was called, and the code continues. 
So when you execute the following: 
ctx.arc(random(WIDTH), random(HEIGHT), random(50), 0, 2 * Math.PI); 
If the three random() calls return the values 500, 200, and 35, respectively, the line would actually be run as if it were this: 
ctx.arc(500, 200, 35, 0, 2 * Math.PI); 
The function calls on the line are run first, and their return values are substituted for the function calls, before the line itself is then executed. 
Active learning: our own return value function 
Let’s have a go at writing our own functions featuring return values. 
Make a local copy of the function-library.html file from GitHub. 
This is a simple HTML page containing a text {{htmlelement(“input”)}} field and a paragraph. 
There’s also a {{htmlelement(“script”)}} element, in which we have stored a reference to both HTML elements in two variables. 
This page will allow you to enter a number into the text box, and display different numbers related to it below. 
Add some useful functions to this <script> element below the two existing lines: 
function squared(num) { 
return num * num; 
} 
function cubed(num) { 
return num * num * num; 
} 
function factorial(num) { 
if (num === 0) return 1; 
let x = num - 1; 
while (x > 1) { 
x--; 
} 
return num; 
} 
The squared() and cubed() functions are fairly obvious — they return the square or cube of the number that was given as a parameter. 
The factorial() function returns the factorial of the given number. 
Include a way to print out information about the number entered into the text input by adding the following event handler below the existing functions: 
input.addEventListener("change", () => { 
const num = parseFloat(input.value); 
if (isNaN(num)) { 
para.textContent = "You need to enter a number!" 
; 
} else { 
para.textContent = `${num} squared is ${squared(num)}. `; 
para.textContent += `${num} cubed is ${cubed(num)}. `; 
para.textContent += `${num} factorial is ${factorial(num)}. `; 
} 
}); 
Here are some explanations for the addEventListener function in step 3 above: By adding a listener to the change event, this function runs whenever the change event fires on the text input — that is when a new value is entered into the text input, and submitted (e.g., enter a value, then un-focus the input by pressing Tab or Return). 
When this anonymous function runs, the value in the input is stored in the num constant. 
The if statement prints an error message if the entered value is not a number. 
The condition checks if the expression isNaN(num) returns true. 
The isNaN() function tests whether the num value is not a number — if so, it returns true, and if not, it returns false. 
If the condition returns false, the num value is a number and the function prints out a sentence inside the paragraph element that states the square, cube, and factorial values of the number. 
The sentence calls the squared(), cubed(), and factorial() functions to calculate the required values. 
Note: If you have trouble getting the example to work, check your code against the finished version on GitHub (see it running live also), or ask us for help. Now it’s your turn! 
At this point, we’d like you to have a go at writing out a couple of functions of your own and adding them to the library. How about the square or cube root of the number? Or the circumference of a circle with a given radius? 
Some extra function-related tips: 
Look at another example of writing error handling into functions. 
It is generally a good idea to check that any necessary parameters are validated, and that any optional parameters have some kind of default value provided. 
Think about the idea of creating a function library. 
As you go further into your programming career, you’ll start doing the same kinds of things over and over again. 
It is a good idea to create your own library of utility functions to do these sorts of things. 
You can copy them over to new code, or even just apply them to HTML pages wherever you need them. Test your skills! 
You’ve reached the end of this article, but can you remember the most important information? 
You can find some further tests to verify that you’ve retained this information before you move on — see Test your skills: Functions. 
Conclusion 
So there we have it — functions are fun, very useful, and although there’s a lot to talk about in regards to their syntax and functionality, they are fairly understandable. 
If there is anything you didn’t understand, feel free to read through the article again, or contact us to ask for help. 
See also 
Functions in-depth — a detailed guide covering more advanced functions-related information. 
Callback functions in JavaScript — a common JavaScript pattern is to pass a function into another function as an argument. It is then called inside the first function. 
This is a little beyond the scope of this course, but worth studying before too long. 
{{PreviousMenuNext(“Learn/JavaScript/Building_blocks/Build_your_own_function”,“Learn/JavaScript/Building_blocks/Events”, “Learn/JavaScript/Building_blocks”)}} 

{{LearnSidebar}} 
{{PreviousMenu(“Learn/JavaScript/Client-side_web_APIs/Video_and_audio_APIs”, “Learn/JavaScript/Client-side_web_APIs”)}} 
Modern web browsers support a number of ways for websites to store data on the user’s computer — with the user’s permission — then retrieve it when necessary. 
This lets you persist data for long-term storage, save sites or documents for offline use, retain user-specific settings for your site, and more. 
This article explains the very basics of how these work. 
Prerequisites: 
JavaScript basics (see first steps, building blocks, JavaScript objects), the basics of Client-side APIs 
Objective: 
To learn how to use client-side storage APIs to store application data. 



{{LearnSidebar}} 
When writing client-side JavaScript for websites or applications, you will quickly encounter Application Programming Interfaces (APIs). APIs are programming features for manipulating different aspects of the browser and operating system the site is running on, or manipulating data from other websites or services. 
We have put together a course that includes all the essential information you need to work towards your goal. 
Prerequisites 
To get the most out of this module, you should have worked your way through the previous JavaScript modules in the series (First steps, Building blocks, and JavaScript objects). 
Those modules typically involve simple API usage, as it is often difficult to write client-side JavaScript examples without them. 
For this tutorial, we will assume that you are knowledgeable about the core JavaScript language, and we will explore common Web APIs in a bit more detail. 
Basic knowledge of HTML and CSS would also be useful. 
Note: If you are working on a device where you don’t have the ability to create your own files, you could try out (most of) the code examples in an online coding program such as JSBin or Glitch. 
Guides 
Introduction to web APIs 
: First up, we’ll start by looking at APIs from a high level — what are they, how do they work, how do you use them in your code, and how are they structured? 
We’ll also take a look at what the different main classes of APIs are, and what kind of uses they have. 
Manipulating documents 
: When writing web pages and apps, one of the most common things you’ll want to do is manipulate web documents in some way. 
This is usually done by using the Document Object Model (DOM), a set of APIs for controlling HTML and styling information that makes heavy use of the {{domxref(“Document”)}} object. 
In this article, we’ll look at how to use the DOM in detail, along with some other interesting APIs that can alter your environment in interesting ways. 
Fetching data from the server 
: Another very common task in modern websites and applications is retrieving individual data items from the server to update sections of a webpage without having to load an entirely new page. 
This seemingly small detail has had a huge impact on the performance and behavior of sites. 
In this article, we’ll explain the concept, and look at technologies that make it possible, such as {{domxref(“XMLHttpRequest”)}} and the Fetch API. 
Third party APIs 

{{LearnSidebar}}{{NextMenu(“Learn/JavaScript/Client-side_web_APIs/Manipulating_documents”, “Learn/JavaScript/Client-side_web_APIs”)}} 
First up, we’ll start by looking at APIs from a high level — what are they, how do they work, how to use them in your code, and how are they structured? 
We’ll also take a look at what the different main classes of APIs are, and what kind of uses they have. 
Objective: 
As a real-world example, think about the electricity supply in your house, apartment, or other dwellings. If you want to use an appliance in your house, you plug it into a plug socket and it works. 

{{LearnSidebar}}{{PreviousMenuNext(“Learn/JavaScript/Client-side_web_APIs/Introduction”, “Learn/JavaScript/Client-side_web_APIs/Fetching_data”, “Learn/JavaScript/Client-side_web_APIs”)}} 
When writing web pages and apps, one of the most common things you’ll want to do is manipulate the document structure in some way. 
This is usually done by using the Document Object Model (DOM), a set of APIs for controlling HTML and styling information that makes heavy use of the {{domxref(“Document”)}} object. 
In this article we’ll look at how to use the DOM in detail, along with some other interesting APIs that can alter your environment in interesting ways. 
Prerequisites: 
Objective: To gain familiarity with the core DOM APIs, and the other APIs commonly associated with DOM and document manipulation. The important parts of a web browser 





{{LearnSidebar}} 
In our first JavaScript module, we first answer some fundamental questions such as “what is JavaScript?”, “what does it look like?”, and “what can it do?”, before moving on to taking you through your first practical experience of writing JavaScript. 
We have put together a course that includes all the essential information you need to work towards your goal. 
Prerequisites 
Before starting this module, you don’t need any previous JavaScript knowledge, but you should have some familiarity with HTML and CSS. 
You are advised to work through the following modules before starting on JavaScript: 
Getting started with the Web (which includes a really basic JavaScript introduction). 
Introduction to HTML. 
Introduction to CSS. 
Note: If you are working on a computer/tablet/other device where you don’t have the ability to create your own files, you could try out (most of) the code examples in an online coding program such as JSBin or Glitch. 
Guides 
What is JavaScript? 

{{LearnSidebar}}{{PreviousMenuNext(“Learn/JavaScript/First_steps/Variables”, “Learn/JavaScript/First_steps/Strings”, “Learn/JavaScript/First_steps”)}} 
At this point in the course, we discuss math in JavaScript — how we can use {{Glossary(“Operator”,“operators”)}} and other features to successfully manipulate numbers to do our bidding. Prerequisites: 
Objective: 
But none of us can deny that math is a fundamental part of life that we can’t get very far without. 

Have fun! 
Prerequisites: 
Objective: 
Basic setup: 
In the raw text file, copy all of the code underneath the heading “1. 
RAW TEXT STRINGS”. 
Placing the event handler and incomplete function: 
Now return to the raw text file. 
Copy the code found underneath the heading “3. 
This: 
Completing the result() function: 
Create a new variable called newStory, and set its value to equal storyText. 
What you need to do is as follows: 
Hints and tips 
You don’t need to edit the HTML in any way, except to apply the JavaScript to your HTML. 
The following for example turns the background of the {{htmlelement(“html”)}} element red — so the entire browser window should go red if the JavaScript is applied properly: 
Math.round() is a built-in JavaScript method that rounds the result of a calculation to the nearest whole number. 
Assessment or further help 
Your post should include: 
A descriptive title such as “Assessment wanted for Silly story generator”. 

{{LearnSidebar}}{{PreviousMenuNext(“Learn/JavaScript/First_steps/Math”, “Learn/JavaScript/First_steps/Useful_string_methods”, “Learn/JavaScript/First_steps”)}} 
Next, we’ll turn our attention to strings — this is what pieces of text are called in programming. 
Prerequisites: 
Basic computer literacy, a basic understanding of HTML and CSS, an understanding of what JavaScript is. 
Objective: 
To gain familiarity with the basics of strings in JavaScript. 
The power of words 
Words are very important to humans — they are a large part of how we communicate. 
Since the Web is a largely text-based medium designed to allow humans to communicate and share information, it is useful for us to have control over the words that appear on it. {{glossary(“HTML”)}} provides structure and meaning to our text, {{glossary(“CSS”)}} allows us to precisely style it, and JavaScript contains a number of features for manipulating strings, creating custom welcome messages and prompts, showing the right text labels when needed, sorting terms into the desired order, and much more. 
Pretty much all of the programs we’ve shown you so far in the course have involved some string manipulation. 
Declaring strings 
Let’s start by entering some basic lines into the browser developer console to familiarize ourselves. 
To start with, enter the following lines: 
const string = "The revolution will not be televised."; 
console.log(string); 
Just like we did with numbers, we are declaring a variable, initializing it with a string value, and then returning the value. The only difference here is that when writing a string, you need to surround the value with quotes. 
If you don’t do this, or miss one of the quotes, you’ll get an error. 
Try entering the following lines: 
js example-bad const badString1 = This is a test; const badString2 = 'This is a test; const badString3 = This is a test'; 

{{learnsidebar}} 
The aim of this skill test is to assess whether you’ve understood our Storing the information you need — Variables article. 
Note: You can try out solutions in the interactive editors below, however it may be helpful to download the code and use an online tool such as CodePen, jsFiddle, or Glitch to work on the tasks. 
Note: In the examples below, if there is an error in your code it will be outputted into the results panel on the page, to help you try to figure out the answer (or into the browser’s JavaScript console, in the case of the downloadable version). 
Variables 1 
In this task we want you to: 
Declare a variable called myName. 
Initialize myName with a suitable value, on a separate line (you can use your actual name, or something else). 
Declare a variable called myAge and initialize it with a value, on the same line. 
Try updating the live code below to recreate the finished example: 
{{EmbedGHLiveSample(“learning-area/javascript/introduction-to-js-1/tasks/variables/variables1.html”, ‘100%’, 400)}} 
Download the starting point for this task to work in your own editor or in an online editor. 
Variables 2 
In this task you need to add a new line to correct the value stored in the existing myName variable to your own name. 
Try updating the live code below to recreate the finished example: 
{{EmbedGHLiveSample(“learning-area/javascript/introduction-to-js-1/tasks/variables/variables2.html”, ‘100%’, 400)}} 
Callout: 
Download the starting point for this task to work in your own editor or in an online editor. 
Variables 3 
The final task for now — in this case you are provided with some existing code, which has two errors present in it. 
The results panel should be outputting the name Chris, and a statement about how old Chris will be in 20 years’ time. 
How can you fix the problem and correct the output? 
Try updating the live code below to recreate the finished example: 
{{EmbedGHLiveSample(“learning-area/javascript/introduction-to-js-1/tasks/variables/variables3.html”, ‘100%’, 400)}} 
Callout: 
Download the starting point for this task to work in your own editor or in an online editor. Assessment or further help 
You can practice these examples in the Interactive Editors above. 
If you would like your work assessed, or are stuck and want to ask for help: 
Put your work into an online shareable editor such as CodePen, jsFiddle, or Glitch. 
You can write the code yourself, or use the starting point files linked to in the above sections. 
Write a post asking for assessment and/or help at the MDN Discourse forum Learning category. 
Your post should include: 
A descriptive title such as “Assessment wanted for Variables 1 skill test”. 


{{LearnSidebar}}{{PreviousMenuNext(“Learn/JavaScript/First_steps/What_went_wrong”, “Learn/JavaScript/First_steps/Math”, “Learn/JavaScript/First_steps”)}} 
Prerequisites: 
Objective: 
What is a variable? 
Variable example 
Let’s look at a simple example: 
}; 
Without a variable 
; }; 
![ 
## Declaring a variable 
```js 
let myName; 
let myAge; 
myName; 
myAge; 
scoobyDoo; 
Initializing a variable 
For example: 
myName = "Chris"; 
myAge = 37; 
myName; 
myAge; 
let myDog = "Rover"; 
var myName; 
var myAge; 
A couple of simple differences are explained below. 
For example: 
myName = "Chris"; 
console.log(myName); 
} 
logName(); 
var myName; 
Note: This won’t work when typing individual lines into a JavaScript console, just when running multiple lines of JavaScript in a web document. 
If we changed var to let in the above example, it would fail with an error. This is a good thing — declaring a variable after you initialize it results in confusing, harder to understand code. 
Secondly, when you use var, you can declare the same variable as many times as you like, but with let you can’t. The following would work: var myName = "Chris"; var myName = "Bob"; 
myName = "Bob"; 
There’s a feature in Chrome’s console where variable re-declarations with let and const are allowed: > let myName = "Chris"; let myName = "Bob"; 



{{LearnSidebar}} 
The following links point to solutions to common problems you may encounter when writing JavaScript. 
Common beginner’s mistakes 
Correct spelling and casing 
If your code doesn’t work and/or the browser complains that something is undefined, check that you’ve spelt all your variable names, function names, etc. correctly. 
Some common built-in browser functions that cause problems are: 
Correct 
Wrong 
getElementsByTagName() 
getElementByTagName() 
getElementsByName() 
getElementByName() 
getElementsByClassName() 
getElementByClassName() 
getElementById() 
getElementsById() 
Semicolon position 
You need to make sure you don’t place any semicolons incorrectly. For example: 
Correct 
Wrong 
elem.style.color = 'red'; 
elem.style.color = 'red;' 
Functions 
There are a number of things that can go wrong with functions. 
One of the most common errors is to declare the function, but not call it anywhere. 
For example: 
function myFunction() { 
alert("This is my function."); 
} 
This code won’t do anything unless you call it with the following statement: 
myFunction(); 
Function scope 

{{LearnSidebar}} 
{{Glossary(“JavaScript”)}} is a programming language that allows you to implement complex functionalities on web pages. 
Every time a web page does more than just sit there and display static information for you to look at—displaying timely content updates, interactive maps, animated 2D/3D graphics, scrolling video jukeboxes, or more—you can bet that JavaScript is probably involved. 
Prerequisites 
JavaScript is arguably more difficult to learn than related technologies such as HTML and CSS. 
Before attempting to learn JavaScript, you are strongly advised to get familiar with at least these two technologies first, and perhaps others as well. 
Start by working through the following modules: 
Getting started with the Web 
Introduction to HTML 
Introduction to CSS 
Having previous experience with other programming languages might also help. 
After getting familiar with the basics of JavaScript, you should be in a position to learn about more advanced topics, for example: 
JavaScript in depth, as taught in our JavaScript guide 
Web APIs 
Modules 
JavaScript is an actively evolving language and has changed greatly over the years. 
JavaScript first steps 
: In our first JavaScript module, we first answer some fundamental questions such as “what is JavaScript?”, “what does it look like?”, and “what can it do?”, before moving on to taking you through your first practical experience of writing JavaScript. 
After that, we discuss some key JavaScript features in detail, such as variables, strings, numbers and arrays. 
JavaScript building blocks 
: In this module, we continue our coverage of all JavaScript’s key fundamental features, turning our attention to commonly-encountered types of code block such as conditional statements, loops, functions, and events. 
You’ve seen this stuff already in the course, but only in passing — here we’ll discuss it all explicitly. 
Introducing JavaScript objects 
: In JavaScript, most things are objects, from core JavaScript features like strings and arrays to the browser APIs built on top of JavaScript. 
You can even create your own objects to encapsulate related functions and variables into efficient packages. 
The object-oriented nature of JavaScript is important to understand if you want to go further with your knowledge of the language and write more efficient code, therefore we’ve provided this module to help you. 
Here we teach object theory and syntax in detail, look at how to create your own objects, and explain what JSON data is and how to work with it. 
Asynchronous JavaScript 
: In this module we take a look at asynchronous JavaScript, why it is important, and how it can be used to effectively handle potential blocking operations such as fetching resources from a server. 
Client-side web APIs 
: When writing client-side JavaScript for websites or applications, you won’t go very far before you start to use APIs — interfaces for manipulating different aspects of the browser and operating system the site is running on, or even data from other websites or services. 
In this module we will explore what APIs are, and how to use some of the most common APIs you’ll come across often in your development work. 
Solving common JavaScript problems 
Solve common problems in your JavaScript code provides a little advice on how to avoid common beginner JavaScript programming mistakes, along with many helpful links to topics that show how to solve common JavaScript programming problems. 
See also 
Coding math 
: An excellent series of video tutorials to teach the math you need to understand to be an effective programmer, by Keith Peters. 




{{LearnSidebar}} 
In JavaScript, most things are objects, from core JavaScript features like arrays to the browser {{Glossary(“API”, “APIs”)}} built on top of JavaScript. 
You can even create your own objects to encapsulate related functions and variables into efficient packages and act as handy data containers. 
The object-based nature of JavaScript is important to understand if you want to go further with your knowledge of the language, therefore we’ve provided this module to help you. Here we teach object theory and syntax in detail, then look at how to create your own objects. 
We have put together a course that includes all the essential information you need to work towards your goal. 
Prerequisites 
Before starting this module, you should have some familiarity with {{Glossary(“HTML”)}} and {{Glossary(“CSS”)}}. 
You are advised to work through the Introduction to HTML and Introduction to CSS modules before starting on JavaScript. 
You should also have some familiarity with JavaScript basics before looking at JavaScript objects in detail. 
Before attempting this module, work through JavaScript first steps and JavaScript building blocks. 
Note: If you are working on a computer/tablet/other devices where you are not able to create your own files, you could try out (most of) the code examples in an online coding program such as JSBin or Glitch. 
Guides 
Object basics 
: In the first article looking at JavaScript objects, we’ll look at fundamental JavaScript object syntax, and revisit some JavaScript features we’ve already looked at earlier on in the course, reiterating the fact that many of the features you’ve already dealt with are in fact objects. 
Object prototypes 
: Prototypes are the mechanism by which JavaScript objects inherit features from one another, and they work differently from inheritance mechanisms in classical object-oriented programming languages. 
In this article, we explore how prototype chains work. 
Object-oriented programming 
: In this article, we’ll describe some of the basic principles of “classical” object-oriented programming, and look at the ways it is different from the prototype model in JavaScript. 
Classes in JavaScript 
: JavaScript provides some features for people wanting to implement “classical” object-oriented programs, and in this article, we’ll describe these features. 
Working with JSON data 
: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax, which is commonly used for representing and transmitting data on the web (i.e., sending some data from the server to the client, so it can be displayed on a web page). 
You’ll come across it quite often, so in this article, we give you all you need to work with JSON using JavaScript, including parsing the JSON so you can access data items within it, and writing your own JSON. 
Object building practice 
: In previous articles we looked at all the essential JavaScript object theory and syntax details, giving you a solid base to start from. 
In this article we dive into a practical exercise, giving you some more practice in building custom JavaScript objects, which produce something fun and colorful — some colored bouncing balls. 
Assessments 
Adding features to our bouncing balls demo 
: In this assessment, you are expected to use the bouncing balls demo from the previous article as a starting point, and add some new and interesting features to it. See also 





{{learnsidebar}} 
The aim of this skill test is to assess whether you’ve understood our Classes in JavaScript article. 
Note: You can try out solutions in the interactive editors below, however it may be helpful to download the code and use an online tool such as CodePen, jsFiddle, or Glitch to work on the tasks. 
If you get stuck, then ask us for help — see the Assessment or further help section at the bottom of this page. 
Note: In the examples below, if there is an error in your code it will be outputted into the results panel on the page, to help you try to figure out the answer (or into the browser’s JavaScript console, in the case of the downloadable version). 
OOJS 1 
In this task we provide you with the start of a definition for a Shape class. 
It has three properties: name, sides, and sideLength. 
This class only models shapes for which all sides are the same length, like a square or an equilateral triangle. 
We’d like you to: 
Add a constructor to this class. 
The constructor takes arguments for the name, sides, and sideLength properties, and initializes them. 
Add a new method calcPerimeter() method to the class, which calculates its perimeter (the length of the shape’s outer edge) and logs the result to the console. 
Create a new instance of the Shape class called square. 
Give it a name of square, 4 sides, and a sideLength of 5. 
Call your calcPerimeter() method on the instance, to see whether it logs the calculation result to the browser’s console as expected. 
Create a new instance of Shape called triangle, with a name of triangle, 3 sides and a sideLength of 3. 
Call triangle.calcPerimeter() to check that it works OK. 
Try updating the live code below to recreate the finished example: 
{{EmbedGHLiveSample(“learning-area/javascript/oojs/tasks/oojs/oojs1.html”, ‘100%’, 400)}} 
Callout: 
Download the starting point for this task to work in your own editor or in an online editor. 
OOJS 2 
Next we’d like you to create a Square class that inherits from Shape, and adds a calcArea() method that calculates the square’s area. 
Also set up the constructor so that the name property of Square object instances is automatically set to square, and the sides property is automatically set to 4. 
When invoking the constructor, you should therefore just need to provide the sideLength property. 
Create an instance of the Square class called square with appropriate property values, and call its calcPerimeter() and calcArea() methods to show that it works OK. 
Try updating the live code below to recreate the finished example: 
{{EmbedGHLiveSample(“learning-area/javascript/oojs/tasks/oojs/oojs2.html”, ‘100%’, 400)}} 
Callout: 
Download the starting point for this task to work in your own editor or in an online editor. 
Assessment or further help 
You can practice these examples in the Interactive Editors above. 
If you would like your work assessed, or are stuck and want to ask for help: 
Put your work into an online shareable editor such as CodePen, jsFiddle, or Glitch. 
You can write the code yourself, or use the starting point files linked to in the above sections. 
Write a post asking for assessment and/or help at the MDN Discourse forum Learning category. 
Your post should include: 
A descriptive title such as “Assessment wanted for OOJS 1 skill test”. 

{{learnsidebar}} 
It is great that you are putting some time into learning a new set of skills, but there are good practices to employ that will make your learning more effective. 
There also are times when you’ll get stuck and feel frustrated — even professional web developers feel like this regularly — and it pays to know about the most effective ways to try and get help so you can progress in your work. 
This article provides some hints and tips in both of these areas that will help you get more out of learning web development, as well as further reading so you can find out more information about each sub-topic should you wish. 
Effective learning 
Let’s move straight on and think about effective learning. 
Different learning methods 
It is interesting to consider that there are two main ways in which your brain learns things — focused and diffuse learning: 
Focused learning is what you might more traditionally associate with academic subjects. 
You concentrate deeply on a low-level topic and solving the specific problems that it brings. 
You are focused on a narrow area. 
Diffuse learning is more to do with high-level thinking around a wider area. 
You let your mind wander more widely, and seemingly make random connections between different things. 
This is more the kind of thinking you do while you are in the shower, or during a coffee break. 
From the studies that neuroscientists have done on brain activity, we have found out that you can’t really engage in both ways of learning — or thinking — at once. 
So which one should you choose? 
You might think that focused learning is better for studying, but in reality, both are very important. 
Focused thinking is great for concentrating hard on specific subjects, getting into deep problem-solving, and improving your mastery of the techniques required — strengthening the neural pathways in your brain where that information is stored. 
It isn’t however very good at getting an understanding of “the big picture”, and unlocking new neural pathways when you are trying to understand new subjects or solve new problems that you haven’t come across before. 
For that, you need diffuse thinking. 
This is the opposite of focus — you let your brain wander around the wider landscape, searching around for connections you didn’t have before, touching on new things (or new combinations of things) that you can then focus on later, to strengthen them and start to really understand what they mean. 
This is why it is usually good to read some introductory material first to get a high-level understanding of an area before you leap into the specific details. 
It is also why you can sometimes get really stuck on a problem, but then figure out the answer when you go for a coffee break (or a walk). 
You might: 
Know how to fix problem A with tool A. 
Know how to fix problem B with tool B. 
Not know how to fix problem C. 
Let’s say you focus on problem C for a while and get frustrated because you can’t think how to solve it. 
But then after going on a walk to get some fresh air, you may well find that as your mind wanders, you suddenly make a connection between tool A and tool B, and realize that you can use them together to fix problem C! 
It isn’t always this simple, but it is also surprising how many times this does happen. 
This also highlights the importance of taking regular breaks when you are studying in front of the computer. 
Different learning materials 
It is also worth looking at the different types of learning materials that are available, to see which ones are most effective for you to learn with. 
Textual articles 
You’ll find a lot of written articles on the web to teach you about web design. 
Like most of this course, for example. 
Some of the articles will be tutorials, to teach you a certain technique or important concept (such as “learn how to create a video player” or “Learn the CSS box model”), and some of the articles will be reference material, to allow you to look up details you may have forgotten (such as “what is the syntax of the CSS background property”?) 
MDN Web Docs is very good for both types — the area you are currently in is great for learning techniques and concepts, and we also have several giant reference sections allowing you to look up any syntax you can’t remember. 
There are also several other great resources on the web, some of which we’ll mention below. 
Note: The above text should have given you an important fact — you aren’t expected to remember everything! 
Professional web developers use tools like MDN Web Docs to look up things they have forgotten all the time. 
As you’ll discover, learning web development is more about problem-solving and learning patterns than it is about learning lots of syntaxes. 
Videos 
There are also a number of sites that have video learning content on them. 
YouTube is an obvious one, with channels such as Mozilla Layout Land, MozillaDeveloper, and Google ChromeDevelopers providing many useful videos. 
Many people prefer textual articles for more in-depth learning and reference material, and videos for quick explanations of concepts and new features, but it is really up to you what you prefer to learn from. 
There is no right and wrong answer here. 
Interactive code playgrounds 
You might be the kind of person that prefers minimal instructions and would prefer to jump straight in and start playing with code. 
This is also a reasonable approach, and some learning sites tend to favor it. Codecademy for example is a learning site where the tutorials mainly consist of interactive code editors where you have to directly write code and see if the desired result was achieved. 
Many MDN Web docs reference pages provide interactive examples too, where you can alter the code and see how the live result changes. 
And there is also nothing wrong with creating your own code examples on your computer, or in an online code editor like JSBin, Codepen, or Glitch. 
In fact, you’ll be called to do so as part of this course when you are learning! 
Note: Online code editors are also really useful for sharing code you’ve written, for example, if you are collaborating on learning with someone else who isn’t in the same location, or are sending it to someone to ask for help with it. 
You can share the web address of the example with them so they can see it. 
Note: You might favor one learning method over the others, but realistically a hybrid approach is probably what you will end up with. 
And you’ll probably come up with other methods than the three we covered above. 
Making a plan 
It is a good idea to create a plan to help you achieve what you want to achieve through your learning. 
A goal statement 
It sounds silly, but why not start with a single sentence that says what you want to achieve? 
The following have different scopes, but are all realistic and achievable: 
I want to become a professional web developer in two years’ time. 
I want to learn enough to build a website for my local amateur tennis club. 
I want to learn HTML and CSS so I can expand my job role to take over updating the content on our company website. 
The following are not quite as reasonable: 
I want to go from a complete beginner to becoming a senior web developer in three months. 
I want to start my own company and build a social network that will out-perform Facebook, in two years. 
What do you need to get there? 
Once you’ve worked out your goal, it is a good idea to research what you’ll need to achieve the goal. 
For example: 
Materials I need: 
A computer 
Internet access 
Pens and paper 
Knowledge I need: 
How to use HTML, CSS, JavaScript, and associated tools and best practices to build websites and web applications (we can definitely help you with this one!). 
How to get a domain, hosting, and use them to put a website or application online. 
How to run a small business. 
How to advertise my business and attract clients. 
How much time and money will it take? 
Estimate the time and cost of getting these things. 
If you’ll need to work to earn money to buy the materials required, then the time to do that will have to be factored in. 
Once you have a time estimate, you can start to build a plan around your life. 
How many hours per week do I need to dedicate? 
Once you know what you need to do and how long you think it’ll take, you can start writing out a plan to achieve your goal. 
It can be as simple as: 
“It’ll take me 500 hours to learn what I need to know, and I have a year to do it. 
If I assume 2 weeks of holiday, I’ll need to do work on this for 10 hours per week. 
I am free on evenings and weekends, so I’ll plan my time around those.” 
How much time you can spend on this of course depends on what your circumstances are. 
If you are at school, then you’ve got way more free time than if you have a job and children to provide for. 
It is still possible to achieve your goals, but you have to be realistic about how quickly you can do it. 
If you are doing a university or college course to learn web development, then most of this planning is done for you — lucky you! 
When you have worked out a weekly schedule then you should keep a record of what you manage to do each week in a simple spreadsheet or even in a notebook! 
Also, it might be a good idea to have some sub-goals worked out to allow you to keep track of where you are more easily. 
For example: 
HTML and CSS basics learned by summer 
JavaScript basics learned by December 
Example website project built by next April 
Keep thinking about how much progress you are making, and adjust your plan if needs be. 
Staying motivated 
It is hard to stay motivated, especially if you are trying to learn a complex skill like programming or web development. 
What follows are some tips to stay motivated and keep working: 

{{LearnSidebar}}{{PreviousMenuNext(“Learn/Performance/html”, “Learn/Performance/business_case_for_performance”, “Learn/Performance”)}} 
When developing a website, you need to consider how the browser is handling the CSS on your site. 
To mitigate any performance issues that CSS might be causing, you should optimize it. 
For example, you should optimize the CSS to mitigate render-blocking and minimize the number of required reflows. 
This article walks you through key CSS performance optimization techniques. Prerequisites: Basic computer literacy, basic software installed, and basic knowledge of client-side web technologies. 
Objective: To learn about the impact of CSS on website performance and how to optimize your CSS to improve performance. 
To optimize or not to optimize 
You should figure out what performance optimizations are actually needed in each project. 
Showing users an unstyled page and then repainting it after the CSS styles have been parsed would be a bad user experience. 
For this reason, CSS is render blocking until the browser determines that the CSS is required. The browser can paint the page after it has downloaded the CSS and built the CSS object model (CSSOM). 
You need to do the hard work of keeping your CSS modular and being careful and deliberate about what is added and removed. 
Split CSS into separate modules: Keeping CSS modular means that CSS not required at page load can be loaded later on, reducing initial CSS render-blocking and loading times. The simplest way to do this is by splitting up your CSS into separate files and loading only what is needed: 
<!-- Loading and parsing styles.css is render-blocking --> 
<link rel="stylesheet" href="styles.css" /> 
<!-- Loading and parsing print.css is not render-blocking --> 
<link rel="stylesheet" href="print.css" media="print" /> 
<!-- Loading and parsing mobile.css is not render-blocking on large screens --> 
<link 
rel="stylesheet" 
href="mobile.css" 
media="screen and (max-width: 480px)" /> 
By default, the browser assumes that each specified style sheet is render-blocking. 
You can tell the browser when a style sheet should be applied by adding a media attribute containing a media query. 
It is useful to preload high-priority resources that the user will encounter early on in a page so that the experience is as smooth as possible. 
Alter an element’s dimensions, such as width, height, border, and padding. Reposition an element, such as margin, top, bottom, left, and right. Change an element’s layout, such as align-content, align-items, and flex. 
Transforms opacity 
To further improve performance, you should consider moving animation work off the main thread and onto the device’s GPU (also referred to as compositing). 
This is done by choosing specific types of animations that the browser will automatically send to the GPU to handle; these include: 
3D transform animations such as transform: translateZ() and rotate3d(). Elements with certain other properties animated such as position: fixed. Elements with will-change applied (see the section below). 
Certain elements that are rendered in their own layer, including <video>, <canvas>, and <iframe>. 
However, moving animations to GPU is not always that simple. Read CSS GPU Animation: Doing It Right (smashingmagazine.com, 2016) for a very useful and detailed analysis. 
Optimizing element changes with will-change 
Browsers may set up optimizations before an element is actually changed. These kinds of optimizations can increase the responsiveness of a page by doing potentially expensive work before it is required. The CSS will-change property hints to browsers how an element is expected to change. 
Note: will-change is intended to be used as a last resort to try to deal with existing performance problems. 
It should not be used to anticipate performance problems. .element { 
will-change: opacity, transform; } 
A process called subsetting. 
Applied to the @font-face at-rule, the font-display descriptor defines how font files are loaded and displayed by the browser, allowing text to appear with a fallback font while a font loads, or fails to load. 
This improves performance by making the text visible instead of having a blank screen, with a trade-off being a flash of unstyled text. 
@font-face { 
font-family: someFont; 
src: url(/path/to/fonts/someFont.woff) format("woff"); 
font-weight: 400; 
font-style: normal; 
font-display: fallback; 
} 
contain: content; } 
A second property, {{cssxref(“contain-intrinsic-size”)}}, is also available, which allows you to provide a placeholder size for containers while they are under the effects of containment. 
This means that the containers will take up space even if their contents have not yet been renderered, allowing containment to do its performance magic without the risk of scroll bar shift and jank as elements render and come into view. 
article { 
{{PreviousMenuNext(“Learn/Performance/html”, “Learn/Performance/business_case_for_performance”, “Learn/Performance”)}} 
See also 
CSS animation performance 

{{LearnSidebar}} 
Building websites requires HTML, CSS, and JavaScript. 
To build websites and applications people want to use, which attract and retain users, you need to create a good user experience. 
Part of good user experience is ensuring the content is quick to load and responsive to user interaction. 
This is known as web performance, and in this module you’ll focus on the fundamentals of how to create performant websites. 
The rest of our beginner’s learning material tried to stick to web best practices such as performance and accessibility as much as possible, however, it is good to focus specifically on such topics too, and make sure you are familiar with them. 
Learning pathway 
While knowing HTML, CSS, and JavaScript is needed for implementing many web performance improvement recommendations, knowing how to build applications is not a necessary pre-condition for understanding and measuring web performance. 
We do however recommend that before you work through this module, you at least get a basic idea of web development by working through our Getting started with the web module. 
It would also be helpful to go a bit deeper into these topics, with modules such as: 
Introduction to HTML 
CSS first steps 
JavaScript first steps 
Once you’ve worked through this module, you’ll probably be excited to go deeper into web performance — you can find a lot of further teachings in our main MDN Web performance section, including overviews of performance APIs, testing and analysis tools, and performance bottleneck gotchas. 
Guides 
This topic contains the following guides. 
The following is a suggested order for working through them; you should definitely start with the first one. 
The “why” of web performance 
: This article discusses why web performance is important for accessibility, user experience and your business goals. 
What is web performance? 


{{LearnSidebar}}{{PreviousMenuNext(“Learn/Performance/what_is_web_performance”, “Learn/Performance/Measuring_performance”, “Learn/Performance”)}} 
Perceived performance is a subjective measure of website performance, responsiveness, and reliability. 
In other words, how fast a website seems to the user. 
It is harder to quantify and measure than the actual speed of operation, but perhaps even more important. 
This article provides a brief introduction to the factors that affect perceived performance, along with a number of tools for assessing and improving the perception. Prerequisites: 
Objective: 
To gain basic familiarity of user perception of web performance. 
Overview 
Performance metrics 

{{LearnSidebar}}{{PreviousMenu(“Learn/Performance/business_case_for_performance”, “Learn/Performance”)}} 
There are many reasons why your website should perform as well as possible. 
Below is a quick review of best practices, tools, APIs with links to provide more information about each topic. 
Best practices 
Start with learning the critical rendering path of the browser. 
Knowing this will help you understand how to improve the performance of the site. 
Using resource hints such as rel=preconnect, rel=dns-prefetch, rel=prefetch, rel=preload. 
Keep the size of JavaScript to a minimum. 
Only use as much JavaScript as needed for the current page. CSS performance factors 
Compress your resources using gzip, Brotli, and Zopfli. 
Image optimization (use CSS animation, or SVG if possible). 
It is also crucial to realize what is really important to your users. 
It might not be absolute timing, but user perception. Quick Wins CSS 
Web performance is all about user experience and perceived performance. 
As we learned in the critical rendering path document, linking CSS with a traditional link tag with rel=“stylesheet” is synchronous and blocks rendering. Optimize the rendering of your page by removing blocking CSS. 
<link 
The downside with this approach is the flash of unstyled text (FOUT.) 
These styles will improve perceived performance as the CSS does not require a file request. <style> /* Insert your CSS here */ </style> JavaScript 
Avoid JavaScript blocking by using the async or defer attributes, or link JavaScript assets after the page’s DOM elements. 
JavaScript only block rendering for elements that appear after the script tag in the DOM tree. Web Fonts 
Use WOFF and WOFF2. 
Optimize font weight to match the web font as closely as possible. 
Tools 
Try the Chrome User Experience Report which quantifies real user metrics. Define a performance budget. 
APIs Gather user metrics using the boomerang library. 
Things not to do (bad practices) Download everything 
Use uncompressed media files See also 
https://github.com/filamentgroup/loadCSS 

{{LearnSidebar}}{{PreviousMenuNext(“Learn/Performance/why_web_performance”, “Learn/Performance/Perceived_performance”, “Learn/Performance”)}} 


{{LearnSidebar}} 
MIME types describe the media type of content, either in email, or served by web servers or web applications. 
They are intended to help provide a hint as to how the content should be processed and displayed. 
Examples of MIME types: 
text/html for HTML documents. 
text/plain for plain text. 
text/css for Cascading Style Sheets. 
text/javascript for JavaScript files. 
text/markdown for Markdown files. 
application/octet-stream for binary files where user action is expected. 
Server default configurations vary wildly and set different default MIME-type values for files with no defined content type. 
Modern versions of Apache report none for files with unknown content types. 
Nginx will report text/plain if you don’t define a default content type. 
Why are correct MIME types important? 
If a web server or application reports an incorrect MIME type for content (including a “default type” for unknown content), a web browser has no way of knowing the author’s intentions. This may cause unexpected behavior. 
Some web browsers may try to guess the correct MIME type. 
This allows misconfigured web servers and applications to continue working for those browsers (but not other browsers that correctly implement the standard). 
Apart from violating the HTTP spec, this is a bad idea for a couple of other significant reasons: 
: If the browser ignores the reported MIME type, web administrators and authors no longer have control over how their content is to be processed. 
For example, a website oriented for web developers might wish to send certain example HTML documents as either text/html or text/plain in order to have the documents either processed and displayed as HTML or as source code. 
If the browser guesses the MIME type, this option is no longer available to the author. 
For this reason, these MIME types are usually restricted in terms of what actions a web browser will take when given that type of content. 
An executable program should not be executed on the user’s computer and should at least cause a dialog to appear asking the user if they wish to download the file. 
This bypassed the normal download dialog, resulting in Internet Explorer guessing that the content was an executable program and then running it on the user’s computer. 
JavaScript legacy MIME types 
When looking for information about JavaScript MIME types, you may see several MIME types that reference JavaScript. 
application/javascript 
text/ecmascript 
While browsers may support any, some, or all of these alternative MIME types, you should only use text/javascript to indicate the MIME type of JavaScript files. 
Note: See MIME types (IANA media types) for more information. 
How to determine the MIME type to set 
There are several ways to determine the correct MIME type value to be used to serve your content. 
If your content was created using commercial software, read the vendor’s documentation to see what MIME types should be reported for the application. 
Look in IANA’s MIME Media Types registry, which contains information on all registered MIME types. 
Search for the file extension in FILExt or the File extensions reference to see what MIME types are associated with that extension. 
Pay close attention as the application may have multiple MIME types that differ by only one letter. 
How to check the MIME type of received content 
In Firefox Load the file and go to Tools > Page Info to get the content type for the page you accessed. 
You can also go to Tools > Web Developer > Network and reload the page. 
The request tab gives you a list of all the resources the page loaded. 
Clicking on any resource will list all the information available, including the page’s Content-Type header. 
In Chrome Load the file and go to View > Developer > Developer Tools and choose the Network tab. 
Reload the page and select the resource you want to inspect. 
Under headers look for Content-Type and it will report the content type of the resource. 
According to the standards, the <meta> element that specifies the MIME type should be ignored if there’s a Content-Type header available. 
IANA keeps a list of registered MIME Media Types. 
The HTTP specification defines a superset of MIME types, which is used to describe the media types used on the web. 
How to set up your server to send the correct MIME types 
The goal is to configure your server to send the correct {{HTTPHeader(“Content-Type”)}} header for each document. 
If you’re using a server-side script or framework to generate content, the way to indicate the content type will depend on the tool you’re using. Check the framework or library’s documentation. 
Regardless of what server system you use, the effect you need to achieve is to set a response header with the name {{httpheader(“Content-Type”)}}, followed by a colon and space, followed by a MIME type. 
High-level environments often allow such headers to be set when generating the page. 
For example, in a PHP environment, you could set the response header for PDF resources like this: 
header('Content-Type: application/pdf') 
Trying to instead set it with just header('application/pdf') won’t work. 
Related Links 
IANA | MIME Media Types 
Hypertext Transfer Protocol — HTTP/1.1 
MIME types (IANA media types) 
Apache vs Nginx: Practical Considerations 
Migrate Apache .htaccess to Nginx server block 

{{LearnSidebar}}{{PreviousMenuNext(“Learn/Server-side/Django/Models”, “Learn/Server-side/Django/Home_page”, “Learn/Server-side/Django”)}} 
Now that we’ve created models for the LocalLibrary website, we’ll use the Django Admin site to add some “real” book data. 
First we’ll show you how to register the models with the admin site, then we’ll show you how to login and create some data. 
At the end of the article we will show some of the ways you can further improve the presentation of the Admin site. 
Prerequisites: 
First complete: Django Tutorial Part 3: Using models. 

{{LearnSidebar}}{{PreviousMenuNext(“Learn/Server-side/Django/Sessions”, “Learn/Server-side/Django/Forms”, “Learn/Server-side/Django”)}} 
In this tutorial, we’ll show you how to allow users to log in to your site with their own accounts, and how to control what they can do and see based on whether or not they are logged in and their permissions. 
As part of this demonstration, we’ll extend the LocalLibrary website, adding login and logout pages, and user- and staff-specific pages for viewing books that have been borrowed. 
Prerequisites: 
Complete all previous tutorial topics, up to and including Django Tutorial Part 7: Sessions framework. Objective: 

{{LearnSidebar}}{{PreviousMenuNext(“Learn/Server-side/Django/Testing”, “Learn/Server-side/Django/web_application_security”, “Learn/Server-side/Django”)}} 
Now you’ve created (and tested) an awesome LocalLibrary website, you’re going to want to install it on a public web server so that it can be accessed by library staff and members over the internet. This article provides an overview of how you might go about finding a host to deploy your website, and what you need to do in order to get your site ready for production. 
Prerequisites: Complete all previous tutorial topics, including Django Tutorial Part 10: Testing a Django web application. 
Objective: 
Make a few changes to your project settings. 
What is a production environment? 

{{LearnSidebar}}{{PreviousMenuNext(“Learn/Server-side/Django/Introduction”, “Learn/Server-side/Django/Tutorial_local_library_website”, “Learn/Server-side/Django”)}} 
Prerequisites: 
Basic knowledge of using a terminal/command line and how to install software packages on your development computer’s operating system. 
Objective: 





{{LearnSidebar}} 
Django is an extremely popular and fully featured server-side web framework, written in Python. 
This module shows you why Django is one of the most popular web server frameworks, how to set up a development environment, and how to start using it to create your own web applications. 
Before starting this module you don’t need to have any knowledge of Django. 
Ideally, you would need to understand what server-side web programming and web frameworks are by reading the topics in our Server-side website programming first steps module. 
A general knowledge of programming concepts and Python is recommended, but is not essential to understanding the core concepts. 
Note: Python is one of the easiest programming languages for novices to read and understand. 
That said, if you want to understand this module better, there are numerous free books and tutorials available on the internet to help you out (new programmers might want to check out the Python for Non Programmers page on the python.org wiki). 
Guides 
Django introduction 
: In this first Django article we answer the question “What is Django?” 
and give you an overview of what makes this web framework special. We’ll outline the main features, including some advanced functionality that we won’t have time to cover in detail in this module. 
We’ll also show you some of the main building blocks of a Django application, to give you an idea of what it can do before you set it up and start playing. 
Setting up a Django development environment 
: Now that you know what Django is for, we’ll show you how to set up and test a Django development environment on Windows, Linux (Ubuntu), and macOS — whatever common operating system you are using, this article should give you what you need to be able to start developing Django apps. 
Django Tutorial: The Local Library website 
: The first article in our practical tutorial series explains what you’ll learn, and provides an overview of the “local library” — an example website we’ll be working through and evolving in subsequent articles. 
Django Tutorial Part 2: Creating a skeleton website 
: This article shows how you can create a “skeleton” website project, which you can then go on to populate with site-specific settings, URLs, models, views, and templates. 
Django Tutorial Part 3: Using models 
: This article shows how to define models for the LocalLibrary website — models represent the data structures we want to store our app’s data in, and also allow Django to store data in a database for us (and modify it later on). 
It explains what a model is, how it is declared, and some of the main field types. 
It also briefly shows a few of the main ways you can access model data. 
Django Tutorial Part 4: Django admin site 
: Now that we’ve created models for the LocalLibrary website, we’ll use the Django Admin site to add some “real” book data. 
First, we’ll show you how to register the models with the admin site, then we’ll show you how to login and create some data. 
At the end, we show some ways in which you can further improve the presentation of the admin site. 
Django Tutorial Part 5: Creating our home page 
: We’re now ready to add the code to display our first full page — a home page for the LocalLibrary that shows how many records we have of each model type, and provides sidebar navigation links to our other pages. 
Along the way we’ll gain practical experience in writing basic URL maps and views, getting records from the database, and using templates. 
Django Tutorial Part 6: Generic list and detail views 
: This tutorial extends our LocalLibrary website, adding list and detail pages for books and authors. 
Here we’ll learn about generic class-based views, and show how they can reduce the amount of code you have to write for common use cases. 
We’ll also go into URL handling in greater detail, showing how to perform basic pattern matching. 
Django Tutorial Part 7: Sessions framework 
: This tutorial extends our LocalLibrary website, adding a session-based visit-counter to the home page. 
This is a relatively simple example, but it does show how you can use the session framework to provide persistent behavior for anonymous users on your own sites. 
Django Tutorial Part 8: User authentication and permissions 
: In this tutorial we’ll show you how to allow users to login to your site with their own accounts, and how to control what they can do and see based on whether or not they are logged in and their permissions. 
As part of this demonstration, we’ll extend the LocalLibrary website, adding login and logout pages, and user- and staff-specific pages for viewing books that have been borrowed. 
Django Tutorial Part 9: Working with forms 
: In this tutorial we’ll show you how to work with HTML Forms in Django, and in particular the easiest way to write forms to create, update and delete model instances. 
As part of this demonstration, we’ll extend the LocalLibrary website so that librarians can renew books, and create, update, and delete authors using our own forms (rather than using the admin application). 
Django Tutorial Part 10: Testing a Django web application 
: As websites grow they become harder to test manually — not only is there more to test, but, as the interactions between components become more complex, a small change in one area can require many additional tests to verify its impact on other areas. 
One way to mitigate these problems is to write automated tests, which can easily and reliably be run every time you make a change. 
This tutorial shows how to automate unit testing of your website using Django’s test framework. 
Django Tutorial Part 11: Deploying Django to production 
: Now you’ve created (and tested) an awesome LocalLibrary website, you’re going to want to install it on a public web server so that it can be accessed by library staff and members over the internet. 
This article provides an overview of how you might go about finding a host to deploy your website, and what you need to do in order to get your site ready for production. 
Django web application security 
: Protecting user data is an essential part of any website design. We previously explained some of the more common security threats in the article Web security — this article provides a practical demonstration of how Django’s built-in protections handle such threats. 
Assessments 
The following assessment will test your understanding of how to create a website using Django, as described in the guides listed above. 
DIY Django mini blog 
: In this assessment you’ll use some of the knowledge you’ve learned from this module to create your own blog. 

{{LearnSidebar}}{{NextMenu(“Learn/Server-side/Django/development_environment”, “Learn/Server-side/Django”)}} 
In this first Django article, we answer the question “What is Django?” and give you an overview of what makes this web framework special. 
We’ll outline the main features, including some of the advanced functionality that we won’t have time to cover in detail in this module. 
A general understanding of server-side website programming, and in particular the mechanics of client-server interactions in websites. 
Objective: 
What is Django? 
It is free and open source, has a thriving and active community, great documentation, and many options for free and paid-for support. 
Complete 
: Django follows the “Batteries included” philosophy and provides almost everything developers might want to do “out of the box”. 

{{LearnSidebar}}{{PreviousMenuNext(“Learn/Server-side/Django/skeleton_website”, “Learn/Server-side/Django/Admin_site”, “Learn/Server-side/Django”)}} 
It explains what a model is, how it is declared, and some of the main field types. It also briefly shows a few of the main ways you can access model data. 
Prerequisites: 
Django Tutorial Part 2: Creating a skeleton website. 
Objective: 
This tutorial shows how to define and access the models for the LocalLibrary website example. 



{{LearnSidebar}}{{PreviousMenuNext(“Learn/Server-side/Django/Forms”, “Learn/Server-side/Django/Deployment”, “Learn/Server-side/Django”)}} 
As websites grow they become harder to test manually. 
Not only is there more to test, but, as interactions between components become more complex, a small change in one area can impact other areas, so more changes will be required to ensure everything keeps working and errors are not introduced as more changes are made. 
One way to mitigate these problems is to write automated tests, which can easily and reliably be run every time you make a change. 
This tutorial shows how to automate unit testing of your website using Django’s test framework. 
Prerequisites: 
Complete all previous tutorial topics, including Django Tutorial Part 9: Working with forms. Objective: 

{{LearnSidebar}}{{PreviousMenuNext(“Learn/Server-side/Django/development_environment”, “Learn/Server-side/Django/skeleton_website”, “Learn/Server-side/Django”)}} 
For the following articles you’ll also need to have set up a Django development environment. 
Use Django’s tools to create a skeleton website and application. 
Start and stop the development server. Create models to represent your application’s data. 
Work with forms. 
Write test code for your app. 
Use Django’s security effectively. Deploy your application to production. 
Summary 
Now that you know a bit more about the LocalLibrary website and what you’re going to learn, it’s time to start creating a skeleton project to contain our example. 


{{LearnSidebar}}{{PreviousMenu(“Learn/Server-side/Express_Nodejs/forms”, “Learn/Server-side/Express_Nodejs”)}} 
Now you’ve created (and tested) an awesome LocalLibrary website, you’re going to want to install it on a public web server so that it can be accessed by library staff and members over the Internet. 
This article provides an overview of how you might go about finding a host to deploy your website, and what you need to do in order to get your site ready for production. 
Prerequisites: 
Complete all previous tutorial topics, including Express Tutorial Part 6: Working with forms. 
Objective: 
Before you can host a website externally you’re first going to have to: Choose an environment for hosting the Express app. 


The author detail page needs to display the information about the specified Author, identified using their (automatically generated) _id field value, along with a list of all the Book objects associated with that Author. 
Controller 
Open /controllers/authorController.js. 
Add the following lines to the top of the file to require() the Book module needed by the author detail page (other modules such as “express-async-handler” should already be present). 
const Book = require("../models/book"); 
Find the exported author_detail() controller method and replace it with the following code. 
// Display detail page for a specific Author. 
exports.author_detail = asyncHandler(async (req, res, next) => { 
// Get details of author and all their books (in parallel) 
const [author, allBooksByAuthor] = await Promise.all([ 
Author.findById(req.params.id).exec(), 
Book.find({ author: req.params.id }, "title summary").exec(), 
]); 
if (author === null) { 
// No results. 
const err = new Error("Author not found"); 
err.status = 404; 
return next(err); 
} 
res.render("author_detail", { 
title: "Author Detail", 
author: author, 
author_books: allBooksByAuthor, 
}); 
}); 
The approach is exactly the same as described for the Genre detail page. The route controller function uses Promise.all() to query the specified Author and their associated Book instances in parallel. 
If no matching author is found an Error object is sent to the Express error handling middleware. 
View 
Create /views/author_detail.pug and copy in the following text. 
extends layout 
block content 
h1 Author: #{author.name} 
p #{author.date_of_birth} - #{author.date_of_death} 
div(style='margin-left:20px;margin-top:20px') 
h4 Books 
dl 
each book in author_books 
dt 
a(href=book.url) #{book.title} 
dd #{book.summary} 
else 
p This author has no books. 
Everything in this template has been demonstrated in previous sections. 
What does it look like? 
Run the application and open your browser to http://localhost:3000/. 
Select the All Authors link, then select one of the authors. 
If everything is set up correctly, your site should look something like the following screenshot. 
Author Detail Page - Express Local Library site 
Note: The appearance of the author lifespan dates is ugly! 
We’ll address that in the final challenge in this article. 
Next steps 
Return to Express Tutorial Part 5: Displaying library data. 
Proceed to final subarticle of part 5 : BookInstance detail page and challenge. 

The author list page needs to display a list of all authors in the database, with each author name linked to its associated author detail page. 
The date of birth and date of death should be listed after the name on the same line. 
Controller 
The author list controller function needs to get a list of all Author instances, and then pass these to the template for rendering. 
Open /controllers/authorController.js. 
Find the exported author_list() controller method near the top of the file and replace it with the following code. 
// Display list of all Authors. 
exports.author_list = asyncHandler(async (req, res, next) => { 
const allAuthors = await Author.find().sort({ family_name: 1 }).exec(); 
res.render("author_list", { 
title: "Author List", 
author_list: allAuthors, 
}); 
}); 
The route controller function follows the same pattern as for the other list pages. 
It defines a query on the Author model, using the find() function to get all authors, and the sort() method to sort them by family_name in alphabetic order. exec() is daisy-chained on the end in order to execute the query and return a promise that the function can await. 
Once the promise is fulfilled the route handler renders the author_list(.pug) template, passing the page title and the list of authors (allAuthors) using template keys. 
View 
Create /views/author_list.pug and replace its content with the text below. 
extends layout 
block content 
h1= title 
ul 
each author in author_list 
li 
a(href=author.url) #{author.name} 
| (#{author.date_of_birth} - #{author.date_of_death}) 
else 
li There are no authors. 
Run the application and open your browser to http://localhost:3000/. 
Then select the All authors link. 
If everything is set up correctly, the page should look something like the following screenshot. 
Author List Page - Express Local Library site 
Note: The appearance of the author lifespan dates is ugly! 
You can improve this using the same approach as we used for the BookInstance list (adding the virtual property for the lifespan to the Author model). 
However, as the author may not be dead or may have missing birth/death data, in this case we need to ignore missing dates or references to nonexistent properties. 
One way to deal with this is to return either a formatted date, or a blank string, depending on whether the property is defined. 
For example: 
return this.date_of_birth ? 
DateTime.fromJSDate(this.date_of_birth).toLocaleString(DateTime.DATE_MED) : ''; 
Genre list page—challenge! 
In this section you should implement your own genre list page. 
The page should display a list of all genres in the database, with each genre linked to its associated detail page. 
A screenshot of the expected result is shown below. 
Genre List - Express Local Library site 
The genre list controller function needs to get a list of all Genre instances, and then pass these to the template for rendering. 
You will need to edit genre_list() in /controllers/genreController.js. 
The implementation is almost exactly the same as the author_list() controller. 
Sort the results by name, in ascending order. 
The template to be rendered should be named genre_list.pug. 
The template to be rendered should be passed the variables title (‘Genre List’) and genre_list (the list of genres returned from your Genre.find() callback). 
The view should match the screenshot/requirements above (this should have a very similar structure/format to the Author list view, except for the fact that genres do not have dates). 
Next steps 
Return to Express Tutorial Part 5: Displaying library data. 
Proceed to the next subarticle of part 5: Genre detail page. 


BookInstance detail page 
The BookInstance detail page needs to display the information for each BookInstance, identified using its (automatically generated) _id field value. 
This will include the Book name (as a link to the Book detail page) along with other information in the record. 
Controller 
Open /controllers/bookinstanceController.js. Find the exported bookinstance_detail() controller method and replace it with the following code. 
// Display detail page for a specific BookInstance. 
exports.bookinstance_detail = asyncHandler(async (req, res, next) => { 
const bookInstance = await BookInstance.findById(req.params.id) 
.populate("book") 
.exec(); 
if (bookInstance === null) { 
// No results. 
const err = new Error("Book copy not found"); 
err.status = 404; 
return next(err); 
} 
res.render("bookinstance_detail", { 
title: "Book:", 
bookinstance: bookInstance, 
}); 
}); 
The route controller function calls BookInstance.findById() with the ID of a specific book instance extracted from the URL (using the route), and accessed within the controller via the request parameters: req.params.id. 
It then calls populate() to get the details of the associated Book. 
View 
Create /views/bookinstance_detail.pug and copy in the content below. 
extends layout 
block content 
h1 ID: #{bookinstance._id} 
p #[strong Title:] 
a(href=bookinstance.book.url) #{bookinstance.book.title} 
p #[strong Imprint:] #{bookinstance.imprint} 
p #[strong Status:] 
if bookinstance.status=='Available' 
span.text-success #{bookinstance.status} 
else if bookinstance.status=='Maintenance' 
span.text-danger #{bookinstance.status} 
else 
span.text-warning #{bookinstance.status} 
if bookinstance.status! 
='Available' 
p #[strong Due back:] #{bookinstance.due_back} 
Everything in this template has been demonstrated in previous sections. 
What does it look like? 
Run the application and open your browser to http://localhost:3000/. 
Select the All book-instances link, then select one of the items. 
If everything is set up correctly, your site should look something like the following screenshot. 
BookInstance Detail Page - Express Local Library site 
Challenge 

Next we’ll implement our list of all book copies (BookInstance) in the library. 
This page needs to include the title of the Book associated with each BookInstance (linked to its detail page) along with other information in the BookInstance model, including the status, imprint, and unique id of each copy. 
The unique id text should be linked to the BookInstance detail page. 
Controller 
The BookInstance list controller function needs to get a list of all book instances, populate the associated book information, and then pass the list to the template for rendering. 
Open /controllers/bookinstanceController.js. 
Find the exported bookinstance_list() controller method and replace it with the following code. 
// Display list of all BookInstances. 
exports.bookinstance_list = asyncHandler(async (req, res, next) => { 
const allBookInstances = await BookInstance.find().populate("book").exec(); 
res.render("bookinstance_list", { 
title: "Book Instance List", 
bookinstance_list: allBookInstances, 
}); 
}); 
The route handler uses await to wait on the promise, pausing execution until it is settled. 
If the promise is fulfilled, the results of the query are saved to the allBookInstances variable, and the route handler continues execution. 
The last part of the code calls render(), specifying the bookinstance_list (.pug) template and passing values for the title and bookinstance_list into the template. 
View 
Create /views/bookinstance_list.pug and copy in the text below. 
extends layout 
block content 
h1= title 
ul 
each val in bookinstance_list 
li 
a(href=val.url) #{val.book.title} : #{val.imprint} - 
if val.status=='Available' 
span.text-success #{val.status} 
else if val.status=='Maintenance' 
span.text-danger #{val.status} 
else 
span.text-warning #{val.status} 
if val.status! 
='Available' 
span (Due: #{val.due_back} ) 
else 
li There are no book copies in this library. 
This view is much the same as all the others. 
It extends the layout, replacing the content block, displays the title passed in from the controller, and iterates through all the book copies in bookinstance_list. 
For each copy we display its status (color coded) and if the book is not available, its expected return date. 
One new feature is introduced—we can use dot notation after a tag to assign a class. 
So span.text-success will be compiled to <span class="text-success"> (and might also be written in Pug as span(class="text-success"). 
What does it look like? 
Run the application, open your browser to http://localhost:3000/, then select the All book-instances link. 
If everything is set up correctly, your site should look something like the following screenshot. 
BookInstance List Page - Express Local Library site 
Next steps 
Return to Express Tutorial Part 5: Displaying library data. 
Proceed to the next subarticle of part 5: Date formatting using luxon. 

Next we’ll implement our book list page. 
This page needs to display a list of all books in the database along with their author, with each book title being a hyperlink to its associated book detail page. 
Controller 
The book list controller function needs to get a list of all Book objects in the database, sort them, and then pass these to the template for rendering. 
Open /controllers/bookController.js. 
Find the exported book_list() controller method and replace it with the following code. 
// Display list of all books. 
exports.book_list = asyncHandler(async (req, res, next) => { 
const allBooks = await Book.find({}, "title author") 
.sort({ title: 1 }) 
.populate("author") 
.exec(); 
res.render("book_list", { title: "Book List", book_list: allBooks }); 
}); 
We also call populate() on Book, specifying the author field—this will replace the stored book author id with the full author details. exec() is then daisy-chained on the end in order to execute the query and return a promise. 
The route handler uses await to wait on the promise, pausing execution until it is settled. If the promise is fulfilled, the results of the query are saved to the allBooks variable and the handler continues execution. 
The final part of the route handler calls render(), specifying the book_list (.pug) template and passing values for the title and book_list into the template. 
View 
Create /views/book_list.pug and copy in the text below. 
extends layout 
block content 
h1= title 
ul 
each book in book_list 
li 
a(href=book.url) #{book.title} 
| (#{book.author.name}) 
else 
li There are no books. 
The view extends the layout.pug base template and overrides the block named ‘content’. 
It displays the title we passed in from the controller (via the render() method) and iterates through the book_list variable using the each-in-else syntax. 
A list item is created for each book displaying the book title as a link to the book’s detail page followed by the author name. 
If there are no books in the book_list then the else clause is executed, and displays the text ‘There are no books’. 
Note: We use book.url to provide the link to the detail record for each book (we’ve implemented this route, but not the page yet). 
This is a virtual property of the Book model which uses the model instance’s _id field to produce a unique URL path. 
Of interest here is that each book is defined as two lines, using the pipe for the second line. 
This approach is needed because if the author name were on the previous line then it would be part of the hyperlink. 
What does it look like? 
Run the application (see Testing the routes for the relevant commands) and open your browser to http://localhost:3000/. 
Then select the All books link. 
If everything is set up correctly, your site should look something like the following screenshot. 
Book List Page - Express Local Library site 
Next steps 
Return to Express Tutorial Part 5: Displaying library data. 
Proceed to the next subarticle of part 5: BookInstance list page. 

The default rendering of dates from our models is very ugly: Mon Apr 10 2020 15:49:58 GMT+1100 (AUS Eastern Daylight Time). 
In this section we’ll show how you can update the BookInstance List page from the previous section to present the due_date field in a more friendly format: Apr 10th, 2023. 
The approach we will use is to create a virtual property in our BookInstance model that returns the formatted date. 
We’ll do the actual formatting using luxon, a powerful, modern, and friendly library for parsing, validating, manipulating, formatting and localising dates. 
Note: It is possible to use luxon to format the strings directly in our Pug templates, or we could format the string in a number of other places. 
Using a virtual property allows us to get the formatted date in exactly the same way as we get the due_date currently. 
Install luxon 
Enter the following command in the root of the project: 
npm install luxon 
Create the virtual property 
Open ./models/bookinstance.js. 
At the top of the page, import luxon. 
const { DateTime } = require("luxon"); 
Add the virtual property due_back_formatted just after the URL property. 
BookInstanceSchema.virtual("due_back_formatted").get(function () { 
return DateTime.fromJSDate(this.due_back).toLocaleString(DateTime.DATE_MED); 
}); 
Note: Luxon can import strings in many formats and export to both predefined and free-form formats. 
For information about other formats and date string internationalization see the Luxon documentation on formatting. 
Update the view 
Open /views/bookinstance_list.pug and replace due_back with due_back_formatted. 
if val.status ! 
= 'Available' 
//span (Due: #{val.due_back} ) 
span (Due: #{val.due_back_formatted} ) 
That’s it. 
If you go to All book-instances in the sidebar, you should now see all the due dates are far more attractive! 
Next steps 
Return to Express Tutorial Part 5: Displaying library data. 
Proceed to the next subarticle of part 5: Author list page and Genre list page challenge. 

The genre detail page needs to display the information for a particular genre instance, using its automatically generated _id field value as the identifier. 
The ID of the required genre record is encoded at the end of the URL and extracted automatically based on the route definition (/genre/:id). 
Controller 
Open /controllers/genreController.js and require the Book module at the top of the file (the file should already require() the Genre module and “express-async-handler”). 
const Book = require("../models/book"); 
Find the exported genre_detail() controller method and replace it with the following code. 
// Display detail page for a specific Genre. 
exports.genre_detail = asyncHandler(async (req, res, next) => { 
// Get details of genre and all associated books (in parallel) 
const [genre, booksInGenre] = await Promise.all([ 
Genre.findById(req.params.id).exec(), 
Book.find({ genre: req.params.id }, "title summary").exec(), 
]); 
if (genre === null) { 
// No results. 
const err = new Error("Genre not found"); 
err.status = 404; 
return next(err); 
} 
res.render("genre_detail", { 
title: "Genre Detail", 
genre: genre, 
genre_books: booksInGenre, 
}); 
}); 
We first use Genre.findById() to get Genre information for a specific ID, and Book.find() to get all books records that have that same associated genre ID. 
Because the two requests do not depend on each other, we use Promise.all() to run the database queries in parallel (this same approach for running queries in parallel was demonstrated in the home page). 

The first page we’ll create will be the website home page, which is accessible from either the site (/) or catalog (catalog/) root. 
This will display some static text describing the site, along with dynamically calculated “counts” of different record types in the database. 
We’ve already created a route for the home page. 
In order to complete the page we need to update our controller function to fetch “counts” of records from the database, and create a view (template) that we can use to render the page. 
Route 
We created our index page routes in a previous tutorial. 
As a reminder, all the route functions are defined in /routes/catalog.js: 
// GET catalog home page. 
router.get("/", book_controller.index); //This actually maps to /catalog/ because we import the route with a /catalog prefix 
The book controller index function passed as a parameter (book_controller.index) has a “placeholder” implementation defined in /controllers/bookController.js: 
exports.index = asyncHandler(async (req, res, next) => { 
res.send("NOT IMPLEMENTED: Site Home Page"); 
}); 
It is this controller function that we extend to get information from our models and then render it using a template (view). 
Controller 
The index controller function needs to fetch information about how many Book, BookInstance (all), BookInstance (available), Author, and Genre records we have in the database, render this data in a template to create an HTML page, and then return it in an HTTP response. 
Open /controllers/bookController.js. 
Near the top of the file you should see the exported index() function. 
const Book = require("../models/book"); 
const asyncHandler = require("express-async-handler"); 
exports.index = asyncHandler(async (req, res, next) => { 
res.send("NOT IMPLEMENTED: Site Home Page"); 
}); 
Replace all the code above with the following code fragment. 
The first thing this does is import (require()) all the models. 
We need to do this because we’ll be using them to get our counts of documents. 
The code also requires “express-async-handler”, which provides a wrapper to catch exceptions thrown in route handler functions. 
const Book = require("../models/book"); 
const Author = require("../models/author"); 
const Genre = require("../models/genre"); 
const BookInstance = require("../models/bookinstance"); 
const asyncHandler = require("express-async-handler"); 
exports.index = asyncHandler(async (req, res, next) => { 
const [ numBooks, 
numBookInstances, 
numAvailableBookInstances, 
numAuthors, numGenres, ] = await Promise.all([ 
Book.countDocuments({}).exec(), 
BookInstance.countDocuments({}).exec(), 
BookInstance.countDocuments({ status: "Available" }).exec(), 
Author.countDocuments({}).exec(), 
Genre.countDocuments({}).exec(), 
]); 
res.render("index", { 
title: "Local Library Home", 
book_count: numBooks, 
book_instance_count: numBookInstances, 
book_instance_available_count: numAvailableBookInstances, 
author_count: numAuthors, 
genre_count: numGenres, 
}); 
}); 
This method is called on a model, with an optional set of conditions to match against, and returns a Query object. 
Because the queries for document counts are independent of each other we use Promise.all() to run them in parallel. 
The method returns a new promise that we await for completion (execution pauses within this function at await). 
We then call res.render(), specifying a view (template) named ‘index’ and objects mapping the results of the database queries to the view template. 
The data is supplied as key-value pairs, and can be accessed in the template using the key. 
Note that the code is very simple because we can assume that the database queries succeed. If any of the database operations fail, the exception that is thrown will be caught by asyncHandler() and passed to the next middleware handler in the chain. 
View 
Open /views/index.pug and replace its content with the text below. 
extends layout 
block content 
h1= title 
p Welcome to #[em LocalLibrary], a very basic Express website developed as a tutorial example on the Mozilla Developer Network. 
h1 Dynamic content 
p The library has the following record counts: 
ul 
li #[strong Books:] !{ 
book_count} 
li #[strong Copies:] !{ 
book_instance_count} 
li #[strong Copies available:] !{ 
book_instance_available_count} 
li #[strong Authors:] !{ 
author_count} 
li #[strong Genres:] !{ 
genre_count} 
The view is straightforward. 
We extend the layout.pug base template, overriding the block named ‘content’. 
The first h1 heading will be the escaped text for the title variable that was passed into the render() function—note the use of the ‘h1=’ so that the following text is treated as a JavaScript expression. 
We then include a paragraph introducing the LocalLibrary. 
Under the Dynamic content heading we list the number of copies of each model. 
Note that the template values for the data are the keys that were specified when render() was called in the route handler function. 



A template is a text file defining the structure or layout of an output file, with placeholders used to represent where data will be inserted when the template is rendered (in Express, templates are referred to as views). 
Express template choices 
Express can be used with many different template rendering engines. 
In this tutorial we use Pug (formerly known as Jade) for our templates. 
This is the most popular Node template language, and describes itself as a “clean, whitespace-sensitive syntax for writing HTML, heavily influenced by Haml”. 
Different template languages use different approaches for defining layout and marking placeholders for data—some use HTML to define the layout while others use different markup formats that can be transpiled to HTML. 
Pug is of the second type; it uses a representation of HTML where the first word in any line usually represents an HTML element, and indentation on subsequent lines is used to represent nesting. 
The result is a page definition that translates directly to HTML, but is more concise and arguably easier to read. 
Note: The downside of using Pug is that it is sensitive to indentation and whitespace (if you add an extra space in the wrong place you may get an unhelpful error code). 
Once you have your templates in place, however, they are very easy to read and maintain. 
Template configuration 
The LocalLibrary was configured to use Pug when we created the skeleton website. 
You should see the pug module included as a dependency in the website’s package.json file, and the following configuration settings in the app.js file. 
The settings tell us that we’re using pug as the view engine, and that Express should search for templates in the /views subdirectory. 
// View engine setup 
app.set("views", path.join(__dirname, "views")); 
app.set("view engine", "pug"); 
If you look in the views directory you will see the .pug files for the project’s default views. 
These include the view for the home page (index.pug) and base template (layout.pug) that we will need to replace with our own content. 
/express-locallibrary-tutorial //the project root 
/views 
error.pug 
index.pug 
layout.pug 
Template syntax 
The example template file below shows off many of Pug’s most useful features. 

This subarticle shows how to define a page for creating Author objects. 
Import validation and sanitization methods 
As with the genre form, to use express-validator we have to require the functions we want to use. 
Open /controllers/authorController.js, and add the following line at the top of the file (above the route functions): 
const { body, validationResult } = require("express-validator"); 
Controller—get route 
Find the exported author_create_get() controller method and replace it with the following code. 
This renders the author_form.pug view, passing a title variable. 
// Display Author create form on GET. 
exports.author_create_get = (req, res, next) => { 
res.render("author_form", { title: "Create Author" }); 
}; 
Controller—post route 
Find the exported author_create_post() controller method, and replace it with the following code. 
// Handle Author create on POST. 
exports.author_create_post = [ 
// Validate and sanitize fields. 
body("first_name") 
.isLength({ min: 1 }) 
.escape() 
.withMessage("First name must be specified.") 
.isAlphanumeric() 
.withMessage("First name has non-alphanumeric characters."), 
body("family_name") 
.isLength({ min: 1 }) 
.escape() 
.withMessage("Family name must be specified.") 
.isAlphanumeric() 
.withMessage("Family name has non-alphanumeric characters."), 
body("date_of_birth", "Invalid date of birth") 
.optional({ values: "falsy" }) 
.isISO8601() 
body("date_of_death", "Invalid date of death") 
.optional({ values: "falsy" }) 
.isISO8601() 
.toDate(), 
// Process request after validation and sanitization. 
asyncHandler(async (req, res, next) => { 
// Extract the validation errors from a request. 
const errors = validationResult(req); 
// Create Author object with escaped and trimmed data 
const author = new Author({ 
first_name: req.body.first_name, 
family_name: req.body.family_name, 
if (! 
errors.isEmpty()) { 
// There are errors. 
Render form again with sanitized values/errors messages. 
res.render("author_form", { 
title: "Create Author", 
author: author, 
errors: errors.array(), 
}); 
return; 
} else { 
// Data from form is valid. 
// Save author. 
await author.save(); 
// Redirect to new author record. 
res.redirect(author.url); 
} 
}), 
]; 
The structure and behavior of this code is almost exactly the same as for creating a Genre object. 
First we validate and sanitize the data. 
If the data is invalid then we re-display the form along with the data that was originally entered by the user and a list of error messages. 
If the data is valid then we save the new author record and redirect the user to the author detail page. 
Unlike with the Genre post handler, we don’t check whether the Author object already exists before saving it. 
Arguably we should, though as it is now we can have multiple authors with the same name. 
The validation code demonstrates several new features: 
We can daisy chain validators, using withMessage() to specify the error message to display if the previous validation method fails. 
This makes it very easy to provide specific error messages without lots of code duplication. [ // Validate and sanitize fields. 
body("first_name") 
.trim() .isLength({ min: 1 }) .escape() .withMessage("First name must be specified.") 
.isAlphanumeric() .withMessage("First name has non-alphanumeric characters."), // … ]; 
We can use the optional() function to run a subsequent validation only if a field has been entered (this allows us to validate optional fields). 
For example, below we check that the optional date of birth is an ISO8601-compliant date (the { values: "falsy" } object passed means that we’ll accept either an empty string or null as an empty value). 
[ body("date_of_birth", "Invalid date of birth") .optional({ values: "falsy" }) .isISO8601() .toDate(), ]; 
Parameters are received from the request as strings. 
We can use toDate() (or toBoolean()) to cast these to the proper JavaScript types (as shown at the end of the validator chain above). 
View 
Create /views/author_form.pug and copy in the text below. 
extends layout 
block content 
h1=title 
form(method='POST' action='') 
div.form-group 
label(for='first_name') First Name: 
input#first_name.form-control(type='text' placeholder='First name' name='first_name' required='true' value=(undefined===author ? 
'' : author.first_name) ) 
label(for='family_name') Family Name: 
input#family_name.form-control(type='text' placeholder='Family name' name='family_name' required='true' value=(undefined===author ? 
'' : author.family_name)) 
div.form-group 
label(for='date_of_birth') Date of birth: 
input#date_of_birth.form-control(type='date' name='date_of_birth' value=(undefined===author ? 
'' : author.date_of_birth) ) 
button.btn.btn-primary(type='submit') Submit 
if errors 
ul 
for error in errors 
li! 
= error.msg 
The structure and behavior for this view is exactly the same as for the genre_form.pug template, so we won’t describe it again. 
Note: Some browsers don’t support the input type="date", so you won’t get the datepicker widget or the default dd/mm/yyyy placeholder, but will instead get an empty plain text field. 
One workaround is to explicitly add the attribute placeholder='dd/mm/yyyy' so that on less capable browsers you will still get information about the desired text format. 
Challenge: Adding the date of death 
The template above is missing a field for entering the date_of_death. 
Create the field following the same pattern as the date of birth form group! 
What does it look like? 
Run the application, open your browser to http://localhost:3000/, then select the Create new author link. 
If everything is set up correctly, your site should look something like the following screenshot. 
After you enter a value, it should be saved and you’ll be taken to the author detail page. 
Author Create Page - Express Local Library site 
Note: If you experiment with various input formats for the dates, you may find that the format yyyy-mm-dd misbehaves. 
This is because JavaScript treats date strings as including the time of 0 hours, but additionally treats date strings in that format (the ISO 8601 standard) as including the time 0 hours UTC, rather than the local time. 
If your time zone is west of UTC, the date display, being local, will be one day before the date you entered. 
This is one of several complexities (such as multi-word family names and multi-author books) that we are not addressing here. 
Next steps 
Return to Express Tutorial Part 6: Working with forms. 
Proceed to the next subarticle of part 6: Create Book form. 

This subarticle shows how to define a page/form to create Book objects. 
This is a little more complicated than the equivalent Author or Genre pages because we need to get and display available Author and Genre records in our Book form. 
Import validation and sanitization methods 
Open /controllers/bookController.js, and add the following line at the top of the file (before the route functions): 
const { body, validationResult } = require("express-validator"); 
Controller—get route 
Find the exported book_create_get() controller method and replace it with the following code: 
// Display book create form on GET. 
exports.book_create_get = asyncHandler(async (req, res, next) => { 
// Get all authors and genres, which we can use for adding to our book. 
const [allAuthors, allGenres] = await Promise.all([ 
Author.find().exec(), 
Genre.find().exec(), 
]); 
res.render("book_form", { 
title: "Create Book", 
authors: allAuthors, 
genres: allGenres, 
}); 
}); 
This uses await on the result of Promise.all() to get all Author and Genre objects in parallel (the same approach used in Express Tutorial Part 5: Displaying library data). 
These are then passed to the view book_form.pug as variables named authors and genres (along with the page title). 
Controller—post route 
Find the exported book_create_post() controller method and replace it with the following code. 
// Handle book create on POST. 
exports.book_create_post = [ 
// Convert the genre to an array. 
(req, res, next) => { 
if (! 
(req.body.genre instanceof Array)) { 
if (typeof req.body.genre === "undefined") req.body.genre = []; 
else req.body.genre = new Array(req.body.genre); 
} 
next(); 
}, 
// Validate and sanitize fields. 
.trim() .isLength({ min: 1 }) .escape(), body("author", "Author must not be empty.") 
.trim() .isLength({ min: 1 }) .escape(), 
body("summary", "Summary must not be empty.") 
.trim() .isLength({ min: 1 }) 
.escape(), 
body("isbn", "ISBN must not be empty").trim().isLength({ min: 1 }).escape(), 
body("genre.*").escape(), 
// Process request after validation and sanitization. 
asyncHandler(async (req, res, next) => { 
// Extract the validation errors from a request. 
const errors = validationResult(req); 
// Create a Book object with escaped and trimmed data. 
const book = new Book({ 
title: req.body.title, 
author: req.body.author, 
summary: req.body.summary, 
isbn: req.body.isbn, 
genre: req.body.genre, 
}); 
if (! 
errors.isEmpty()) { 
// There are errors. 
Render form again with sanitized values/error messages. 
// Get all authors and genres for form. 
const [allAuthors, allGenres] = await Promise.all([ 
Author.find().exec(), 
Genre.find().exec(), 
]); 
// Mark our selected genres as checked. 
for (const genre of allGenres) { 
if (book.genre.includes(genre._id)) { 
genre.checked = "true"; 
} 
} 
res.render("book_form", { 
title: "Create Book", 
authors: allAuthors, 
genres: allGenres, book: book, 
errors: errors.array(), 
}); 
} else { 
// Data from form is valid. 
Save book. 
await book.save(); 
res.redirect(book.url); 
} 
}), 
]; 
The structure and behavior of this code is almost exactly the same as the post route functions for the Genre and Author forms. 
First we validate and sanitize the data. 
If the data is invalid then we re-display the form along with the data that was originally entered by the user and a list of error messages. 
If the data is valid, we then save the new Book record and redirect the user to the book detail page. 
The main difference with respect to the other form handling code is how we sanitize the genre information. 
The form returns an array of Genre items (while for other fields it returns a string). 
In order to validate the information we first convert the request to an array (required for the next step). 
[ 
// Convert the genre to an array. 
(req, res, next) => { 
if (! 
Array.isArray(req.body.genre)) { 
req.body.genre = 
typeof req.body.genre === "undefined" ? 
[] : [req.body.genre]; 
} 
next(); 
}, 
We then use a wildcard (*) in the sanitizer to individually validate each of the genre array entries. 
The code below shows how - this translates to “sanitize every item below key genre”. [ 
// … body("genre.*").escape(), // … ]; 
The final difference with respect to the other form handling code is that we need to pass in all existing genres and authors to the form. 
In order to mark the genres that were checked by the user we iterate through all the genres and add the checked="true" parameter to those that were in our post data (as reproduced in the code fragment below). 
// Mark our selected genres as checked. 
for (const genre of allGenres) { 
if (book.genre.includes(genre._id)) { 
genre.checked = "true"; 
} 
} 
View 
Create /views/book_form.pug and copy in the text below. 
extends layout 
block content 
h1= title 
form(method='POST' action='') 
div.form-group 
label(for='title') Title: 
input#title.form-control(type='text', placeholder='Name of book' name='title' required='true' value=(undefined===book ? 
'' : book.title) ) 
div.form-group 
label(for='author') Author: 
select#author.form-control(type='select', placeholder='Select author' name='author' required='true' ) 
for author in authors 
if book 
option(value=author._id selected=(author._id.toString()===book.author._id.toString() ? 
'selected' : false) ) #{author.name} 
else 
option(value=author._id) #{author.name} 
div.form-group 
label(for='summary') Summary: 
textarea#summary.form-control(type='textarea', placeholder='Summary' name='summary' required='true') #{undefined===book ? 
'' : book.summary} 
div.form-group 
label(for='isbn') ISBN: 
input#isbn.form-control(type='text', placeholder='ISBN13' name='isbn' value=(undefined===book ? 
'' : book.isbn) required='true') 
div.form-group 
label Genre: 
div 
for genre in genres 
div(style='display: inline; padding-right:10px;') 
input.checkbox-input(type='checkbox', name='genre', id=genre._id, value=genre._id, checked=genre.checked ) 
label(for=genre._id) #{genre.name} 
button.btn.btn-primary(type='submit') Submit 
if errors 
ul 
for error in errors 
li! 
= error.msg 
The view structure and behavior is almost the same as for the genre_form.pug template. 
The main differences are in how we implement the selection-type fields: Author and Genre. 
The set of genres are displayed as checkboxes, and use the checked value we set in the controller to determine whether or not the box should be selected. 

This subarticle shows how to define a page/form to create BookInstance objects. 
This is very much like the form we used to create Book objects. 
Import validation and sanitization methods 
Open /controllers/bookinstanceController.js, and add the following lines at the top of the file: 
const { body, validationResult } = require("express-validator"); 
Controller—get route 
At the top of the file, require the Book module (needed because each BookInstance is associated with a particular Book). 
const Book = require("../models/book"); 
Find the exported bookinstance_create_get() controller method and replace it with the following code. 
// Display BookInstance create form on GET. 
exports.bookinstance_create_get = asyncHandler(async (req, res, next) => { 
const allBooks = await Book.find({}, "title").exec(); 
res.render("bookinstance_form", { 
title: "Create BookInstance", 
book_list: allBooks, 
}); 
}); 
The controller gets a list of all books (allBooks) and passes it via book_list to the view bookinstance_form.pug (along with a title). 
Controller—post route 
Find the exported bookinstance_create_post() controller method and replace it with the following code. 
// Handle BookInstance create on POST. 
exports.bookinstance_create_post = [ 
// Validate and sanitize fields. 
body("book", "Book must be specified").trim().isLength({ min: 1 }).escape(), 
.trim() .isLength({ min: 1 }) 
.escape(), 
body("status").escape(), 
body("due_back", "Invalid date") 
.optional({ values: "falsy" }) 
.isISO8601() .toDate(), 
// Process request after validation and sanitization. 
asyncHandler(async (req, res, next) => { 
// Extract the validation errors from a request. 
const errors = validationResult(req); 
// Create a BookInstance object with escaped and trimmed data. 
const bookInstance = new BookInstance({ 
book: req.body.book, 
imprint: req.body.imprint, 
status: req.body.status, 
due_back: req.body.due_back, 
}); 
if (! 
errors.isEmpty()) { 
// There are errors. 
// Render form again with sanitized values and error messages. 
const allBooks = await Book.find({}, "title").exec(); 
res.render("bookinstance_form", { 
title: "Create BookInstance", 
book_list: allBooks, 
selected_book: bookInstance.book._id, 
errors: errors.array(), 
bookinstance: bookInstance, 
}); 
return; 
} else { 
// Data from form is valid 
await bookInstance.save(); 
res.redirect(bookInstance.url); 
} 
}), 
]; 
The structure and behavior of this code is the same as for creating our other objects. 
First we validate and sanitize the data. 
If the data is invalid, we then re-display the form along with the data that was originally entered by the user and a list of error messages. 
If the data is valid, we save the new BookInstance record and redirect the user to the detail page. 
View 
Create /views/bookinstance_form.pug and copy in the text below. 
extends layout 
block content 
h1=title 
form(method='POST' action='') 
div.form-group 
label(for='book') Book: 
select#book.form-control(type='select' placeholder='Select book' name='book' required='true') 
1 : 0;}); 
for book in book_list 
option(value=book._id, selected=(selected_book==book._id.toString() ? 
'selected' : false) ) #{book.title} 
div.form-group 
label(for='imprint') Imprint: 
input#imprint.form-control(type='text' placeholder='Publisher and date information' name='imprint' required='true' value=(undefined===bookinstance ? 
'' : bookinstance.imprint)) 
div.form-group 
label(for='due_back') Date when book available: 
input#due_back.form-control(type='date' name='due_back' value=(undefined===bookinstance ? 
'' : bookinstance.due_back_yyyy_mm_dd)) 
div.form-group 
label(for='status') Status: 
select#status.form-control(type='select' placeholder='Select status' name='status' required='true' ) 
option(value='Maintenance' selected=(undefined===bookinstance || bookinstance.status! ='Maintenance' ? 
false:'selected')) Maintenance 
='Available' ? false:'selected')) Available 
option(value='Reserved' selected=(undefined===bookinstance || bookinstance.status! ='Reserved' ? 
button.btn.btn-primary(type='submit') Submit 
if errors 
ul 
for error in errors 
li! 
= error.msg 
Should you so wish, consider reimplementing the list, passing in option data from the controller and setting the selected value when the form is re-displayed. 
The view structure and behavior is almost the same as for the book_form.pug template, so we won’t go over it in detail. 
The one thing to note is the line where we set the “due back” date to bookinstance.due_back_yyyy_mm_dd if we are populating the date input for an existing instance. 
}); What does it look like? 
Run the application and open your browser to http://localhost:3000/. 
Then select the Create new book instance (copy) link. 
If everything is set up correctly, your site should look something like the following screenshot. 
After you submit a valid BookInstance, it should be saved and you’ll be taken to the detail page. Create BookInstance of the Local library application screenshot from localhost:3000. 
Next steps 
Return to Express Tutorial Part 6: Working with forms. 
Proceed to the next subarticle of part 6: Delete Author form. 

